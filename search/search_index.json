{
    "docs": [
        {
            "location": "/",
            "text": "What is MoQuality?\n\u2693\n\n\nMoQuality is an AI based automated testing platform for native android and iOS mobile apps. It provides an easier way to record tests and run across multiple devices at once. You can expand your test coverage as the AI explores your app just like humans would do and discover more errors in the process.  \n\n\nGet started in few simple steps:\n\n\n\n\nCreate an account\n\n\nUpload your mobile app\n\n\nDownload the Recorder desktop app and start creating test-cases\n\n\nSchedule test runs on multiple devices\n\n\nGenerate more tests using MoQuality AI\n\n\nView results\n\n\n\n\nYou can also use MoQuality in other uses cases:\n\n\n\n\nDocumentation\n with MoQuality",
            "title": "What is MoQuality?"
        },
        {
            "location": "/#what-is-moquality",
            "text": "MoQuality is an AI based automated testing platform for native android and iOS mobile apps. It provides an easier way to record tests and run across multiple devices at once. You can expand your test coverage as the AI explores your app just like humans would do and discover more errors in the process.    Get started in few simple steps:   Create an account  Upload your mobile app  Download the Recorder desktop app and start creating test-cases  Schedule test runs on multiple devices  Generate more tests using MoQuality AI  View results   You can also use MoQuality in other uses cases:   Documentation  with MoQuality",
            "title": "What is MoQuality?"
        },
        {
            "location": "/getting-started/android/",
            "text": "Building an Android App\n\u2693\n\n\nEnable your main activity to be called through an external program. You can do that by setting the following setting in your AndroidManifest file.\n\n\nandroid\n:\nexported\n=\n\"true\"\n\n\n\n\n\n\nUsing Gradle\n\u2693\n\n\nFor Android projects that use the Gradle build system, building a debug APK requires running a command like:\n\n\n./gradlew assembleDebug\n\n\n\n\n\nThe output APK is typically located at \n[project]/app/build/outputs/apk/app-debug.apk\n. You might need to replace \"app\" with your Android default module name.\n\n\nUsing Eclipse/Ant\n\u2693\n\n\nIf your app uses the legacy ant build system, the command is usually\n\n\nant debug\n\n\n\n\n\nUpload the debug apk to \napp.moquality.com\n.",
            "title": "Creating an Android APK"
        },
        {
            "location": "/getting-started/android/#building-an-android-app",
            "text": "Enable your main activity to be called through an external program. You can do that by setting the following setting in your AndroidManifest file.  android : exported = \"true\"",
            "title": "Building an Android App"
        },
        {
            "location": "/getting-started/android/#using-gradle",
            "text": "For Android projects that use the Gradle build system, building a debug APK requires running a command like:  ./gradlew assembleDebug  The output APK is typically located at  [project]/app/build/outputs/apk/app-debug.apk . You might need to replace \"app\" with your Android default module name.",
            "title": "Using Gradle"
        },
        {
            "location": "/getting-started/android/#using-eclipseant",
            "text": "If your app uses the legacy ant build system, the command is usually  ant debug  Upload the debug apk to  app.moquality.com .",
            "title": "Using Eclipse/Ant"
        },
        {
            "location": "/getting-started/ios-sim/",
            "text": "Building an iOS Simulator App\n\u2693\n\n\nWe test iOS simulator apps and native apps.\n\n\niOS Simulator App\n\u2693\n\n\nAlthough it is strongly recommended to test an app on real devices, some developers might want to quickly test their apps on a simulator. Below are the steps you can follow to build your iOS app to run on the iOS Simulator through XCode and the command-line.\n\n\nXCode Workflow\n\u2693\n\n\n\n\n\n\nSelect a iOS simulator target for the project inside XCode.\n\n\n\n\n\n\n\n\nSelect the .app file under Products and choose to \"Show in Finder\" to get the file.\n\n\n\n\nAlternately, you can also navigate to the output folder, which should be located at \n~/Library/Developer/Xcode/DerivedData/<project>/Build/Products/<device>\n\n\n\n\n\n\nCompress the .app folder to create an archived zip file.\n    \n\n\nYou can now upload this zip file to MoQuality for recording tests.\n\n\n\n\n\n\nCLI Workflow\n\u2693\n\n\nGo into the directory containing your XCode project and use xcodebuild to build the app.\n\n\nxcodebuild -sdk iphonesimulator -configuration Debug\n\n\n\n\n\nThen zip the .app bundle in \nbuild/Debug-iphonesimulator\n\n\nzip -r UIKitCatalog.zip UIKitCatalog.app\n\n\n\n\n\nYou can now upload this zip file to MoQuality for recording tests.",
            "title": "Creating an iOS Simulator App"
        },
        {
            "location": "/getting-started/ios-sim/#building-an-ios-simulator-app",
            "text": "We test iOS simulator apps and native apps.",
            "title": "Building an iOS Simulator App"
        },
        {
            "location": "/getting-started/ios-sim/#ios-simulator-app",
            "text": "Although it is strongly recommended to test an app on real devices, some developers might want to quickly test their apps on a simulator. Below are the steps you can follow to build your iOS app to run on the iOS Simulator through XCode and the command-line.",
            "title": "iOS Simulator App"
        },
        {
            "location": "/getting-started/ios-sim/#xcode-workflow",
            "text": "Select a iOS simulator target for the project inside XCode.     Select the .app file under Products and choose to \"Show in Finder\" to get the file.   Alternately, you can also navigate to the output folder, which should be located at  ~/Library/Developer/Xcode/DerivedData/<project>/Build/Products/<device>    Compress the .app folder to create an archived zip file.\n      You can now upload this zip file to MoQuality for recording tests.",
            "title": "XCode Workflow"
        },
        {
            "location": "/getting-started/ios-sim/#cli-workflow",
            "text": "Go into the directory containing your XCode project and use xcodebuild to build the app.  xcodebuild -sdk iphonesimulator -configuration Debug  Then zip the .app bundle in  build/Debug-iphonesimulator  zip -r UIKitCatalog.zip UIKitCatalog.app  You can now upload this zip file to MoQuality for recording tests.",
            "title": "CLI Workflow"
        },
        {
            "location": "/getting-started/ios-native/",
            "text": "Building an iOS Native App\n\u2693\n\n\nThis document gives you an overview of how you can upload your iOS app for real device testing through MoQuality. The steps below walk you through the process of exporting your app as an IPA file (iPhone Application).\n\n\n\n\n\n\nIn your build scheme, choose a \"Generic Device\", this allows you to Archive for multiple architectures and build without having the device plugged in.\n\n\n\n\n\n\n\n\nAfter this change, build your app for testing to ensure the binaries are in the right place.\n\n\n\n\n\n\n\n\nBuild an \nArchive\n for your project by selecting \nProduct > Archive\n.\n\n\n\n\n\n\n\n\nNavigate to the \nArchives organizer\n (Go to the Window > Organizer) to export the app IPA\n\n\n\n\n\n\n\n\nOn the method of distribution screen, select \nAd Hoc Distribution\n.\n\n\n\n\n\n\n\n\nFollow the later prompts to login to your Apple account, if necessary.\n\n\n\n\n\n\nOn the Ad hoc distribution screen, make sure to select \nApp Thinning\n to \nNone\n.\n\n\n\n\n\n\n\n\nSelect \nAutomatically manage \nsigning\n,\n unless you would like to manually create/select the provisioning profiles.\n\n\n\n\n\n\n\n\nOn the final screen, select Export and choose the path for the destination folder.\n\n\n\n\n\n\n\n\nIn this folder you will find the IPA file that you need to upload to your MoQuality account for testing.",
            "title": "Creating an iOS Native App"
        },
        {
            "location": "/getting-started/ios-native/#building-an-ios-native-app",
            "text": "This document gives you an overview of how you can upload your iOS app for real device testing through MoQuality. The steps below walk you through the process of exporting your app as an IPA file (iPhone Application).    In your build scheme, choose a \"Generic Device\", this allows you to Archive for multiple architectures and build without having the device plugged in.     After this change, build your app for testing to ensure the binaries are in the right place.     Build an  Archive  for your project by selecting  Product > Archive .     Navigate to the  Archives organizer  (Go to the Window > Organizer) to export the app IPA     On the method of distribution screen, select  Ad Hoc Distribution .     Follow the later prompts to login to your Apple account, if necessary.    On the Ad hoc distribution screen, make sure to select  App Thinning  to  None .     Select  Automatically manage  signing ,  unless you would like to manually create/select the provisioning profiles.     On the final screen, select Export and choose the path for the destination folder.     In this folder you will find the IPA file that you need to upload to your MoQuality account for testing.",
            "title": "Building an iOS Native App"
        },
        {
            "location": "/getting-started/upload-app/",
            "text": "Uploading an App\n\u2693\n\n\n\n\n\n\nGo to \napp.moquality.com\n.\n\n\n\n\n\n\nClick \"ADD APP\".\n\n\n\n\n\n\n\n\nChoose the type of app you would like to add, enter a name and, optionally, a description, and click submit. If you are adding an Android app, choose an APK to upload. If you are adding an iOS app, choose either a \n.ipa\n file or a \n.app\n directory in a Zip file. If the iOS app in question is a simulator build, make sure to check the \"Is Simulator\" checkbox, or the app will not work correctly.\n\n\n\n\n\n\n\n\nNow what?\n\u2693\n\n\nAfter uploading an app, a user can either\n\n\n\n\nRecord tests\n using the MoQuality Test Recorder and \nschedule runs\n of recorded tests to run on multiple devices.\n\n\nRequest an \nauto-generation of tests\n.",
            "title": "Upload App"
        },
        {
            "location": "/getting-started/upload-app/#uploading-an-app",
            "text": "Go to  app.moquality.com .    Click \"ADD APP\".     Choose the type of app you would like to add, enter a name and, optionally, a description, and click submit. If you are adding an Android app, choose an APK to upload. If you are adding an iOS app, choose either a  .ipa  file or a  .app  directory in a Zip file. If the iOS app in question is a simulator build, make sure to check the \"Is Simulator\" checkbox, or the app will not work correctly.",
            "title": "Uploading an App"
        },
        {
            "location": "/getting-started/upload-app/#now-what",
            "text": "After uploading an app, a user can either   Record tests  using the MoQuality Test Recorder and  schedule runs  of recorded tests to run on multiple devices.  Request an  auto-generation of tests .",
            "title": "Now what?"
        },
        {
            "location": "/recorder/",
            "text": "Getting Started with the Recorder\n\u2693\n\n\nThe MoQuality test recorder is used to record, replay and edit tests using a local mobile device. It automatically downloads and installs the app  on a new device.\n\n\nFor a full overview of the recorder's functionality, see \nthe Recorder Feature List\n.\n\n\nDownloading the Recorder\n\u2693\n\n\nDownload the recorder from \napp.moquality.com/download\n.\n\n\nSetup the Device\n\u2693\n\n\nAndroid and iOS devices are setup differently, as follows:\n\n\n\n\nRecorder Setup for Android Devices\n\n\nRecorder Setup for iOS Devices\n\n\n\n\nRecording a Test Case\n\u2693\n\n\n\n\n\n\nChoose a device and an app.\n\n\n\n\n\n\n\n\nChoose device settings.\n\n\n\n\nInstall app (for the first time use).\n\n\nClick \"Record\".\n\n\nPerform actions in the app.\n\n\nClick \"Save\".\n\n\nEnter a name for the test.\n\n\nClick \"Save\".\n\n\n\n\nReplaying a Test\n\u2693\n\n\n\n\nChoose a device.\n\n\nChoose the app that the test was recorded for.\n\n\nChoose device settings.\n\n\nInstall app (if it is not previously installed).\n\n\nSwitch to the \"Tests\" tab.\n\n\nFind the test that you would like to replay and expand it.\n\n\nClick \"Run\".\n\n\n\n\nEditing a Test\n\u2693\n\n\nAfter saving a test recording, you can make changes to a test such as adding a time delay, or deleting a step. For more information see \nTest editing\n\n\nTroubleshooting\n\u2693\n\n\nInfinite Loading Screen\n\u2693\n\n\nGet a screenshot\n\u2693\n\n\nIn some cases, the recorder may fail to start properly when connecting to a device. If this occurs, you will be presented with an error message, following which the loading screen will continue to load infinitely. This usually happens as a result of a desynchronization between the device and ADB (Android Debug Bridge), resulting in ADB classifying the device as \"offline\". If this happens, try the following steps:\n\n\n\n\nClose the recorder.\n\n\nUnplug the device.\n\n\nDisable USB debugging in the devices settings (\nClick here to know how\n). \n\n\nRe-enable USB debugging.\n\n\nPlug the device back in.\n\n\nStart the recorder again.\n\n\n\n\nIf the problem persists, please contact MoQuality for further support.\n\n\nDifferences between Android and iOS test recording\n\u2693\n\n\nAndroid and iOS devices behave similarly in the recorder, but there are a few differences in the touch control.\n\n\nOn Android, the mouse pointer emulates a touch input, providing a clean 1-to-1 interaction between the recorder and the app. Unfortunately, due to limitations in iOS automation, the recorder is unable to do this 1-to-1 interaction with iOS devices.\n\n\nWhen clicking on the screen while using an iOS device, a circle will appear where the mouse button was pressed. If the mouse is dragged past a threshold distance away from that starting point, a second circle will appear under the mouse with a line connecting the two. If this appears, releasing the mouse will perform a drag from the first circle to the second; if it does not appear, then a click action will be performed at the location of the first circle instead.",
            "title": "Getting Started"
        },
        {
            "location": "/recorder/#getting-started-with-the-recorder",
            "text": "The MoQuality test recorder is used to record, replay and edit tests using a local mobile device. It automatically downloads and installs the app  on a new device.  For a full overview of the recorder's functionality, see  the Recorder Feature List .",
            "title": "Getting Started with the Recorder"
        },
        {
            "location": "/recorder/#downloading-the-recorder",
            "text": "Download the recorder from  app.moquality.com/download .",
            "title": "Downloading the Recorder"
        },
        {
            "location": "/recorder/#setup-the-device",
            "text": "Android and iOS devices are setup differently, as follows:   Recorder Setup for Android Devices  Recorder Setup for iOS Devices",
            "title": "Setup the Device"
        },
        {
            "location": "/recorder/#recording-a-test-case",
            "text": "Choose a device and an app.     Choose device settings.   Install app (for the first time use).  Click \"Record\".  Perform actions in the app.  Click \"Save\".  Enter a name for the test.  Click \"Save\".",
            "title": "Recording a Test Case"
        },
        {
            "location": "/recorder/#replaying-a-test",
            "text": "Choose a device.  Choose the app that the test was recorded for.  Choose device settings.  Install app (if it is not previously installed).  Switch to the \"Tests\" tab.  Find the test that you would like to replay and expand it.  Click \"Run\".",
            "title": "Replaying a Test"
        },
        {
            "location": "/recorder/#editing-a-test",
            "text": "After saving a test recording, you can make changes to a test such as adding a time delay, or deleting a step. For more information see  Test editing",
            "title": "Editing a Test"
        },
        {
            "location": "/recorder/#troubleshooting",
            "text": "",
            "title": "Troubleshooting"
        },
        {
            "location": "/recorder/#infinite-loading-screen",
            "text": "",
            "title": "Infinite Loading Screen"
        },
        {
            "location": "/recorder/#get-a-screenshot",
            "text": "In some cases, the recorder may fail to start properly when connecting to a device. If this occurs, you will be presented with an error message, following which the loading screen will continue to load infinitely. This usually happens as a result of a desynchronization between the device and ADB (Android Debug Bridge), resulting in ADB classifying the device as \"offline\". If this happens, try the following steps:   Close the recorder.  Unplug the device.  Disable USB debugging in the devices settings ( Click here to know how ).   Re-enable USB debugging.  Plug the device back in.  Start the recorder again.   If the problem persists, please contact MoQuality for further support.",
            "title": "Get a screenshot"
        },
        {
            "location": "/recorder/#differences-between-android-and-ios-test-recording",
            "text": "Android and iOS devices behave similarly in the recorder, but there are a few differences in the touch control.  On Android, the mouse pointer emulates a touch input, providing a clean 1-to-1 interaction between the recorder and the app. Unfortunately, due to limitations in iOS automation, the recorder is unable to do this 1-to-1 interaction with iOS devices.  When clicking on the screen while using an iOS device, a circle will appear where the mouse button was pressed. If the mouse is dragged past a threshold distance away from that starting point, a second circle will appear under the mouse with a line connecting the two. If this appears, releasing the mouse will perform a drag from the first circle to the second; if it does not appear, then a click action will be performed at the location of the first circle instead.",
            "title": "Differences between Android and iOS test recording"
        },
        {
            "location": "/recorder/android/",
            "text": "Recorder Setup for Android Devices\n\u2693\n\n\nEnable USB Debugging\n\u2693\n\n\n\n\n\n\nSelect a device you would like to test with and then \nturn on USB Debugging\n, which can be found inside of \nSettings > Developer Options > USB Debugging\n and connect your device to your computer. \nPress 'Always Allow\"\n on the popup on the device.\n\n\n\n\n\n\n\n\nUpload App\n\u2693\n\n\n\n\n\n\nMake sure to have uploaded a version of your app to test on \napp.moquality.com\n. We automatically will find the \npackage name\n and \nactivity name\n for the app. You can verify it under the Settings tab.\n\n\n\n\n\n\n\n\nLaunch Recorder\n\u2693\n\n\n\n\n\n\nLaunch the recorder with your connected device and log in with either your \nAPI key\n or \nusername/password\n. Select your device and app from the drop down, as well as your screen size and keyboard preference. We recommend setting it to no-keyboard, tests are more reliable without flaky keyboard. The recorder itself has a text input feature which will allow you to input text into text boxes.\n\n\n\n\n\n\n\n\nPress Record\n (on top left) to begin  recording your test on your device. Interact with the screen projection you see in front of you. You \nMUST use the bottom interface buttons\n for actions instead of the hardware buttons on your device. Hardware buttons include back button, home screen button and show apps button. Similarly, if your device has software buttons, do not click them. We assume that software buttoms will never be a part of a test case and discard them.\n\n\n\n\n\n\n\n\nWhen you are done recording a test, \npress SAVE and name your test\n. You can then view the test in the app.moquality.com website.\n\n\n\n\n\n\n\n\nReplay Tests\n\u2693\n\n\n\n\n\n\nTo \nconfirm the test was valid, move to the Tests Tab and try to run the test\n. If you are unable to run the test, you may have to re-record it, or head down to the FAQ to see possible solutions.\n\n\n\n\n\n\n\n\nFAQ\n\u2693\n\n\nWhy does my phone not connect?\n\n\nDouble-check that USB debugging is on and that you have clicked 'Allow' on the on-screen popup. You may have to unplug and replug the device in some cases.\n\n\nWhy does it say I need to re-record in 'Stable Mode'?\n\n\nFor some apps and tests, the regular mode may be unable to capture all the necessary details to successfully run the test. You can toggle 'Stable Mode' inside the recording by going into 'Settings' and toggling the option.",
            "title": "Android Setup"
        },
        {
            "location": "/recorder/android/#recorder-setup-for-android-devices",
            "text": "",
            "title": "Recorder Setup for Android Devices"
        },
        {
            "location": "/recorder/android/#enable-usb-debugging",
            "text": "Select a device you would like to test with and then  turn on USB Debugging , which can be found inside of  Settings > Developer Options > USB Debugging  and connect your device to your computer.  Press 'Always Allow\"  on the popup on the device.",
            "title": "Enable USB Debugging"
        },
        {
            "location": "/recorder/android/#upload-app",
            "text": "Make sure to have uploaded a version of your app to test on  app.moquality.com . We automatically will find the  package name  and  activity name  for the app. You can verify it under the Settings tab.",
            "title": "Upload App"
        },
        {
            "location": "/recorder/android/#launch-recorder",
            "text": "Launch the recorder with your connected device and log in with either your  API key  or  username/password . Select your device and app from the drop down, as well as your screen size and keyboard preference. We recommend setting it to no-keyboard, tests are more reliable without flaky keyboard. The recorder itself has a text input feature which will allow you to input text into text boxes.     Press Record  (on top left) to begin  recording your test on your device. Interact with the screen projection you see in front of you. You  MUST use the bottom interface buttons  for actions instead of the hardware buttons on your device. Hardware buttons include back button, home screen button and show apps button. Similarly, if your device has software buttons, do not click them. We assume that software buttoms will never be a part of a test case and discard them.     When you are done recording a test,  press SAVE and name your test . You can then view the test in the app.moquality.com website.",
            "title": "Launch Recorder"
        },
        {
            "location": "/recorder/android/#replay-tests",
            "text": "To  confirm the test was valid, move to the Tests Tab and try to run the test . If you are unable to run the test, you may have to re-record it, or head down to the FAQ to see possible solutions.",
            "title": "Replay Tests"
        },
        {
            "location": "/recorder/android/#faq",
            "text": "Why does my phone not connect?  Double-check that USB debugging is on and that you have clicked 'Allow' on the on-screen popup. You may have to unplug and replug the device in some cases.  Why does it say I need to re-record in 'Stable Mode'?  For some apps and tests, the regular mode may be unable to capture all the necessary details to successfully run the test. You can toggle 'Stable Mode' inside the recording by going into 'Settings' and toggling the option.",
            "title": "FAQ"
        },
        {
            "location": "/recorder/ios/",
            "text": "Recorder Setup for iOS Devices\n\u2693\n\n\nIn order to use the recorder with iOS devices, some configuration is necessary. This page documents that configuration.\n\n\n\n\nNote\n\n\nThese steps were gathered via repeated attempts to determine the code signing process. It is possible that earlier attempts affected the steps determined, meaning that these may not work on a clean setup. Further testing is necessary.\n\n\n\n\nLog in to Apple Developer Portal\n\u2693\n\n\nFirst, log into \nthe Apple Developer Portal\n. Click the Account link at the top of the page to access your account info. In the sidebar on the left, you should see the following links:\n\n\n\n\nClick the \"Certificates, IDs & Profiles\" link.\n\n\nIf you already have a valid certificate, skip to step 3 (Alternate).\n\n\nGenerate a certificate\n\u2693\n\n\nAbove the certificate list on the next page, click the \n+\n button to generate a new certificate.\n\n\n\n\nSelect \"iOS App Development\".\n\n\n\n\nThe next page should give you instructions on how to generate a CSR. Follow those instructions before continuing.\n\n\n\n\n\n\nImport the certificate\n\u2693\n\n\nDownload the newly generated certificate.\n\n\n\n\nIf you already have a certificate generated, navigate to the certificate list, find your certificate, click on it, and then click the download button in the expanded panel.\n\n\n\n\nOnce the certificate is downloaded, locate it in Finder and double-click it. This should open the Keychain Access app with the certificate newly imported into the \"System\" keychain. To find it, click System in the sidebar, and then Certificates.\n\n\n\n\nThe certificate needs to be moved to the \"local\" keychain. To do so, simply drag it from the list of certificates on the local keychain in the sidebar. Once this is done, it should appear under \"My Certificates\", rather than just under \"Certificates\".\n\n\nGenerate an App ID\n\u2693\n\n\nBack in the developer portal, click \"App IDs\" on the sidebar.\n\n\n\n\nClick the \n+\n button at the top, much like when generating a certificate.\n\n\n\n\nName the ID something reasonable for its use, such as \"Recorder\".\n\n\n\n\nSelect \"Wildcard App ID\" and enter a single asterisk as the ID.\n\n\nTake note of the Team ID listed under the \"App ID Prefix\". You'll need it.\n\n\n\n\nClick \"Done\".\n\n\nGenerate a mobile provisioning profile\n\u2693\n\n\nClick \"All\" under \"Provisioning Profiles\" in the sidebar. You may need to scroll down to see it.\n\n\n\n\nClick the \n+\n button to generate a new profile, and then select \"iOS App Development\".\n\n\n\n\nSelect the App ID that you generated in the previous step.\n\n\n\n\nSelect the certificate generated in step 2, or your existing certificate if you did not generate one.\n\n\n\n\nClick the \"Select All\" checkbox on the device list.\n\n\n\n\nEnter a name for the profile.\n\n\n\n\nYou do \nnot\n need to download the profile. That will be handled automatically.\n\n\n\n\nSet up environment variables\n\u2693\n\n\nThe final step is to set the \n$DEVELOPMENT_TEAM\n environment variable to the Team ID from step 4. There are several ways to do this, but one of the simplest is to add the variable to the \n.bash_profile\n file in your home directory.\n\n\nOpen the \n$HOME/.bash_profile\n file in an editor of your choice and add the following line to the end of it:\n\n\nbash export DEVELOPMENT_TEAM=<Team ID>\n\n\n\n\n\nReplace \n<Team ID>\n with the your team ID.\n\n\nOnce this is done, you will need to log out and back in. Then simply run the recorder as normal.\n\n\nEnsure xcode is in system path\n\u2693\n\n\nGo to \nXcode > Preferences > Locations\n, and assign the Command Line Tools to XCode.",
            "title": "iOS Setup"
        },
        {
            "location": "/recorder/ios/#recorder-setup-for-ios-devices",
            "text": "In order to use the recorder with iOS devices, some configuration is necessary. This page documents that configuration.   Note  These steps were gathered via repeated attempts to determine the code signing process. It is possible that earlier attempts affected the steps determined, meaning that these may not work on a clean setup. Further testing is necessary.",
            "title": "Recorder Setup for iOS Devices"
        },
        {
            "location": "/recorder/ios/#log-in-to-apple-developer-portal",
            "text": "First, log into  the Apple Developer Portal . Click the Account link at the top of the page to access your account info. In the sidebar on the left, you should see the following links:   Click the \"Certificates, IDs & Profiles\" link.  If you already have a valid certificate, skip to step 3 (Alternate).",
            "title": "Log in to Apple Developer Portal"
        },
        {
            "location": "/recorder/ios/#generate-a-certificate",
            "text": "Above the certificate list on the next page, click the  +  button to generate a new certificate.   Select \"iOS App Development\".   The next page should give you instructions on how to generate a CSR. Follow those instructions before continuing.",
            "title": "Generate a certificate"
        },
        {
            "location": "/recorder/ios/#import-the-certificate",
            "text": "Download the newly generated certificate.   If you already have a certificate generated, navigate to the certificate list, find your certificate, click on it, and then click the download button in the expanded panel.   Once the certificate is downloaded, locate it in Finder and double-click it. This should open the Keychain Access app with the certificate newly imported into the \"System\" keychain. To find it, click System in the sidebar, and then Certificates.   The certificate needs to be moved to the \"local\" keychain. To do so, simply drag it from the list of certificates on the local keychain in the sidebar. Once this is done, it should appear under \"My Certificates\", rather than just under \"Certificates\".",
            "title": "Import the certificate"
        },
        {
            "location": "/recorder/ios/#generate-an-app-id",
            "text": "Back in the developer portal, click \"App IDs\" on the sidebar.   Click the  +  button at the top, much like when generating a certificate.   Name the ID something reasonable for its use, such as \"Recorder\".   Select \"Wildcard App ID\" and enter a single asterisk as the ID.  Take note of the Team ID listed under the \"App ID Prefix\". You'll need it.   Click \"Done\".",
            "title": "Generate an App ID"
        },
        {
            "location": "/recorder/ios/#generate-a-mobile-provisioning-profile",
            "text": "Click \"All\" under \"Provisioning Profiles\" in the sidebar. You may need to scroll down to see it.   Click the  +  button to generate a new profile, and then select \"iOS App Development\".   Select the App ID that you generated in the previous step.   Select the certificate generated in step 2, or your existing certificate if you did not generate one.   Click the \"Select All\" checkbox on the device list.   Enter a name for the profile.   You do  not  need to download the profile. That will be handled automatically.",
            "title": "Generate a mobile provisioning profile"
        },
        {
            "location": "/recorder/ios/#set-up-environment-variables",
            "text": "The final step is to set the  $DEVELOPMENT_TEAM  environment variable to the Team ID from step 4. There are several ways to do this, but one of the simplest is to add the variable to the  .bash_profile  file in your home directory.  Open the  $HOME/.bash_profile  file in an editor of your choice and add the following line to the end of it:  bash export DEVELOPMENT_TEAM=<Team ID>  Replace  <Team ID>  with the your team ID.  Once this is done, you will need to log out and back in. Then simply run the recorder as normal.",
            "title": "Set up environment variables"
        },
        {
            "location": "/recorder/ios/#ensure-xcode-is-in-system-path",
            "text": "Go to  Xcode > Preferences > Locations , and assign the Command Line Tools to XCode.",
            "title": "Ensure xcode is in system path"
        },
        {
            "location": "/recorder/features/",
            "text": "Recorder Feature List\n\u2693\n\n\nAssertions\n\u2693\n\n\nAdd an assertion to your test, to force-check expected outcomes such as checking for specific text or UI element. For example, at the login screen, incase of incorrect username or password, you can add an assertion in the recorder to check for the 'Invalid login credentials' text message.\n\n\n\n\nAPI Requests\n\u2693\n\n\nMake API requests to your testing environments through the app. Recorder allows API requests at any screen of the app. This is most helpful when you might want to initialize user setup before testing the login screen or make an API call to clean out the test data at the end of test flow. \n\n\n\n\nExplore Tab\n\u2693\n\n\nYou can interact with the hierarchy of your app in the \nExplore Tab\n. Here you can view widget properties and also add assertions for any screen in your app.\n\n\n\n\nKeyboard Input\n\u2693\n\n\nTo enter text input, click the keyboard button below the phone screen\n\n\n\n\nRecording\n\u2693\n\n\nWhen you press record button, the app's cache is automatically cleared, and your app is launched. Auto-launch can be turned off in Settings. While in record mode, all interactions on the phone projection will be recorded. If you unintentiionally clicked an item, you can delete the action from the action list on the right pane. If you delete an action on which the next steps are dependant, the subsequent attempts to run the test can fail.\n\n\n\n\nTest Editing\n\u2693\n\n\nTo edit a previously recorded test, go into the Tests tab. Open the test and go to the step that you would like to edit. Click the edit icon to open the editor.  Here you can edit the step's description, select a new widget to target, or add a sleep time. Sleep time is helpful when you want the test run to wait until the screen loads completely.\n\n\n\n\nTest Replay\n\u2693\n\n\nAfter you have a recorded a successful test, proceed to the Tests Tab and replay your test.",
            "title": "Features"
        },
        {
            "location": "/recorder/features/#recorder-feature-list",
            "text": "",
            "title": "Recorder Feature List"
        },
        {
            "location": "/recorder/features/#assertions",
            "text": "Add an assertion to your test, to force-check expected outcomes such as checking for specific text or UI element. For example, at the login screen, incase of incorrect username or password, you can add an assertion in the recorder to check for the 'Invalid login credentials' text message.",
            "title": "Assertions"
        },
        {
            "location": "/recorder/features/#api-requests",
            "text": "Make API requests to your testing environments through the app. Recorder allows API requests at any screen of the app. This is most helpful when you might want to initialize user setup before testing the login screen or make an API call to clean out the test data at the end of test flow.",
            "title": "API Requests"
        },
        {
            "location": "/recorder/features/#explore-tab",
            "text": "You can interact with the hierarchy of your app in the  Explore Tab . Here you can view widget properties and also add assertions for any screen in your app.",
            "title": "Explore Tab"
        },
        {
            "location": "/recorder/features/#keyboard-input",
            "text": "To enter text input, click the keyboard button below the phone screen",
            "title": "Keyboard Input"
        },
        {
            "location": "/recorder/features/#recording",
            "text": "When you press record button, the app's cache is automatically cleared, and your app is launched. Auto-launch can be turned off in Settings. While in record mode, all interactions on the phone projection will be recorded. If you unintentiionally clicked an item, you can delete the action from the action list on the right pane. If you delete an action on which the next steps are dependant, the subsequent attempts to run the test can fail.",
            "title": "Recording"
        },
        {
            "location": "/recorder/features/#test-editing",
            "text": "To edit a previously recorded test, go into the Tests tab. Open the test and go to the step that you would like to edit. Click the edit icon to open the editor.  Here you can edit the step's description, select a new widget to target, or add a sleep time. Sleep time is helpful when you want the test run to wait until the screen loads completely.",
            "title": "Test Editing"
        },
        {
            "location": "/recorder/features/#test-replay",
            "text": "After you have a recorded a successful test, proceed to the Tests Tab and replay your test.",
            "title": "Test Replay"
        },
        {
            "location": "/recorder/test-editing/",
            "text": "Test Editing in the Recorder\n\u2693\n\n\nIntroduction\n\u2693\n\n\nTest editing feature allows you to change test steps, actions, test paramters, or sleep times.\n\n\nOpening the Edit Menu\n\u2693\n\n\nThe \nEdit Menu\n can be accessed by hovering over the selected \nTest Step\n, and clicking the \nEdit Button\n.\n\n\n\n\nEditing Step Description\n\u2693\n\n\nIf you would like to change the description of a test step, it's as easy as replacing the content inside the \nDescription\n tab and pressing \nSubmit\n\n\n\n\nEditing Test Parameters (Coming Soon)\n\u2693\n\n\nWe are currently in the process of adding the functionality to parameterize test inputs, such as usernames and passwords, to expand the testing capabilities of an individual test.\n\n\n\n\nAdding Sleep Times after a step\n\u2693\n\n\nSometimes\n our AI will try to continue through a test, despite the device not being ready to receive the additional information. This can happen for several reasons, including changes in internet connection speed, or background apps hogging the phone's processing power. The simplest way to tell the app to wait, is to add a sleep action immediately following a problematic action. \n\n\n\n\nSelecting a New Target Widget (Beta)\n\u2693\n\n\nIf the recorded is unable to detect the desired widget, you can manually set a new target within the current screen. Simply go to \nSelect Target\n tab and select the widget on the screen that you want to set as new target.",
            "title": "Test Editing"
        },
        {
            "location": "/recorder/test-editing/#test-editing-in-the-recorder",
            "text": "",
            "title": "Test Editing in the Recorder"
        },
        {
            "location": "/recorder/test-editing/#introduction",
            "text": "Test editing feature allows you to change test steps, actions, test paramters, or sleep times.",
            "title": "Introduction"
        },
        {
            "location": "/recorder/test-editing/#opening-the-edit-menu",
            "text": "The  Edit Menu  can be accessed by hovering over the selected  Test Step , and clicking the  Edit Button .",
            "title": "Opening the Edit Menu"
        },
        {
            "location": "/recorder/test-editing/#editing-step-description",
            "text": "If you would like to change the description of a test step, it's as easy as replacing the content inside the  Description  tab and pressing  Submit",
            "title": "Editing Step Description"
        },
        {
            "location": "/recorder/test-editing/#editing-test-parameters-coming-soon",
            "text": "We are currently in the process of adding the functionality to parameterize test inputs, such as usernames and passwords, to expand the testing capabilities of an individual test.",
            "title": "Editing Test Parameters (Coming Soon)"
        },
        {
            "location": "/recorder/test-editing/#adding-sleep-times-after-a-step",
            "text": "Sometimes  our AI will try to continue through a test, despite the device not being ready to receive the additional information. This can happen for several reasons, including changes in internet connection speed, or background apps hogging the phone's processing power. The simplest way to tell the app to wait, is to add a sleep action immediately following a problematic action.",
            "title": "Adding Sleep Times after a step"
        },
        {
            "location": "/recorder/test-editing/#selecting-a-new-target-widget-beta",
            "text": "If the recorded is unable to detect the desired widget, you can manually set a new target within the current screen. Simply go to  Select Target  tab and select the widget on the screen that you want to set as new target.",
            "title": "Selecting a New Target Widget (Beta)"
        },
        {
            "location": "/getting-started/auto-test/",
            "text": "Auto-generating Tests\n\u2693\n\n\nThis feature allows MQ-Bot (our AI Agent) to create tests automatically and executing them on devices users specify.\nThe MQ-Bot tries to systematically identify widgets on every screen and interacts with them. In the end, it gives you a list of test runs it has conducted and a pass or success for each of them, along with screenshots, AppMap, and various statistics. To view results and reports of the test runs, visit  \nDashboard\n.\n\n\nUse Case\n\u2693\n\n\nIn contrast to demonstrating a test and running them, robot test can be used for quick feedback and check cases that you might otherwise miss out.The more you use this feature on your app, the smarter it gets. For example, if the robot finds a bug, it prioritizes testing towards creating test runs to produce  that bug. For enterprise customers, the robot learns the context of your app and creates test runs like a human would.\n\n\nIn order to automatically generate tests, click on Generate Tests.\nNow specify the name of the report, number of tests you want to generate and the maximum\namount of time MQ-Bot ,should run. For example, if you specify 10 tests to be generated in an hour, than the MQ-Bot will generate approximately 10 tests in an hour. If you specify\n30 min instead of an hour, it will still generate the same number of tests, but the\ntests will be shorter.\n\n\n\n\nTraining MQ-Bot\n\u2693\n\n\nOur MQ-Bot can be trained!! By recording with \nMoQuality Recorder\n, we can train the MQ-Bot to know the important\ntest flows and screens. It makes the MQ-Bot bias itself towards such flows and screen when creating tests.18 \n\n\nViewing results\n\u2693\n\n\nTo view results and reports of the test runs, visit  \nDashboard",
            "title": "Scheduling robot tests"
        },
        {
            "location": "/getting-started/auto-test/#auto-generating-tests",
            "text": "This feature allows MQ-Bot (our AI Agent) to create tests automatically and executing them on devices users specify.\nThe MQ-Bot tries to systematically identify widgets on every screen and interacts with them. In the end, it gives you a list of test runs it has conducted and a pass or success for each of them, along with screenshots, AppMap, and various statistics. To view results and reports of the test runs, visit   Dashboard .",
            "title": "Auto-generating Tests"
        },
        {
            "location": "/getting-started/auto-test/#use-case",
            "text": "In contrast to demonstrating a test and running them, robot test can be used for quick feedback and check cases that you might otherwise miss out.The more you use this feature on your app, the smarter it gets. For example, if the robot finds a bug, it prioritizes testing towards creating test runs to produce  that bug. For enterprise customers, the robot learns the context of your app and creates test runs like a human would.  In order to automatically generate tests, click on Generate Tests.\nNow specify the name of the report, number of tests you want to generate and the maximum\namount of time MQ-Bot ,should run. For example, if you specify 10 tests to be generated in an hour, than the MQ-Bot will generate approximately 10 tests in an hour. If you specify\n30 min instead of an hour, it will still generate the same number of tests, but the\ntests will be shorter.",
            "title": "Use Case"
        },
        {
            "location": "/getting-started/auto-test/#training-mq-bot",
            "text": "Our MQ-Bot can be trained!! By recording with  MoQuality Recorder , we can train the MQ-Bot to know the important\ntest flows and screens. It makes the MQ-Bot bias itself towards such flows and screen when creating tests.18",
            "title": "Training MQ-Bot"
        },
        {
            "location": "/getting-started/auto-test/#viewing-results",
            "text": "To view results and reports of the test runs, visit   Dashboard",
            "title": "Viewing results"
        },
        {
            "location": "/getting-started/view-tests/",
            "text": "View Recorded Test Cases\n\u2693\n\n\nTo view your recorded tests, navigate to \nTests\n page. If you have not recorded a test yet, download the MoQuality Test Recorder and record your first test. A test consist of a series of actions performed on an app on a device. It is displayed as a series of screenshots which show a highlighted area indicating the action widget. The following page displays all the recorded tests with MoQuality Recorder.\n\n\n\n\nBy clicking on an individual test, you can see the screenshots of the test.",
            "title": "View Recorded Tests"
        },
        {
            "location": "/getting-started/view-tests/#view-recorded-test-cases",
            "text": "To view your recorded tests, navigate to  Tests  page. If you have not recorded a test yet, download the MoQuality Test Recorder and record your first test. A test consist of a series of actions performed on an app on a device. It is displayed as a series of screenshots which show a highlighted area indicating the action widget. The following page displays all the recorded tests with MoQuality Recorder.   By clicking on an individual test, you can see the screenshots of the test.",
            "title": "View Recorded Test Cases"
        },
        {
            "location": "/getting-started/test-suite/",
            "text": "Test Suites\n\u2693\n\n\nA \ntest suite\n is an \nordered sequence of tests\n. After recording the test cases through the recorder, you can create a Test Suite and schedule it to run on a \ndevie group\n. \n\n\nTest Suite Example\n\u2693\n\n\nA music app may have several tests related to playlists, therefore a playlist test suite would contain all the test cases related to playlist. Likewise a test suite would contain tests for a music player.\n\n\nCreating a test suite\n\u2693\n\n\nNavigate to the \nSuites\n tab and click on the Create Test Suite.\n\n\n\n\nNow name the Test Suite and select the tests that you want to run. You can create multiple test suites this way.",
            "title": "Creating Test Suites"
        },
        {
            "location": "/getting-started/test-suite/#test-suites",
            "text": "A  test suite  is an  ordered sequence of tests . After recording the test cases through the recorder, you can create a Test Suite and schedule it to run on a  devie group .",
            "title": "Test Suites"
        },
        {
            "location": "/getting-started/test-suite/#test-suite-example",
            "text": "A music app may have several tests related to playlists, therefore a playlist test suite would contain all the test cases related to playlist. Likewise a test suite would contain tests for a music player.",
            "title": "Test Suite Example"
        },
        {
            "location": "/getting-started/test-suite/#creating-a-test-suite",
            "text": "Navigate to the  Suites  tab and click on the Create Test Suite.   Now name the Test Suite and select the tests that you want to run. You can create multiple test suites this way.",
            "title": "Creating a test suite"
        },
        {
            "location": "/getting-started/devices/",
            "text": "Create Device Group\n\u2693\n\n\nA device group is a collection of devices on which you want to run tests. A user can create a group of devices you want to run tests on. There are few presets available such as Google Devices, Samsung Devices, Popular Devices.\n\n\n\n\nIn order to create a custom device group \nclick the \"+ button\"\n. Custom device groups are important in many situations. For example, a user may want to run the apps on devices that have the latest android version, or to confirm it works on old versions. You can create a group of devices from a certain manufacturer, or create a device group composed of popular devices. See below for an example on how to make a custom group.\n\n\n\n\nWe rent devices from various test infrastructure providers. Today we support around 50 devices and we are continuously adding new devices into our system as and when our users need them.",
            "title": "Creating Device Groups"
        },
        {
            "location": "/getting-started/devices/#create-device-group",
            "text": "A device group is a collection of devices on which you want to run tests. A user can create a group of devices you want to run tests on. There are few presets available such as Google Devices, Samsung Devices, Popular Devices.   In order to create a custom device group  click the \"+ button\" . Custom device groups are important in many situations. For example, a user may want to run the apps on devices that have the latest android version, or to confirm it works on old versions. You can create a group of devices from a certain manufacturer, or create a device group composed of popular devices. See below for an example on how to make a custom group.   We rent devices from various test infrastructure providers. Today we support around 50 devices and we are continuously adding new devices into our system as and when our users need them.",
            "title": "Create Device Group"
        },
        {
            "location": "/getting-started/scheduling-tests/",
            "text": "Scheduling Tests\n\u2693\n\n\nYou will be able to schedule test runs on devices, after you have created tests using MoQuality Recorder, created Test Suites and device groups. \n\n\n Note: \n\nThe test cases you create adapt to every version of the app you upload. So the test, test suites, and device groups you create show up for every new version. Only the overview page keeps changing because the test report runs on a particular version.\n\n\nExecuting Tests\n\u2693\n\n\nClick Overview tab and scroll down to Test Reports section.\n\n\n\n\nClick on Run Tests, then the following window would pop-up. Enter the name of the report, \nselect a device group, and select tests/suites you want to run on other devices.\n\n\n\n\nViewing results\n\u2693\n\n\nTo view results and reports of the test runs, visit  \nView Results",
            "title": "Scheduling Tests"
        },
        {
            "location": "/getting-started/scheduling-tests/#scheduling-tests",
            "text": "You will be able to schedule test runs on devices, after you have created tests using MoQuality Recorder, created Test Suites and device groups.    Note:  \nThe test cases you create adapt to every version of the app you upload. So the test, test suites, and device groups you create show up for every new version. Only the overview page keeps changing because the test report runs on a particular version.",
            "title": "Scheduling Tests"
        },
        {
            "location": "/getting-started/scheduling-tests/#executing-tests",
            "text": "Click Overview tab and scroll down to Test Reports section.   Click on Run Tests, then the following window would pop-up. Enter the name of the report, \nselect a device group, and select tests/suites you want to run on other devices.",
            "title": "Executing Tests"
        },
        {
            "location": "/getting-started/scheduling-tests/#viewing-results",
            "text": "To view results and reports of the test runs, visit   View Results",
            "title": "Viewing results"
        },
        {
            "location": "/getting-started/view-results/",
            "text": "Viewing Results\n\u2693\n\n\nWhen a user has either scheduled tests or requested automatically generated tests, reports containing the results, success/failure of a tests, screenshot, various statistics, app maps are automatically generated. In order to view these\nresults,  navigate to the Overview page and a following screen shall appear.\n\n\n\n\nIf a user has not requested any tests, then there is no reporting.\nUnder \n Test Reports \n section,  each row represents a Test Report,  status, suites it ran on, device groups, and the various actions. The status is either a green tick signalling that no bugs found, red balloon showing that there are bugs, orange balloon indicating warnings or potential risks or an hour glass indicating that the tests yet to be executed. There are currently two results available now:\n\n\nView Report\n\u2693\n\n\nIt shows the test runs of all the tests in the report across all the selected devices. The report provides the details af tests as well such as if the test was successful along with any bugs. By clicking the view report button you get the details of the test runs.\n\n\n\n\nBy clicking on the individual test, you can see the screenshots of a test along with the highlighted widget that was clicked.\n\n\n\n\nView map\n\u2693\n\n\nIt present a snapshot of the whole app itself. It shows how all the screens are connected with each other and therefore is useful in understanding the whole app structure. It aids in coming up with good test cases. For example,\n if a certain screen is not present in the map, then a user might be interested in creating a test case containing that screen. Such test case can easily be created with MoQuality Recorder with a few clicks.",
            "title": "Dashboard"
        },
        {
            "location": "/getting-started/view-results/#viewing-results",
            "text": "When a user has either scheduled tests or requested automatically generated tests, reports containing the results, success/failure of a tests, screenshot, various statistics, app maps are automatically generated. In order to view these\nresults,  navigate to the Overview page and a following screen shall appear.   If a user has not requested any tests, then there is no reporting.\nUnder   Test Reports   section,  each row represents a Test Report,  status, suites it ran on, device groups, and the various actions. The status is either a green tick signalling that no bugs found, red balloon showing that there are bugs, orange balloon indicating warnings or potential risks or an hour glass indicating that the tests yet to be executed. There are currently two results available now:",
            "title": "Viewing Results"
        },
        {
            "location": "/getting-started/view-results/#view-report",
            "text": "It shows the test runs of all the tests in the report across all the selected devices. The report provides the details af tests as well such as if the test was successful along with any bugs. By clicking the view report button you get the details of the test runs.   By clicking on the individual test, you can see the screenshots of a test along with the highlighted widget that was clicked.",
            "title": "View Report"
        },
        {
            "location": "/getting-started/view-results/#view-map",
            "text": "It present a snapshot of the whole app itself. It shows how all the screens are connected with each other and therefore is useful in understanding the whole app structure. It aids in coming up with good test cases. For example,\n if a certain screen is not present in the map, then a user might be interested in creating a test case containing that screen. Such test case can easily be created with MoQuality Recorder with a few clicks.",
            "title": "View map"
        },
        {
            "location": "/flows/documentation/",
            "text": "Documentation with MoQuality\n\u2693\n\n\nYou can use MoQuality to document manual or automated tests. The documentation feature allows you to export/download tests or test reports created on our platform. \n\n\nEnable Docs\n\u2693\n\n\nEnable the docs option in your \nAccounts > Payment\n page. You need to put your credit card information to enable this feature. We will invoice you for this feature at the end of each month. Check out \npricing\n here.\n\n\nExport Tests\n\u2693\n\n\n\n\n\n\nCreate tests\nBefore you export tests you will first need to create tests with our Test Recorder. You can learn more about creating tests on MoQuality \nhere\n. \n\n\n\n\n\n\nCreate a test suite with the tests you want to export. Learn how to create test suite \nhere\n.\n\n\n\n\n\n\nTo export tests click on the Download icon on the Test Suites page. We will email you a link to download the tests.\n\n\n\n\n\n\n\n\nThe report contains screenshots with actions overlayed on them.\n\n\n\nExport Test Reports\n\u2693\n\n\nIf you have enabled the export option, we will email you a link to download the report alongwith every test run you schedule on MoQuality.\n\n\nUpcoming Features\n\u2693\n\n\n\n\nSlack Integration (release Aug 1)\n\n\nGithub Integration (release Aug 1)\n\n\nPivotal Tracker (release mid Aug)\n\n\n\n\nIntegration with Slack and Github will allow you to export your results directly to Github PRs or a Slack channel.",
            "title": "Documentation"
        },
        {
            "location": "/flows/documentation/#documentation-with-moquality",
            "text": "You can use MoQuality to document manual or automated tests. The documentation feature allows you to export/download tests or test reports created on our platform.",
            "title": "Documentation with MoQuality"
        },
        {
            "location": "/flows/documentation/#enable-docs",
            "text": "Enable the docs option in your  Accounts > Payment  page. You need to put your credit card information to enable this feature. We will invoice you for this feature at the end of each month. Check out  pricing  here.",
            "title": "Enable Docs"
        },
        {
            "location": "/flows/documentation/#export-tests",
            "text": "Create tests\nBefore you export tests you will first need to create tests with our Test Recorder. You can learn more about creating tests on MoQuality  here .     Create a test suite with the tests you want to export. Learn how to create test suite  here .    To export tests click on the Download icon on the Test Suites page. We will email you a link to download the tests.     The report contains screenshots with actions overlayed on them.",
            "title": "Export Tests"
        },
        {
            "location": "/flows/documentation/#export-test-reports",
            "text": "If you have enabled the export option, we will email you a link to download the report alongwith every test run you schedule on MoQuality.",
            "title": "Export Test Reports"
        },
        {
            "location": "/flows/documentation/#upcoming-features",
            "text": "Slack Integration (release Aug 1)  Github Integration (release Aug 1)  Pivotal Tracker (release mid Aug)   Integration with Slack and Github will allow you to export your results directly to Github PRs or a Slack channel.",
            "title": "Upcoming Features"
        },
        {
            "location": "/integration-ci-cd/mq-cli/",
            "text": "MoQuality CLI\n\u2693\n\n\nIntroduction\n\u2693\n\n\nMoQuality CLI (MQ CLI) is a Command Line Interface that enables users to interact with MoQuality through their command line.\n\n\nInstallation\n\u2693\n\n\nMQ CLI can be installed using either yarn or npm. The respective commands for either are below.\n\n\n    $ yarn global add mq-cli\n    $ npm install -g mq-cli\n\n\n\n\n\nFor a list of MQ CLI commands, type \nmq help\n in your command line.\n\n\nUsage\n\u2693\n\n\nThe standard usage of MQ CLI commands is \nmq [COMMAND]\n, where COMMAND is one of the commands listed by the \nmq help\n command and below.\n\n\nCommands\n\u2693\n\n\n\n\napps\n\n\ndevices\n\n\nget-recorder\n\n\nhelp\n\n\nlogin\n\n\nschedule\n\n\nstatus\n\n\nsuites\n\n\ntests\n\n\nupload\n\n\nuser\n\n\n\n\napps\n\u2693\n\n\nDisplays a list of the current user's apps.\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nUsage\n\n\n        $ mq apps\n\n\n\n\n\ndevices\n\u2693\n\n\nDisplays a list of the current user's devices. Use these devices while scheduling test runs.\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nUsage\n\n\n        $ mq devices\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nOptions\n\n\n        -a --app=app             app id\n\n\n\n\n\nget-recorder\n\u2693\n\n\nDownloads or updates the recorder.\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nUsage\n\n\n        $ mq get-recorder\n\n\n\n\n\nhelp\n\u2693\n\n\nDisplays the version, usage, and commands for MQ CLI.\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nUsage\n\n\n        $ mq help\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nOptions\n\n\n        -all                     see all commands in CLI\n\n\n\n\n\nlogin\n\u2693\n\n\nLogs the user in with either their email and password or their API key.\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nUsage\n\n\n        $ mq login\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nOptions\n\n\n        -e, --email=email        email of user\n        -p, --password=password  password of user\n        -a, --api_key=api_key    api_key of user\n\n\n\n\n\nschedule\n\u2693\n\n\nSchedules test runs for a particular app project. Runs are scheduled on the last uploaded version.\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nUsage\n\n\n        $ mq schedule\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nOptions\n\n\n        -a, --app=app            app id\n        -s, --suite=suite        suite id \n        -d, --device=device      device group id\n\n\n\n\n\nstatus\n\u2693\n\n\nDisplays status on all test runs for the latest version uploaded for a particular app project.\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nUsage\n\n\n        $ mq status\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nOptions\n\n\n        -a --app=app             app id\n\n\n\n\n\nsuites\n\u2693\n\n\nDisplays test suites created for a particular app project.\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nUsage\n\n\n        $ mq devices\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nOptions\n\n\n        -a --app=app             app id\n\n\n\n\n\ntests\n\u2693\n\n\nShow tests recorded for a particular app project.\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nUsage\n\n\n        $ mq tests\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nOptions\n\n\n        -a --app=app             app id\n\n\n\n\n\nupload\n\u2693\n\n\nUploads a new version to an app project on MoQuality.\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nUsage\n\n\n        $ mq upload\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nOptions\n\n\n        -a --app=app             app id\n        -f, --file=file          location of app\n\n\n\n\n\nuser\n\u2693\n\n\nDisplays current user information.\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nUsage\n\n\n        $ mq user\n\n\n\n\n\nTroubleshooting\n\u2693\n\n\nUndocumented Error\n\u2693\n\n\nIf you encounter an error that is not documented, please open an issue on our \npublic GitHub repository\n. Alternatively, you can report your error to \nhello@moquality.com\n.",
            "title": "MoQuality CLI"
        },
        {
            "location": "/integration-ci-cd/mq-cli/#moquality-cli",
            "text": "",
            "title": "MoQuality CLI"
        },
        {
            "location": "/integration-ci-cd/mq-cli/#introduction",
            "text": "MoQuality CLI (MQ CLI) is a Command Line Interface that enables users to interact with MoQuality through their command line.",
            "title": "Introduction"
        },
        {
            "location": "/integration-ci-cd/mq-cli/#installation",
            "text": "MQ CLI can be installed using either yarn or npm. The respective commands for either are below.      $ yarn global add mq-cli\n    $ npm install -g mq-cli  For a list of MQ CLI commands, type  mq help  in your command line.",
            "title": "Installation"
        },
        {
            "location": "/integration-ci-cd/mq-cli/#usage",
            "text": "The standard usage of MQ CLI commands is  mq [COMMAND] , where COMMAND is one of the commands listed by the  mq help  command and below.",
            "title": "Usage"
        },
        {
            "location": "/integration-ci-cd/mq-cli/#commands",
            "text": "apps  devices  get-recorder  help  login  schedule  status  suites  tests  upload  user",
            "title": "Commands"
        },
        {
            "location": "/integration-ci-cd/mq-cli/#apps",
            "text": "Displays a list of the current user's apps.  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Usage          $ mq apps",
            "title": "apps"
        },
        {
            "location": "/integration-ci-cd/mq-cli/#devices",
            "text": "Displays a list of the current user's devices. Use these devices while scheduling test runs.  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Usage          $ mq devices  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Options          -a --app=app             app id",
            "title": "devices"
        },
        {
            "location": "/integration-ci-cd/mq-cli/#get-recorder",
            "text": "Downloads or updates the recorder.  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Usage          $ mq get-recorder",
            "title": "get-recorder"
        },
        {
            "location": "/integration-ci-cd/mq-cli/#help",
            "text": "Displays the version, usage, and commands for MQ CLI.  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Usage          $ mq help  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Options          -all                     see all commands in CLI",
            "title": "help"
        },
        {
            "location": "/integration-ci-cd/mq-cli/#login",
            "text": "Logs the user in with either their email and password or their API key.  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Usage          $ mq login  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Options          -e, --email=email        email of user\n        -p, --password=password  password of user\n        -a, --api_key=api_key    api_key of user",
            "title": "login"
        },
        {
            "location": "/integration-ci-cd/mq-cli/#schedule",
            "text": "Schedules test runs for a particular app project. Runs are scheduled on the last uploaded version.  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Usage          $ mq schedule  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Options          -a, --app=app            app id\n        -s, --suite=suite        suite id \n        -d, --device=device      device group id",
            "title": "schedule"
        },
        {
            "location": "/integration-ci-cd/mq-cli/#status",
            "text": "Displays status on all test runs for the latest version uploaded for a particular app project.  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Usage          $ mq status  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Options          -a --app=app             app id",
            "title": "status"
        },
        {
            "location": "/integration-ci-cd/mq-cli/#suites",
            "text": "Displays test suites created for a particular app project.  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Usage          $ mq devices  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Options          -a --app=app             app id",
            "title": "suites"
        },
        {
            "location": "/integration-ci-cd/mq-cli/#tests",
            "text": "Show tests recorded for a particular app project.  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Usage          $ mq tests  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Options          -a --app=app             app id",
            "title": "tests"
        },
        {
            "location": "/integration-ci-cd/mq-cli/#upload",
            "text": "Uploads a new version to an app project on MoQuality.  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Usage          $ mq upload  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Options          -a --app=app             app id\n        -f, --file=file          location of app",
            "title": "upload"
        },
        {
            "location": "/integration-ci-cd/mq-cli/#user",
            "text": "Displays current user information.  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Usage          $ mq user",
            "title": "user"
        },
        {
            "location": "/integration-ci-cd/mq-cli/#troubleshooting",
            "text": "",
            "title": "Troubleshooting"
        },
        {
            "location": "/integration-ci-cd/mq-cli/#undocumented-error",
            "text": "If you encounter an error that is not documented, please open an issue on our  public GitHub repository . Alternatively, you can report your error to  hello@moquality.com .",
            "title": "Undocumented Error"
        },
        {
            "location": "/integration-ci-cd/fastlane/",
            "text": "Integrate with \nfastlane\n\u2693\n\n\nIntroduction\n\u2693\n\n\nfastlane\n is a Continuous Integration and Continuous Delivery tool for iOS and Android apps. MoQuality integrates with \nfastlane\n through the simple addition of a step to a lane.\n\n\nPrerequisites\n\u2693\n\n\n\n\nfastlane\n: If you have not yet installed \nfastlane\n, follow the instructions \nhere\n.\n\n\nMQ CLI: \nInstall the MQ CLI\n.\n\n\nMoQuality app: If you intend to upload a new build of an app, ensure that you have already uploaded the first version through the \nMoQuality website\n.\n\n\n\n\nExample Code\n\u2693\n\n\nMoQuality hosts a \nGitHub repository\n that contains example code for all of our CI/CD integrations, including \nfastlane\n. You can take advantage of this repository by running the following command in the directory of your choosing.\n\n\ngit clone https://github.com/moquality/devcenter.git\n\n\n\n\n\nInstructions\n\u2693\n\n\nTo integrate MoQuality with \nfastlane\n, you will add a step to your lane that runs a shell script containing your MQ CLI commands. For this documentation, we will call that script \nmq.sh\n, but you can call it whatever you wish.\n\n\nSet Environment Variables\n\u2693\n\n\nThere are two environment variables that you must set. The first variable is \nAPI_KEY\n, which will enable user login. To find your API key, run \nmq login\n in your command line to log in to MoQuality. Then, run \nmq user\n to display user information. Your API key will be in the list of returned information. The second variable is \nAPP_ID\n. This will specify which app is being uploaded. To find your app Id, log in with \nmq login\n and run \nmq apps\n to see a list of your apps. Find your app in the list and locate the app Id in the same row. Run the below example commands in your command line to set these environment variables.\n\n\nexport\n \nAPI_KEY\n=[\nOBTAINED_VALUE\n]\n\n\nexport\n \nAPP_ID\n=[\nOBTAINED_VALUE\n]\n\n\n\n\n\n\nCreate Shell Script\n\u2693\n\n\nCreate a shell script in the same directory as your \nFastfile\n called \nmq.sh\n. Open that shell script in an editor.\n\n\nThis shell script will contain the MQ CLI commands that your new step will run. Before writing that step, we will write the shell script. The next section follows the creation of a shell script to upload an apk file built using Gradle, to MoQuality.\n\n\n#!/bin/sh\n\n\nnpm install -g mq-cli\n\nmq login -a \n$API_KEY\n\nmq user\nmq upload -a \n$APP_ID\n -f \n$1\n\nmq apps\n\n\n\n\n\n\n\n\n\nnpm install mq-cli\n installs the MQ CLI. See the \nMQ CLI documentation\n for alternative installation commands.\n\n\n\n\n\n\nmq login -a $API_KEY\n logs you in using your API key.\n\n\n\n\n\n\nmq user\n returns user information, and you can check that your user is correct.\n\n\n\n\n\n\nmq upload -a $APP_ID -f $1\n will upload your app, whose location is provided by \n$1\n, the apk file's path that will be passed as an argument during execution. The command uses \n$APP_ID\n to determine which app is being uploaded.\n\n\n\n\n\n\nmq apps\n returns a list of your apps, and you can confirm that your app version has incremented by one.\n\n\n\n\n\n\nEdit \nFastfile\n\u2693\n\n\nOpen your \nFastfile\n in an editor. Find the lane to which you want to add the MoQuality step. If you build your app in this lane, make sure you add the new step after the app has been built. Below is an example lane before the step has been added.\n\n\nlane\n \n:beta\n \ndo\n\n  \ngradle\n(\ntask\n:\n \n\"clean assembleDebug\"\n)\n\n\nend\n\n\n\n\n\n\nAdd Shell Method to \nFastfile\n\u2693\n\n\nAdd a shell method that runs your shell script to the lane. If you are following the example upload script, pass as an argument to the script the output variable from the Gradle step that provides the apk path. Below is the updated example lane.\n\n\nlane\n \n:beta\n \ndo\n\n  \ngradle\n(\ntask\n:\n \n\"clean assembleDebug\"\n)\n\n  \nsh\n(\n\u201c\nsh\n\u201d\n,\n\u201d\nmqtest\n.\nsh\n\u201d\n,\n\"\n#{\nlane_context\n[\nSharedValues\n::\nGRADLE_APK_OUTPUT_PATH\n]\n}\n\"\n)\n\n\nend\n\n\n\n\n\n\nRun the Lane\n\u2693\n\n\nNow that you have integrated MoQuality with \nfastlane\n, try running the lane with \nfastlane [LANE_NAME]\n in your command line.\n\n\nTroubleshooting\n\u2693\n\n\nUndocumented Error\n\u2693\n\n\nIf you encounter an error that is not documented, please open an issue on our \npublic GitHub repository\n. Alternatively, you can report your error to \nhello@moquality.com\n.",
            "title": "Integrate with fastlane"
        },
        {
            "location": "/integration-ci-cd/fastlane/#integrate-with-fastlane",
            "text": "",
            "title": "Integrate with fastlane"
        },
        {
            "location": "/integration-ci-cd/fastlane/#introduction",
            "text": "fastlane  is a Continuous Integration and Continuous Delivery tool for iOS and Android apps. MoQuality integrates with  fastlane  through the simple addition of a step to a lane.",
            "title": "Introduction"
        },
        {
            "location": "/integration-ci-cd/fastlane/#prerequisites",
            "text": "fastlane : If you have not yet installed  fastlane , follow the instructions  here .  MQ CLI:  Install the MQ CLI .  MoQuality app: If you intend to upload a new build of an app, ensure that you have already uploaded the first version through the  MoQuality website .",
            "title": "Prerequisites"
        },
        {
            "location": "/integration-ci-cd/fastlane/#example-code",
            "text": "MoQuality hosts a  GitHub repository  that contains example code for all of our CI/CD integrations, including  fastlane . You can take advantage of this repository by running the following command in the directory of your choosing.  git clone https://github.com/moquality/devcenter.git",
            "title": "Example Code"
        },
        {
            "location": "/integration-ci-cd/fastlane/#instructions",
            "text": "To integrate MoQuality with  fastlane , you will add a step to your lane that runs a shell script containing your MQ CLI commands. For this documentation, we will call that script  mq.sh , but you can call it whatever you wish.",
            "title": "Instructions"
        },
        {
            "location": "/integration-ci-cd/fastlane/#set-environment-variables",
            "text": "There are two environment variables that you must set. The first variable is  API_KEY , which will enable user login. To find your API key, run  mq login  in your command line to log in to MoQuality. Then, run  mq user  to display user information. Your API key will be in the list of returned information. The second variable is  APP_ID . This will specify which app is being uploaded. To find your app Id, log in with  mq login  and run  mq apps  to see a list of your apps. Find your app in the list and locate the app Id in the same row. Run the below example commands in your command line to set these environment variables.  export   API_KEY =[ OBTAINED_VALUE ]  export   APP_ID =[ OBTAINED_VALUE ]",
            "title": "Set Environment Variables"
        },
        {
            "location": "/integration-ci-cd/fastlane/#create-shell-script",
            "text": "Create a shell script in the same directory as your  Fastfile  called  mq.sh . Open that shell script in an editor.  This shell script will contain the MQ CLI commands that your new step will run. Before writing that step, we will write the shell script. The next section follows the creation of a shell script to upload an apk file built using Gradle, to MoQuality.  #!/bin/sh \n\nnpm install -g mq-cli\n\nmq login -a  $API_KEY \nmq user\nmq upload -a  $APP_ID  -f  $1 \nmq apps    npm install mq-cli  installs the MQ CLI. See the  MQ CLI documentation  for alternative installation commands.    mq login -a $API_KEY  logs you in using your API key.    mq user  returns user information, and you can check that your user is correct.    mq upload -a $APP_ID -f $1  will upload your app, whose location is provided by  $1 , the apk file's path that will be passed as an argument during execution. The command uses  $APP_ID  to determine which app is being uploaded.    mq apps  returns a list of your apps, and you can confirm that your app version has incremented by one.",
            "title": "Create Shell Script"
        },
        {
            "location": "/integration-ci-cd/fastlane/#edit-fastfile",
            "text": "Open your  Fastfile  in an editor. Find the lane to which you want to add the MoQuality step. If you build your app in this lane, make sure you add the new step after the app has been built. Below is an example lane before the step has been added.  lane   :beta   do \n   gradle ( task :   \"clean assembleDebug\" )  end",
            "title": "Edit Fastfile"
        },
        {
            "location": "/integration-ci-cd/fastlane/#add-shell-method-to-fastfile",
            "text": "Add a shell method that runs your shell script to the lane. If you are following the example upload script, pass as an argument to the script the output variable from the Gradle step that provides the apk path. Below is the updated example lane.  lane   :beta   do \n   gradle ( task :   \"clean assembleDebug\" ) \n   sh ( \u201c sh \u201d , \u201d mqtest . sh \u201d , \" #{ lane_context [ SharedValues :: GRADLE_APK_OUTPUT_PATH ] } \" )  end",
            "title": "Add Shell Method to Fastfile"
        },
        {
            "location": "/integration-ci-cd/fastlane/#run-the-lane",
            "text": "Now that you have integrated MoQuality with  fastlane , try running the lane with  fastlane [LANE_NAME]  in your command line.",
            "title": "Run the Lane"
        },
        {
            "location": "/integration-ci-cd/fastlane/#troubleshooting",
            "text": "",
            "title": "Troubleshooting"
        },
        {
            "location": "/integration-ci-cd/fastlane/#undocumented-error",
            "text": "If you encounter an error that is not documented, please open an issue on our  public GitHub repository . Alternatively, you can report your error to  hello@moquality.com .",
            "title": "Undocumented Error"
        },
        {
            "location": "/integration-ci-cd/bitrise/",
            "text": "Integrate with Bitrise\n\u2693\n\n\nIntroduction\n\u2693\n\n\nBitrise is a Continuous Integration and Delivery Platform as a Service. MoQuality integrates with the workflows of Bitrise by adding a step to a workflow. The following instructions outline how to integrate MoQuality with your Bitrise workflow.\n\n\nPrerequisites\n\u2693\n\n\n\n\nBitrise: If you have not yet installed Bitrise, follow the instructions \nhere\n.\n\n\nMQ CLI: \nInstall the MQ CLI\n.\n\n\nMoQuality app: If you intend to upload a new build of an app, ensure that you have already uploaded the first version through the \nMoQuality website\n.\n\n\n\n\nExample Code\n\u2693\n\n\nMoQuality hosts a \nGitHub repository\n that contains example code for all of our CI/CD integrations, including Bitrise. You can take advantage of this repository by running the following command in the directory of your choosing.\n\n\ngit clone https://github.com/moquality/devcenter.git\n\n\n\n\n\nInstructions\n\u2693\n\n\nExport Several Variables\n\u2693\n\n\nIntegrating MoQuality with Bitrise requires that you export several environment variables. The first variable is \nAPI_KEY\n, which will enable user login. To find your API key, run \nmq login\n in your command line to log in to MoQuality. Then, run \nmq user\n to display user information. Your API key will be in the list of returned information. The next variable is \nAPP_ID\n. This will specify which app is being uploaded. To find your app Id, log in with \nmq login\n and run \nmq apps\n to see a list of your apps. Find your app in the list and locate the app Id in the same row. The third variable is \nAPK_PATH\n, the path to your folder for apk's. Navigate through your file explorer to find this path. See the below command line commands as an example of setting these variables for a Calculator app.\n\n\nexport\n \nAPI_KEY\n=[\nOBTAINED_VALUE\n]\n\n\nexport\n \nAPP_ID\n=[\nOBTAINED_VALUE\n]\n\n\nexport\n \nAPK_PATH\n=\n/Users/\n[\nUSERNAME\n]\n/Calculator/app/build/outputs/apk/\n\n\n\n\n\nOpen \nbitrise.yml\n\u2693\n\n\nEnsure \nbitrise.yml\n is in your main directory, and open the file in an editor.\n\n\nSet File Paths\n\u2693\n\n\nIn bitrise.yml, there should be environment variables \nGRADLE_BUILD_FILE_PATH\n and \nGRADLEW_PATH\n. These are the paths to your build.gradle and gradlew files, respectively. You can find these paths using your file explorer. When you know the paths, enter them in bitrise.yml for their respective variables. The below code is an example of how your variables might look.\n\n\napp\n:\n\n  \nenvs\n:\n\n  \n-\n \nGRADLE_BUILD_FILE_PATH\n:\n \n/Users/[USERNAME]/Calculator/build.gradle\n\n  \n-\n \nGRADLEW_PATH\n:\n \n/Users/[USERNAME]/Calculator/gradlew\n\n\n\n\n\n\nRemove Two Steps\n\u2693\n\n\nThere are two default workflows in bitrise.yml: deploy and primary. To begin adding a step integrating MoQuality with either of these workflows, remove the last two steps, \ndeploy-to-bitrise-io@1.3.10\n and \ncache-push@2.0.5\n.\n\n\nAdd MQ CLI Installation Step\n\u2693\n\n\nIn place of those steps, add:\n\n\n-\n \nscript@1.1.5\n:\n\n    \ntitle\n:\n \nInstall MQ CLI and Upload App to MoQuality\n\n    \ninputs\n:\n\n    \n-\n \ncontent\n:\n \n|\n\n\n\n\n\n\nFill New Step\n\u2693\n\n\nThe lines following \ncontent\n are shell commands. You may create a shell script to run MoQuality commands and run that script in Bitrise by adding \nsh [script name].sh\n beneath \n- content: |\n, or you can add the MoQuality commands beneath \n- content: |\n without a shell script. The following sub-intructions exlain how to install the MQCLI and upload a new build of an app. Again, these commands can either be run through a shell script or placed directly into bitrise.yml. Below are the commands to upload an app to MoQuality:\n\n\n    npm install -g mq-cli\n\n    mq login -a \n$API_KEY\n\n    mq user\n    mq upload -a \n$APP_ID\n -f \n$APK_PATH\n/app-debug.apk\n    mq apps\n\n\n\n\n\n\n\n\n\nnpm install mq-cli\n installs the MQ CLI. See the \nMQ CLI documentation\n for alternative installation commands.\n\n\n\n\n\n\nmq login -a $API_KEY\n will log you in using your API key.\n\n\n\n\n\n\nmq user\n returns user information, and you can check that your user is correct.\n\n\n\n\n\n\nmq upload -a $APP_ID -f $APK_PATH/app-debug.apk\n will upload your app, whose location is provided by \n$APK_PATH\n, and the command uses \n$APP_ID\n to determine which app is being uploaded.\n\n\n\n\n\n\nmq apps\n returns a list of the users apps, and you can confirm that your app version has incremented by one.\n\n\n\n\n\n\nCompleted Step Examples\n\u2693\n\n\nYour new step, integrating MoQuality with Bitrise, should be formatted like one of the two examples below.\n\n\n-\n \nscript@1.1.5\n:\n\n    \ntitle\n:\n \nInstall MQ CLI and Upload App to MoQuality\n\n    \ninputs\n:\n\n    \n-\n \ncontent\n:\n \n|\n\n        \nnpm install -g mq-cli\n\n        \nmq login -a $API_KEY\n\n        \nmq user\n\n        \nmq upload -a $APP_ID -f $APK_PATH/app-debug.apk\n\n        \nmq apps\n\n\n\n-\n \nscript@1.1.5\n:\n\n    \ntitle\n:\n \nInstall MQ CLI and Upload App to MoQuality\n\n    \ninputs\n:\n\n    \n-\n \ncontent\n:\n \n|\n\n        \nsh [SCRIPT_NAME].sh\n\n\n\n\n\n\nRun Workflow\n\u2693\n\n\nIn your command line, run \nbitrise run [WORKFLOW]\n.\n\n\nTroubleshooting\n\u2693\n\n\nPermission denied when installing MQ CLI\n\u2693\n\n\nRun \nsudo chown -R [USERNAME] /usr/local/lib/node_modules\n in your terminal. This will give you permission to write to the node_modules directory.\n\n\nGradle-runner step fails for task ':app:mergeDebugResources'\n\u2693\n\n\nDon't worry about this error. Run the workflow again, and it should work.\n\n\nUndocumented Error\n\u2693\n\n\nIf you encounter an error that is not documented, please open an issue on our \npublic GitHub repository\n. Alternatively, you can report your error to \nhello@moquality.com\n.",
            "title": "Integrate with Bitrise"
        },
        {
            "location": "/integration-ci-cd/bitrise/#integrate-with-bitrise",
            "text": "",
            "title": "Integrate with Bitrise"
        },
        {
            "location": "/integration-ci-cd/bitrise/#introduction",
            "text": "Bitrise is a Continuous Integration and Delivery Platform as a Service. MoQuality integrates with the workflows of Bitrise by adding a step to a workflow. The following instructions outline how to integrate MoQuality with your Bitrise workflow.",
            "title": "Introduction"
        },
        {
            "location": "/integration-ci-cd/bitrise/#prerequisites",
            "text": "Bitrise: If you have not yet installed Bitrise, follow the instructions  here .  MQ CLI:  Install the MQ CLI .  MoQuality app: If you intend to upload a new build of an app, ensure that you have already uploaded the first version through the  MoQuality website .",
            "title": "Prerequisites"
        },
        {
            "location": "/integration-ci-cd/bitrise/#example-code",
            "text": "MoQuality hosts a  GitHub repository  that contains example code for all of our CI/CD integrations, including Bitrise. You can take advantage of this repository by running the following command in the directory of your choosing.  git clone https://github.com/moquality/devcenter.git",
            "title": "Example Code"
        },
        {
            "location": "/integration-ci-cd/bitrise/#instructions",
            "text": "",
            "title": "Instructions"
        },
        {
            "location": "/integration-ci-cd/bitrise/#export-several-variables",
            "text": "Integrating MoQuality with Bitrise requires that you export several environment variables. The first variable is  API_KEY , which will enable user login. To find your API key, run  mq login  in your command line to log in to MoQuality. Then, run  mq user  to display user information. Your API key will be in the list of returned information. The next variable is  APP_ID . This will specify which app is being uploaded. To find your app Id, log in with  mq login  and run  mq apps  to see a list of your apps. Find your app in the list and locate the app Id in the same row. The third variable is  APK_PATH , the path to your folder for apk's. Navigate through your file explorer to find this path. See the below command line commands as an example of setting these variables for a Calculator app.  export   API_KEY =[ OBTAINED_VALUE ]  export   APP_ID =[ OBTAINED_VALUE ]  export   APK_PATH = /Users/ [ USERNAME ] /Calculator/app/build/outputs/apk/",
            "title": "Export Several Variables"
        },
        {
            "location": "/integration-ci-cd/bitrise/#open-bitriseyml",
            "text": "Ensure  bitrise.yml  is in your main directory, and open the file in an editor.",
            "title": "Open bitrise.yml"
        },
        {
            "location": "/integration-ci-cd/bitrise/#set-file-paths",
            "text": "In bitrise.yml, there should be environment variables  GRADLE_BUILD_FILE_PATH  and  GRADLEW_PATH . These are the paths to your build.gradle and gradlew files, respectively. You can find these paths using your file explorer. When you know the paths, enter them in bitrise.yml for their respective variables. The below code is an example of how your variables might look.  app : \n   envs : \n   -   GRADLE_BUILD_FILE_PATH :   /Users/[USERNAME]/Calculator/build.gradle \n   -   GRADLEW_PATH :   /Users/[USERNAME]/Calculator/gradlew",
            "title": "Set File Paths"
        },
        {
            "location": "/integration-ci-cd/bitrise/#remove-two-steps",
            "text": "There are two default workflows in bitrise.yml: deploy and primary. To begin adding a step integrating MoQuality with either of these workflows, remove the last two steps,  deploy-to-bitrise-io@1.3.10  and  cache-push@2.0.5 .",
            "title": "Remove Two Steps"
        },
        {
            "location": "/integration-ci-cd/bitrise/#add-mq-cli-installation-step",
            "text": "In place of those steps, add:  -   script@1.1.5 : \n     title :   Install MQ CLI and Upload App to MoQuality \n     inputs : \n     -   content :   |",
            "title": "Add MQ CLI Installation Step"
        },
        {
            "location": "/integration-ci-cd/bitrise/#fill-new-step",
            "text": "The lines following  content  are shell commands. You may create a shell script to run MoQuality commands and run that script in Bitrise by adding  sh [script name].sh  beneath  - content: | , or you can add the MoQuality commands beneath  - content: |  without a shell script. The following sub-intructions exlain how to install the MQCLI and upload a new build of an app. Again, these commands can either be run through a shell script or placed directly into bitrise.yml. Below are the commands to upload an app to MoQuality:      npm install -g mq-cli\n\n    mq login -a  $API_KEY \n    mq user\n    mq upload -a  $APP_ID  -f  $APK_PATH /app-debug.apk\n    mq apps    npm install mq-cli  installs the MQ CLI. See the  MQ CLI documentation  for alternative installation commands.    mq login -a $API_KEY  will log you in using your API key.    mq user  returns user information, and you can check that your user is correct.    mq upload -a $APP_ID -f $APK_PATH/app-debug.apk  will upload your app, whose location is provided by  $APK_PATH , and the command uses  $APP_ID  to determine which app is being uploaded.    mq apps  returns a list of the users apps, and you can confirm that your app version has incremented by one.",
            "title": "Fill New Step"
        },
        {
            "location": "/integration-ci-cd/bitrise/#completed-step-examples",
            "text": "Your new step, integrating MoQuality with Bitrise, should be formatted like one of the two examples below.  -   script@1.1.5 : \n     title :   Install MQ CLI and Upload App to MoQuality \n     inputs : \n     -   content :   | \n         npm install -g mq-cli \n         mq login -a $API_KEY \n         mq user \n         mq upload -a $APP_ID -f $APK_PATH/app-debug.apk \n         mq apps  -   script@1.1.5 : \n     title :   Install MQ CLI and Upload App to MoQuality \n     inputs : \n     -   content :   | \n         sh [SCRIPT_NAME].sh",
            "title": "Completed Step Examples"
        },
        {
            "location": "/integration-ci-cd/bitrise/#run-workflow",
            "text": "In your command line, run  bitrise run [WORKFLOW] .",
            "title": "Run Workflow"
        },
        {
            "location": "/integration-ci-cd/bitrise/#troubleshooting",
            "text": "",
            "title": "Troubleshooting"
        },
        {
            "location": "/integration-ci-cd/bitrise/#permission-denied-when-installing-mq-cli",
            "text": "Run  sudo chown -R [USERNAME] /usr/local/lib/node_modules  in your terminal. This will give you permission to write to the node_modules directory.",
            "title": "Permission denied when installing MQ CLI"
        },
        {
            "location": "/integration-ci-cd/bitrise/#gradle-runner-step-fails-for-task-appmergedebugresources",
            "text": "Don't worry about this error. Run the workflow again, and it should work.",
            "title": "Gradle-runner step fails for task ':app:mergeDebugResources'"
        },
        {
            "location": "/integration-ci-cd/bitrise/#undocumented-error",
            "text": "If you encounter an error that is not documented, please open an issue on our  public GitHub repository . Alternatively, you can report your error to  hello@moquality.com .",
            "title": "Undocumented Error"
        },
        {
            "location": "/integration-ci-cd/circleci/",
            "text": "Integrate with CircleCI\n\u2693\n\n\nIntroduction\n\u2693\n\n\nCircleCI is a Continuous Integration and Continuous Delivery platform that allows developers to automate the build, test, and deployment of software for mobile, enterprise, and web applications. MoQuality integrates with CircleCI by simply adding a step to a job. This step enables devleopers to use MQ CLI within their container. The following instructions walk through how to integrate MoQuality with CircleCI.\n\n\nPrerequisites\n\u2693\n\n\n\n\nCircleCI: If you have not yet installed CircleCI, follow the instructions \nhere\n.\n\n\nMQ CLI: \nInstall the MQ CLI\n.\n\n\nMoQuality app: If you intend to upload a new build of an app using MQ CLI, ensure that you have already uploaded the first version through the \nMoQuality website\n.\n\n\n\n\nExample Code\n\u2693\n\n\nMoQuality hosts a \nGitHub repository\n that contains example code for all of our CI/CD integrations, including CircleCI. You can take advantage of this repository by running the following command in the directory of your choosing.\n\n\ngit clone https://github.com/moquality/devcenter.git\n\n\n\n\n\nInstructions\n\u2693\n\n\nOpen \nconfig.yml\n\u2693\n\n\nOpen your \nconfig.yml\n file in an editor.\n\n\nAdd Installation Step\n\u2693\n\n\nUnder \nsteps:\n in your job, add a run step called \nInstall mq-cli\n by using \nname:\n. Beneath \nname:\n, add \ncommand: |\n. This indicates that you are going to issue multiple lines of commands. Your step should look like the below.\n\n\n-\n \nrun\n:\n\n    \nname\n:\n \nInstall MQ CLI\n\n    \ncommand\n:\n \n|\n\n\n\n\n\n\nAdd Commands to Step\n\u2693\n\n\nThere are four commands you must run to install MQ CLI within your container. The first two are \ncurl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -\n and \nsudo apt-get install -y nodejs\n. These commands are based off of \nthese instructions\n for installing Nodejs via a package manager. Installing Nodejs enables the use of npm commands, which will be necessary for installing MQ CLI. The third command to run is \nsudo chown -R $(whoami) /usr/lib/node_modules /usr/bin\n. This command will give the user write permissions to two directories whose write permissions are necessary for the installation of MQ CLI. Finally, the command \nnpm install -g mq-cli\n installs MQ CLI. You have now created the step that installs MQ CLI and enables MQ CLI commands within your container. Your step should look like the below.\n\n\n-\n \nrun\n:\n\n    \nname\n:\n \nInstall MQ CLI\n\n    \ncommand\n:\n \n|\n\n      \ncurl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -\n\n      \nsudo apt-get install -y nodejs\n\n      \nsudo chown -R $(whoami) /usr/lib/node_modules /usr/bin\n\n      \nnpm install -g mq-cli\n\n\n\n\n\n\nAdd Login and Upload Step\n\u2693\n\n\nNow that you have access to MQ CLI commands, you can create a subsequent step of your own to perform a task with these commands. The following sub-instructions breakdown how to write a step that uploads your app to MoQuality using MQ CLI commands.\n\n\n-\n \nrun\n:\n\n    \nname\n:\n \nLogin and Upload to MoQuality\n\n    \ncommand\n:\n \n|\n\n      \nmq login -a [API_KEY]\n\n      \nmq user\n\n      \nmq upload -f [APK_PATH] -a [APP_ID]\n\n      \nmq apps\n\n\n\n\n\n\n\n\n\n\nThe first two lines create a step called \nUpload to MoQuality\n.\n\n\n\n\n\n\nAs before, the line \ncommand: |\n indicates that you are going to issue multiple lines of commands.\n\n\n\n\n\n\nmq login -a [API_KEY]\n logs you in using your API key. Your API key uniquely identifies your account. To find your API key, run \nmq login\n in your command line and follow the prompts to log in to your account. Next, run \nmq user\n to display user information. Your API key will be in the list of returned information.\n\n\n\n\n\n\nmq user\n returns user information, and you can check that your user is correct.\n\n\n\n\n\n\nmq upload -f [APK_PATH] -a [APP_ID]\n will upload your app, whose location is provided by \n[APK_PATH]\n, the path to your apk file. The command uses \n[APP_ID]\n to determine which app is being uploaded. Your app Id uniquely identifies your app. To find your app Id, log in with \nmq login\n and run \nmq apps\n to see a list of your apps. Find your app in the list and locate the app Id in the same row.\n\n\n\n\n\n\nmq apps\n returns a list of your apps, and you can confirm that your app version has incremented by one.\n\n\n\n\n\n\nRun the Build\n\u2693\n\n\nNow that you have created new steps, integrating MoQuality with CircleCI, run \ncircleci build\n in your command line to run the build job. If you added the steps within a job other than build, add the \n--job\n option followed by the name of the job to the \ncircleci build\n command.\n\n\nNotes\n\u2693\n\n\nWe do not recommend running the commands to install MQ CLI within a docker image and saving that image for future use. If you do so, and updates to MQ CLI are released, your docker image will not be using them. It is best to install MQ CLI every time you run the workflow, so you are always using the most up-to-date version of MQ CLI. This is what was done within the instructions.\n\n\nTroubleshooting\n\u2693\n\n\nWrite permissions error when installing MQ CLI\n\u2693\n\n\nRead the error to find the directory to which you cannot write. Add the path of that directory to your \nsudo chown -R $(whoami) /usr/lib/node_modules /usr/bin\n command. The command will then look like \nsudo chown -R $(whoami) /usr/lib/node_modules /usr/bin [DIRECTORY_PATH]\n.\n\n\nUndocumented Error\n\u2693\n\n\nIf you encounter an error that is not documented, please open an issue on our \npublic GitHub repository\n. Alternatively, you can report your error to \nhello@moquality.com\n.",
            "title": "Integrate with CircleCI"
        },
        {
            "location": "/integration-ci-cd/circleci/#integrate-with-circleci",
            "text": "",
            "title": "Integrate with CircleCI"
        },
        {
            "location": "/integration-ci-cd/circleci/#introduction",
            "text": "CircleCI is a Continuous Integration and Continuous Delivery platform that allows developers to automate the build, test, and deployment of software for mobile, enterprise, and web applications. MoQuality integrates with CircleCI by simply adding a step to a job. This step enables devleopers to use MQ CLI within their container. The following instructions walk through how to integrate MoQuality with CircleCI.",
            "title": "Introduction"
        },
        {
            "location": "/integration-ci-cd/circleci/#prerequisites",
            "text": "CircleCI: If you have not yet installed CircleCI, follow the instructions  here .  MQ CLI:  Install the MQ CLI .  MoQuality app: If you intend to upload a new build of an app using MQ CLI, ensure that you have already uploaded the first version through the  MoQuality website .",
            "title": "Prerequisites"
        },
        {
            "location": "/integration-ci-cd/circleci/#example-code",
            "text": "MoQuality hosts a  GitHub repository  that contains example code for all of our CI/CD integrations, including CircleCI. You can take advantage of this repository by running the following command in the directory of your choosing.  git clone https://github.com/moquality/devcenter.git",
            "title": "Example Code"
        },
        {
            "location": "/integration-ci-cd/circleci/#instructions",
            "text": "",
            "title": "Instructions"
        },
        {
            "location": "/integration-ci-cd/circleci/#open-configyml",
            "text": "Open your  config.yml  file in an editor.",
            "title": "Open config.yml"
        },
        {
            "location": "/integration-ci-cd/circleci/#add-installation-step",
            "text": "Under  steps:  in your job, add a run step called  Install mq-cli  by using  name: . Beneath  name: , add  command: | . This indicates that you are going to issue multiple lines of commands. Your step should look like the below.  -   run : \n     name :   Install MQ CLI \n     command :   |",
            "title": "Add Installation Step"
        },
        {
            "location": "/integration-ci-cd/circleci/#add-commands-to-step",
            "text": "There are four commands you must run to install MQ CLI within your container. The first two are  curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -  and  sudo apt-get install -y nodejs . These commands are based off of  these instructions  for installing Nodejs via a package manager. Installing Nodejs enables the use of npm commands, which will be necessary for installing MQ CLI. The third command to run is  sudo chown -R $(whoami) /usr/lib/node_modules /usr/bin . This command will give the user write permissions to two directories whose write permissions are necessary for the installation of MQ CLI. Finally, the command  npm install -g mq-cli  installs MQ CLI. You have now created the step that installs MQ CLI and enables MQ CLI commands within your container. Your step should look like the below.  -   run : \n     name :   Install MQ CLI \n     command :   | \n       curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash - \n       sudo apt-get install -y nodejs \n       sudo chown -R $(whoami) /usr/lib/node_modules /usr/bin \n       npm install -g mq-cli",
            "title": "Add Commands to Step"
        },
        {
            "location": "/integration-ci-cd/circleci/#add-login-and-upload-step",
            "text": "Now that you have access to MQ CLI commands, you can create a subsequent step of your own to perform a task with these commands. The following sub-instructions breakdown how to write a step that uploads your app to MoQuality using MQ CLI commands.  -   run : \n     name :   Login and Upload to MoQuality \n     command :   | \n       mq login -a [API_KEY] \n       mq user \n       mq upload -f [APK_PATH] -a [APP_ID] \n       mq apps     The first two lines create a step called  Upload to MoQuality .    As before, the line  command: |  indicates that you are going to issue multiple lines of commands.    mq login -a [API_KEY]  logs you in using your API key. Your API key uniquely identifies your account. To find your API key, run  mq login  in your command line and follow the prompts to log in to your account. Next, run  mq user  to display user information. Your API key will be in the list of returned information.    mq user  returns user information, and you can check that your user is correct.    mq upload -f [APK_PATH] -a [APP_ID]  will upload your app, whose location is provided by  [APK_PATH] , the path to your apk file. The command uses  [APP_ID]  to determine which app is being uploaded. Your app Id uniquely identifies your app. To find your app Id, log in with  mq login  and run  mq apps  to see a list of your apps. Find your app in the list and locate the app Id in the same row.    mq apps  returns a list of your apps, and you can confirm that your app version has incremented by one.",
            "title": "Add Login and Upload Step"
        },
        {
            "location": "/integration-ci-cd/circleci/#run-the-build",
            "text": "Now that you have created new steps, integrating MoQuality with CircleCI, run  circleci build  in your command line to run the build job. If you added the steps within a job other than build, add the  --job  option followed by the name of the job to the  circleci build  command.",
            "title": "Run the Build"
        },
        {
            "location": "/integration-ci-cd/circleci/#notes",
            "text": "We do not recommend running the commands to install MQ CLI within a docker image and saving that image for future use. If you do so, and updates to MQ CLI are released, your docker image will not be using them. It is best to install MQ CLI every time you run the workflow, so you are always using the most up-to-date version of MQ CLI. This is what was done within the instructions.",
            "title": "Notes"
        },
        {
            "location": "/integration-ci-cd/circleci/#troubleshooting",
            "text": "",
            "title": "Troubleshooting"
        },
        {
            "location": "/integration-ci-cd/circleci/#write-permissions-error-when-installing-mq-cli",
            "text": "Read the error to find the directory to which you cannot write. Add the path of that directory to your  sudo chown -R $(whoami) /usr/lib/node_modules /usr/bin  command. The command will then look like  sudo chown -R $(whoami) /usr/lib/node_modules /usr/bin [DIRECTORY_PATH] .",
            "title": "Write permissions error when installing MQ CLI"
        },
        {
            "location": "/integration-ci-cd/circleci/#undocumented-error",
            "text": "If you encounter an error that is not documented, please open an issue on our  public GitHub repository . Alternatively, you can report your error to  hello@moquality.com .",
            "title": "Undocumented Error"
        },
        {
            "location": "/integration-ci-cd/dockerfile/",
            "text": "Custom Docker Images\n\u2693\n\n\nIntroduction\n\u2693\n\n\nA source of difficulty when developing applications is creating the perfect environment on one's machine to run said application. However, by using Docker, you can set up the perfect environment to run your application. Dockerfiles define the environment within a container, a runtime instance of an image. An image is an executable package that cointains an application's code, runtime, libraries, environment variables, and configuration files. A Dockerfile can use an image, such as Ubuntu, and define the environment on top of the image. Thus, we can run an app in, for example, an Ubuntu container with all the necessary dependencies installed, as defined in our Dockerfile. These instructions follow the creation of a Dockerfile for testing a calculator app, available [here], and are based off of \nthis\n Docker documentation.\n\n\nPrerequisites\n\u2693\n\n\n\n\nDocker: Install your preferred version of Docker \nhere\n and use the \nofficial Docker getting started guide\n to familiarize yourself with Docker.\n\n\nDocker account: Set up a Docker account \nhere\n.\n\n\n\n\nCreate a Custom Docker Image\n\u2693\n\n\nCreate Empty Directory\n\u2693\n\n\nCreate an empty directory and navigate into that directory within your command line.\n\n\ncd\n \n[\nEMPTY_DIRECTORY\n]\n\n\n\n\n\n\nCreate \nDockerfile\n\u2693\n\n\nWithin that directory, create a file called \nDockerfile\n. This is where you will define the environment of your container.\n\n\nOpen \nDockerfile\n\u2693\n\n\nOpen \nDockerfile\n in an editor of your choice.\n\n\nFill \nDockerfile\n\u2693\n\n\nFill the Dockerfile while following the format below. A very short example Dockerfile is beneath the format. The \nFROM instruction\n initializes a new build stage and sets the base image. The \nRUN instruction\n runs a command within our docker container. For more reference on instructions and information on Docker syntax, click \nhere\n.\n\n\nFormat\n\u2693\n\n\n# Comment\n\nINSTRUCTION arguments\n\n\n\n\n\nExample\n\u2693\n\n\n#Use an official Ubuntu runtime as a parent image\n\n\nFROM\n ubuntu\n\n\n\n#Say hello\n\n\nRUN\n \necho\n \n\"Hello world!\"\n\n\n\n\n\n\nBuild Image\n\u2693\n\n\nNow that you have a Dockerfile with instructions, it's time to build your image. Run the below command, inserting your own tag for the image. \nNote the period after the image tag\n.\n\n\ndocker build -t \n[\nLOCAL_IMAGE_TAG\n]\n .\n\n\n\n\n\nConfirm Image Existence\n\u2693\n\n\nOnce your image is done building, you can confirm that it is in your machine\u2019s local Docker image registry with the below command.\n\n\ndocker image ls\n\n\n\n\n\nLog in to Docker\n\u2693\n\n\nTo share your image, log in to docker with the below command.\n\n\ndocker login\n\n\n\n\n\nTag Image\n\u2693\n\n\nBefore uploading your image, you should give it a tag for Docker Hub using the following command. An example of a repository name and tag could be \ndockertesting:latest\n. If no tag is given, Docker will tag the image with \nlatest\n by default.\n\n\ndocker tag \n[\nLOCAL_IMAGE_TAG\n]\n \n[\nDOCKER_USERNAME\n]\n/\n[\nREPOSITORY_NAME\n]\n:\n[\nTAG\n]\n\n\n\n\n\n\nPublish Image\n\u2693\n\n\nPublish the image with below command.\n\n\ndocker push \n[\nDOCKER_USERNAME\n]\n/\n[\nREPOSITORY_NAME\n]\n:\n[\nTAG\n]\n\n\n\n\n\n\nNow your image is accessible from online and can be pulled at any time. The next set of instructions explain how you can use your Docker image in CircleCI.\n\n\nCircleCI and Custom Docker Images\n\u2693\n\n\nCircleCI supports the use of custom Docker images, and the CircleCI documentation on customizing Docker images for CircleCI can be found \nhere\n.\n\n\nAdd Docker Image to Job\n\u2693\n\n\nIf you have built and pushed a custom Docker image, you can use it in your CircleCI job by adding the image path to the Docker executor in your job.\n\n\njob\n:\n\n  \nbuild\n:\n\n    \ndocker\n:\n\n      \n-\n \nimage\n:\n \n[\nDOCKER_USERNAME\n]\n/[REPOSITORY_NAME]:[TAG]\n\n\n\n\n\n\nThe information in brackets can be found by visiting your image on \nDocker Hub\n and selecting your repository. The Docker pull command will be on the repository page, and you can find your tag under the Tags tab.\n\n\nCircleCI Image as Base Image\n\u2693\n\n\nYou can also build your custom Docker image on top of a CirlceCI image. Say you want to use the \ncircleci/android:api-25-alpha\n image, but you need to add more dependencies. You can create a Dockerfile and begin it with the following.\n\n\nFROM\n circleci/android:api-25-alpha\n\n\n\n\n\n\nNow you can add your instructions to set up an environment within a CircleCI container. The next section breaks down an exmaple Docker image used with CircleCI to build and upload an app to MoQuality.\n\n\nCircleCI and Custom Docker Image for MoQuality App\n\u2693\n\n\nMoQuality has created a \nGithub repository\n with all the necessary files to build and upload a calculator app to MoQuality by using CircleCI and a custom Dockerfile. Our Dockerfile uses Ubuntu as our parent image and installs dependencies such as Gradle to build the app. The Docker image path is \njragonemq/mqubuntutest:latest\n. Before beginning, create an app on MoQuality that you can use to test the upload properties of this build. It does not matter what apk file you upload upon creation of the app.\n\n\nMoQuality's Example \nDockerfile\n\u2693\n\n\nThe following is the code behind the \njragonemq/mqubuntutest:latest\n Dockerfile. This creates an environment for running the calculator app on top of an Ubuntu parent image. We are essentially filling a fresh Ubuntu container with our dependencies. The comments explain what each set of instructions is doing. However, understanding each instruction is less important than understanding what these instructions accomplish holistically: they build the environment.\n\n\n#Use an official Ubuntu runtime as a parent image\n\n\nFROM\n ubuntu\n\n\n\n#Set user to root\n\nUSER root\n\n\n#Update apt-get and install dependencies\n\n\nRUN\n apt-get -y update \n&&\n apt-get install -y wget bzip2 unzip gcc nodejs npm openjdk-8-jdk git sudo curl\n\n\n#Install Gradle\n\n\nRUN\n wget https://services.gradle.org/distributions/gradle-4.1-bin.zip\n\nRUN\n mkdir /opt/gradle\n\nRUN\n unzip -d /opt/gradle gradle-4.1-bin.zip\n\n#Define environment variable\n\n\nENV\n PATH=$PATH:/opt/gradle/gradle-4.1/bin\n\n\nRUN\n gradle -v\n\n\n#Install Android tools for sdkmanager\n\n\nRUN\n mkdir /android-sdk\n\nRUN\n wget https://dl.google.com/android/repository/sdk-tools-darwin-3859397.zip\n\nRUN\n unzip -d /android-sdk sdk-tools*.zip\n\nENV\n ANDROID_HOME=/android-sdk\n\n\nENV\n PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/tools/platform-tools:$ANDROID_HOME/build-tools/26.0.2\n\n\n\n#Accept all licenses and install dependencies\n\n\nRUN\n yes \n|\n sdkmanager --licenses\n\nRUN\n sdkmanager \n\"platforms;android-22\"\n\n\nRUN\n sdkmanager \n\"build-tools;26.0.2\"\n\n\n\n#Copy Android\n\nCOPY android-8.0.0 android\n\nENV\n PATH=\"/android:$PATH\"\n\n\n\n\n\n\nCreate Empty Directory for Git Repo\n\u2693\n\n\nCreate an empty directory and \ncd\n into it.\n\n\ncd\n \n[\nEMPTY_DIRECTORY\n]\n\n\n\n\n\n\nClone MoQuality Repository\n\u2693\n\n\nClone MoQuality's example repository using \ngit clone\n.\n\n\ngit clone https://github.com/moquality/plugins.git\n\n\n\n\n\nconfig.yml\n Contents\n\u2693\n\n\nWithin the hidden \n.circleci\n folder is the \nconfig.yml\n file. In this file are steps which build the app using \ngradle build\n, \ninstall the mq-cli\n, and \nlogin and upload the app to MoQuality\n.\n\n\nversion\n:\n \n2\n\n\njobs\n:\n\n  \nbuild\n:\n\n    \ndocker\n:\n\n      \n-\n \nimage\n:\n \njragonemq/mqubuntutest:latest\n\n    \nenvironment\n:\n\n      \nJVM_OPTS\n:\n \n-Xmx3200m\n\n    \nsteps\n:\n\n      \n-\n \ncheckout\n\n      \n-\n \nrun\n:\n\n          \nname\n:\n \nBuild app\n\n          \ncommand\n:\n \ngradle build\n\n      \n-\n \nrun\n:\n\n          \nname\n:\n \nInstall mq-cli\n\n          \ncommand\n:\n \n|\n\n            \ncurl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -\n\n            \nsudo apt-get install -y nodejs\n\n            \nsudo chown -R $(whoami) /usr/lib/node_modules /usr/bin\n\n            \nnpm -g config set user root\n\n            \nnpm install -g mq-cli\n\n      \n-\n \nrun\n:\n\n          \nname\n:\n \nLogin and Upload to MoQuality\n\n          \ncommand\n:\n \n|\n\n\n            \nmq login -a [API_KEY]\n\n\n            \nmq user\n\n\n            \nmq upload -f app/build/outputs/apk/debug/app-debug.apk -a [APP_ID]\n\n\n            \nmq apps\n\n\n\n\n\n\nEdit \nconfig.yml\n\u2693\n\n\nBy the \nmq login\n and \nmq upload\n commands, highlighted above, fill in [API_KEY] and [APP_ID] with the API key of your account and app Id of your app, respectively. To find your API key, run \nmq login\n in your command line and follow the prompts to log in to your account. Next, run \nmq user\n to display user information. Your API key will be in the list of returned information. To find your app Id, log in with \nmq login\n and run \nmq apps\n to see a list of your apps. Find your app in the list and locate the app Id in the same row.\n\n\nUsing the above instructions and \nCircleCI MQ CLI integration documentation\n, we have created our own custom Dockerfile, integrated it with CircleCI, and integrated CircleCI with MoQuality.\n\n\nTroublshooting\n\u2693\n\n\nUndocumented Error\n\u2693\n\n\nIf you encounter an error that is not documented, please open an issue on our \npublic GitHub repository\n. Alternatively, you can report your error to \nhello@moquality.com\n.",
            "title": "Custom Docker Images"
        },
        {
            "location": "/integration-ci-cd/dockerfile/#custom-docker-images",
            "text": "",
            "title": "Custom Docker Images"
        },
        {
            "location": "/integration-ci-cd/dockerfile/#introduction",
            "text": "A source of difficulty when developing applications is creating the perfect environment on one's machine to run said application. However, by using Docker, you can set up the perfect environment to run your application. Dockerfiles define the environment within a container, a runtime instance of an image. An image is an executable package that cointains an application's code, runtime, libraries, environment variables, and configuration files. A Dockerfile can use an image, such as Ubuntu, and define the environment on top of the image. Thus, we can run an app in, for example, an Ubuntu container with all the necessary dependencies installed, as defined in our Dockerfile. These instructions follow the creation of a Dockerfile for testing a calculator app, available [here], and are based off of  this  Docker documentation.",
            "title": "Introduction"
        },
        {
            "location": "/integration-ci-cd/dockerfile/#prerequisites",
            "text": "Docker: Install your preferred version of Docker  here  and use the  official Docker getting started guide  to familiarize yourself with Docker.  Docker account: Set up a Docker account  here .",
            "title": "Prerequisites"
        },
        {
            "location": "/integration-ci-cd/dockerfile/#create-a-custom-docker-image",
            "text": "",
            "title": "Create a Custom Docker Image"
        },
        {
            "location": "/integration-ci-cd/dockerfile/#create-empty-directory",
            "text": "Create an empty directory and navigate into that directory within your command line.  cd   [ EMPTY_DIRECTORY ]",
            "title": "Create Empty Directory"
        },
        {
            "location": "/integration-ci-cd/dockerfile/#create-dockerfile",
            "text": "Within that directory, create a file called  Dockerfile . This is where you will define the environment of your container.",
            "title": "Create Dockerfile"
        },
        {
            "location": "/integration-ci-cd/dockerfile/#open-dockerfile",
            "text": "Open  Dockerfile  in an editor of your choice.",
            "title": "Open Dockerfile"
        },
        {
            "location": "/integration-ci-cd/dockerfile/#fill-dockerfile",
            "text": "Fill the Dockerfile while following the format below. A very short example Dockerfile is beneath the format. The  FROM instruction  initializes a new build stage and sets the base image. The  RUN instruction  runs a command within our docker container. For more reference on instructions and information on Docker syntax, click  here .",
            "title": "Fill Dockerfile"
        },
        {
            "location": "/integration-ci-cd/dockerfile/#format",
            "text": "# Comment \nINSTRUCTION arguments",
            "title": "Format"
        },
        {
            "location": "/integration-ci-cd/dockerfile/#example",
            "text": "#Use an official Ubuntu runtime as a parent image  FROM  ubuntu  #Say hello  RUN   echo   \"Hello world!\"",
            "title": "Example"
        },
        {
            "location": "/integration-ci-cd/dockerfile/#build-image",
            "text": "Now that you have a Dockerfile with instructions, it's time to build your image. Run the below command, inserting your own tag for the image.  Note the period after the image tag .  docker build -t  [ LOCAL_IMAGE_TAG ]  .",
            "title": "Build Image"
        },
        {
            "location": "/integration-ci-cd/dockerfile/#confirm-image-existence",
            "text": "Once your image is done building, you can confirm that it is in your machine\u2019s local Docker image registry with the below command.  docker image ls",
            "title": "Confirm Image Existence"
        },
        {
            "location": "/integration-ci-cd/dockerfile/#log-in-to-docker",
            "text": "To share your image, log in to docker with the below command.  docker login",
            "title": "Log in to Docker"
        },
        {
            "location": "/integration-ci-cd/dockerfile/#tag-image",
            "text": "Before uploading your image, you should give it a tag for Docker Hub using the following command. An example of a repository name and tag could be  dockertesting:latest . If no tag is given, Docker will tag the image with  latest  by default.  docker tag  [ LOCAL_IMAGE_TAG ]   [ DOCKER_USERNAME ] / [ REPOSITORY_NAME ] : [ TAG ]",
            "title": "Tag Image"
        },
        {
            "location": "/integration-ci-cd/dockerfile/#publish-image",
            "text": "Publish the image with below command.  docker push  [ DOCKER_USERNAME ] / [ REPOSITORY_NAME ] : [ TAG ]   Now your image is accessible from online and can be pulled at any time. The next set of instructions explain how you can use your Docker image in CircleCI.",
            "title": "Publish Image"
        },
        {
            "location": "/integration-ci-cd/dockerfile/#circleci-and-custom-docker-images",
            "text": "CircleCI supports the use of custom Docker images, and the CircleCI documentation on customizing Docker images for CircleCI can be found  here .",
            "title": "CircleCI and Custom Docker Images"
        },
        {
            "location": "/integration-ci-cd/dockerfile/#add-docker-image-to-job",
            "text": "If you have built and pushed a custom Docker image, you can use it in your CircleCI job by adding the image path to the Docker executor in your job.  job : \n   build : \n     docker : \n       -   image :   [ DOCKER_USERNAME ] /[REPOSITORY_NAME]:[TAG]   The information in brackets can be found by visiting your image on  Docker Hub  and selecting your repository. The Docker pull command will be on the repository page, and you can find your tag under the Tags tab.",
            "title": "Add Docker Image to Job"
        },
        {
            "location": "/integration-ci-cd/dockerfile/#circleci-image-as-base-image",
            "text": "You can also build your custom Docker image on top of a CirlceCI image. Say you want to use the  circleci/android:api-25-alpha  image, but you need to add more dependencies. You can create a Dockerfile and begin it with the following.  FROM  circleci/android:api-25-alpha   Now you can add your instructions to set up an environment within a CircleCI container. The next section breaks down an exmaple Docker image used with CircleCI to build and upload an app to MoQuality.",
            "title": "CircleCI Image as Base Image"
        },
        {
            "location": "/integration-ci-cd/dockerfile/#circleci-and-custom-docker-image-for-moquality-app",
            "text": "MoQuality has created a  Github repository  with all the necessary files to build and upload a calculator app to MoQuality by using CircleCI and a custom Dockerfile. Our Dockerfile uses Ubuntu as our parent image and installs dependencies such as Gradle to build the app. The Docker image path is  jragonemq/mqubuntutest:latest . Before beginning, create an app on MoQuality that you can use to test the upload properties of this build. It does not matter what apk file you upload upon creation of the app.",
            "title": "CircleCI and Custom Docker Image for MoQuality App"
        },
        {
            "location": "/integration-ci-cd/dockerfile/#moqualitys-example-dockerfile",
            "text": "The following is the code behind the  jragonemq/mqubuntutest:latest  Dockerfile. This creates an environment for running the calculator app on top of an Ubuntu parent image. We are essentially filling a fresh Ubuntu container with our dependencies. The comments explain what each set of instructions is doing. However, understanding each instruction is less important than understanding what these instructions accomplish holistically: they build the environment.  #Use an official Ubuntu runtime as a parent image  FROM  ubuntu  #Set user to root \nUSER root #Update apt-get and install dependencies  RUN  apt-get -y update  &&  apt-get install -y wget bzip2 unzip gcc nodejs npm openjdk-8-jdk git sudo curl #Install Gradle  RUN  wget https://services.gradle.org/distributions/gradle-4.1-bin.zip RUN  mkdir /opt/gradle RUN  unzip -d /opt/gradle gradle-4.1-bin.zip #Define environment variable  ENV  PATH=$PATH:/opt/gradle/gradle-4.1/bin  RUN  gradle -v #Install Android tools for sdkmanager  RUN  mkdir /android-sdk RUN  wget https://dl.google.com/android/repository/sdk-tools-darwin-3859397.zip RUN  unzip -d /android-sdk sdk-tools*.zip ENV  ANDROID_HOME=/android-sdk  ENV  PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/tools/platform-tools:$ANDROID_HOME/build-tools/26.0.2  #Accept all licenses and install dependencies  RUN  yes  |  sdkmanager --licenses RUN  sdkmanager  \"platforms;android-22\"  RUN  sdkmanager  \"build-tools;26.0.2\"  #Copy Android \nCOPY android-8.0.0 android ENV  PATH=\"/android:$PATH\"",
            "title": "MoQuality's Example Dockerfile"
        },
        {
            "location": "/integration-ci-cd/dockerfile/#create-empty-directory-for-git-repo",
            "text": "Create an empty directory and  cd  into it.  cd   [ EMPTY_DIRECTORY ]",
            "title": "Create Empty Directory for Git Repo"
        },
        {
            "location": "/integration-ci-cd/dockerfile/#clone-moquality-repository",
            "text": "Clone MoQuality's example repository using  git clone .  git clone https://github.com/moquality/plugins.git",
            "title": "Clone MoQuality Repository"
        },
        {
            "location": "/integration-ci-cd/dockerfile/#configyml-contents",
            "text": "Within the hidden  .circleci  folder is the  config.yml  file. In this file are steps which build the app using  gradle build ,  install the mq-cli , and  login and upload the app to MoQuality .  version :   2  jobs : \n   build : \n     docker : \n       -   image :   jragonemq/mqubuntutest:latest \n     environment : \n       JVM_OPTS :   -Xmx3200m \n     steps : \n       -   checkout \n       -   run : \n           name :   Build app \n           command :   gradle build \n       -   run : \n           name :   Install mq-cli \n           command :   | \n             curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash - \n             sudo apt-get install -y nodejs \n             sudo chown -R $(whoami) /usr/lib/node_modules /usr/bin \n             npm -g config set user root \n             npm install -g mq-cli \n       -   run : \n           name :   Login and Upload to MoQuality \n           command :   |               mq login -a [API_KEY]               mq user               mq upload -f app/build/outputs/apk/debug/app-debug.apk -a [APP_ID]               mq apps",
            "title": "config.yml Contents"
        },
        {
            "location": "/integration-ci-cd/dockerfile/#edit-configyml",
            "text": "By the  mq login  and  mq upload  commands, highlighted above, fill in [API_KEY] and [APP_ID] with the API key of your account and app Id of your app, respectively. To find your API key, run  mq login  in your command line and follow the prompts to log in to your account. Next, run  mq user  to display user information. Your API key will be in the list of returned information. To find your app Id, log in with  mq login  and run  mq apps  to see a list of your apps. Find your app in the list and locate the app Id in the same row.  Using the above instructions and  CircleCI MQ CLI integration documentation , we have created our own custom Dockerfile, integrated it with CircleCI, and integrated CircleCI with MoQuality.",
            "title": "Edit config.yml"
        },
        {
            "location": "/integration-ci-cd/dockerfile/#troublshooting",
            "text": "",
            "title": "Troublshooting"
        },
        {
            "location": "/integration-ci-cd/dockerfile/#undocumented-error",
            "text": "If you encounter an error that is not documented, please open an issue on our  public GitHub repository . Alternatively, you can report your error to  hello@moquality.com .",
            "title": "Undocumented Error"
        },
        {
            "location": "/notifications/slackbot/getting-started/",
            "text": "Getting Started with Slackbot\n\u2693\n\n\nIntroduction\n\u2693\n\n\nMoQuality enables you to schedule tests when you deploy a new build of your app. However, these tests take time, and so does monitoring their success. Rather than watch and wait for your tests to complete, Slack users can install the MoQuality bot to their workspace. This bot, referred to as Slackbot, will send a notification with test results to your desired Slack channel when a chosen app's test has completed. In order to utilize MoQuality bot's services effectively, there are several steps to follow.\n\n\nPrerequisites\n\u2693\n\n\n\n\nSlack account & workspace: In order to use Slackbot, you will, of course, need to have created a \nSlack account\n, \nworkspace\n, and \nchannel\n. It is ideal to create a channel specifically for the use of Slackbot.\n\n\nMoQuality account: Slackbot will need to link your Slack account to your MoQuality account, which you can create \nhere\n.\n\n\nMoQuality app: For the purpose of receiving an app's status updates from Slackbot, ensure that you have already uploaded the first version of your app through the \nMoQuality website\n.\n\n\n\n\nInstallation\n\u2693\n\n\nInstall Slackbot from your \nMoQuality account page\n under the \nIntegrations\n tab. Slack will prompt you to authorize the bot for a channel. There is one permission that the bot requires. Said permission is the ability to \nSend messages as MoQuality\n. This permission is necessary for Slackbot to post messages as a bot user.\n\n\nSetup\n\u2693\n\n\nOnce Slackbot is integrated with your workspace, your MoQuality and Slack accounts are linked. This means that you or anyone else in your workspace can invoke one of Slackbots many \nSlash Commands\n. By typing \n/mq\n in your Slack workspace, you should see a list of the available Slash Commands.\n\n\n\n\nThe first Slash Command you may want to use is \n/mq-subscribe [app Id]\n. This command subscribes the authorized channel to test updates from the given MoQuality app. After subscribing the channel, Slackbot posts a public message as an attachment containing information about the subscription.\n\n\nUninstallation\n\u2693\n\n\nSlackbot can be uninstalled by navigating to the \nIntegrations\n tab of your \nMoQuality account page\n and pressing the \nX\n on the top right of the Slack integration. This will direct you to Slackbot's configuration page, and at the bottom of said page is the \nRemove app\n button. By clicking that button, Slackbot will be uninstalled from your workspace and your MoQuality account will be delinked from your Slack account.\n\n\nTroubleshooting\n\u2693\n\n\nIf you encounter an error, please open an issue on our \npublic GitHub repository\n. Alternatively, you can report your error to \nhello@moquality.com\n.",
            "title": "Getting Started"
        },
        {
            "location": "/notifications/slackbot/getting-started/#getting-started-with-slackbot",
            "text": "",
            "title": "Getting Started with Slackbot"
        },
        {
            "location": "/notifications/slackbot/getting-started/#introduction",
            "text": "MoQuality enables you to schedule tests when you deploy a new build of your app. However, these tests take time, and so does monitoring their success. Rather than watch and wait for your tests to complete, Slack users can install the MoQuality bot to their workspace. This bot, referred to as Slackbot, will send a notification with test results to your desired Slack channel when a chosen app's test has completed. In order to utilize MoQuality bot's services effectively, there are several steps to follow.",
            "title": "Introduction"
        },
        {
            "location": "/notifications/slackbot/getting-started/#prerequisites",
            "text": "Slack account & workspace: In order to use Slackbot, you will, of course, need to have created a  Slack account ,  workspace , and  channel . It is ideal to create a channel specifically for the use of Slackbot.  MoQuality account: Slackbot will need to link your Slack account to your MoQuality account, which you can create  here .  MoQuality app: For the purpose of receiving an app's status updates from Slackbot, ensure that you have already uploaded the first version of your app through the  MoQuality website .",
            "title": "Prerequisites"
        },
        {
            "location": "/notifications/slackbot/getting-started/#installation",
            "text": "Install Slackbot from your  MoQuality account page  under the  Integrations  tab. Slack will prompt you to authorize the bot for a channel. There is one permission that the bot requires. Said permission is the ability to  Send messages as MoQuality . This permission is necessary for Slackbot to post messages as a bot user.",
            "title": "Installation"
        },
        {
            "location": "/notifications/slackbot/getting-started/#setup",
            "text": "Once Slackbot is integrated with your workspace, your MoQuality and Slack accounts are linked. This means that you or anyone else in your workspace can invoke one of Slackbots many  Slash Commands . By typing  /mq  in your Slack workspace, you should see a list of the available Slash Commands.   The first Slash Command you may want to use is  /mq-subscribe [app Id] . This command subscribes the authorized channel to test updates from the given MoQuality app. After subscribing the channel, Slackbot posts a public message as an attachment containing information about the subscription.",
            "title": "Setup"
        },
        {
            "location": "/notifications/slackbot/getting-started/#uninstallation",
            "text": "Slackbot can be uninstalled by navigating to the  Integrations  tab of your  MoQuality account page  and pressing the  X  on the top right of the Slack integration. This will direct you to Slackbot's configuration page, and at the bottom of said page is the  Remove app  button. By clicking that button, Slackbot will be uninstalled from your workspace and your MoQuality account will be delinked from your Slack account.",
            "title": "Uninstallation"
        },
        {
            "location": "/notifications/slackbot/getting-started/#troubleshooting",
            "text": "If you encounter an error, please open an issue on our  public GitHub repository . Alternatively, you can report your error to  hello@moquality.com .",
            "title": "Troubleshooting"
        },
        {
            "location": "/notifications/slackbot/features/",
            "text": "Slackbot Features\n\u2693\n\n\nSlash Commands\n\u2693\n\n\nSlack has CLI-like interactions called \nSlash Commands\n. Slash Commands enable the user to directly interact with Slackbot in a variety of ways. Listed below is the full array of Slash Commands that Slackbot supports.\n\n\n\n\n/mq-apps\n\n\n/mq-help\n\n\n\n\n/mq-status\n\n\n/mq-subscribe\n\n\n/mq-user\n\n\n\n\n/mq-apps\n\u2693\n\n\nPosts a private message as an attachment containing the user's apps.\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nUsage\n\n\n        /mq-apps\n\n\n\n\n\n/mq-help\n\u2693\n\n\nPosts a private message as an attachment containing information about MoQuality and Slackbot's Slash Commands.\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nUsage\n\n\n        /mq-help\n\n\n\n\n\n\n\n\n/mq-status\n\u2693\n\n\nPosts a private message as an attachment containing the statuses of tests for an app that has been created on MoQuality.\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nUsage\n\n\n        \n/\nmq\n-\nstatus\n \n[\napp\n \nId\n]\n\n\n\n\n\n\n/mq-subscribe\n\u2693\n\n\nSubscribes the authorized channel to test updates from the given MoQuality app. After subscribing the channel, Slackbot posts a public message as an attachment containing information about the subscription.\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nUsage\n\n\n        \n/\nmq\n-\nsubscribe\n \n[\napp\n \nId\n]\n\n\n\n\n\n\n/mq-user\n\u2693\n\n\nPosts a private message as an attachment containing information about the MoQuality user linked with the current Slack account.\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nUsage\n\n\n        /mq-user",
            "title": "Features"
        },
        {
            "location": "/notifications/slackbot/features/#slackbot-features",
            "text": "",
            "title": "Slackbot Features"
        },
        {
            "location": "/notifications/slackbot/features/#slash-commands",
            "text": "Slack has CLI-like interactions called  Slash Commands . Slash Commands enable the user to directly interact with Slackbot in a variety of ways. Listed below is the full array of Slash Commands that Slackbot supports.   /mq-apps  /mq-help   /mq-status  /mq-subscribe  /mq-user",
            "title": "Slash Commands"
        },
        {
            "location": "/notifications/slackbot/features/#mq-apps",
            "text": "Posts a private message as an attachment containing the user's apps.  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Usage          /mq-apps",
            "title": "/mq-apps"
        },
        {
            "location": "/notifications/slackbot/features/#mq-help",
            "text": "Posts a private message as an attachment containing information about MoQuality and Slackbot's Slash Commands.  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Usage          /mq-help",
            "title": "/mq-help"
        },
        {
            "location": "/notifications/slackbot/features/#mq-status",
            "text": "Posts a private message as an attachment containing the statuses of tests for an app that has been created on MoQuality.  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Usage           / mq - status   [ app   Id ]",
            "title": "/mq-status"
        },
        {
            "location": "/notifications/slackbot/features/#mq-subscribe",
            "text": "Subscribes the authorized channel to test updates from the given MoQuality app. After subscribing the channel, Slackbot posts a public message as an attachment containing information about the subscription.  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Usage           / mq - subscribe   [ app   Id ]",
            "title": "/mq-subscribe"
        },
        {
            "location": "/notifications/slackbot/features/#mq-user",
            "text": "Posts a private message as an attachment containing information about the MoQuality user linked with the current Slack account.  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Usage          /mq-user",
            "title": "/mq-user"
        },
        {
            "location": "/notifications/gitbot/getting-started/",
            "text": "Getting Started with Gitbot\n\u2693\n\n\nIntroduction\n\u2693\n\n\nMoQuality's services provide an invaluable advancement to QA testing, but those advancements are only as powerful as their accessibility. It's difficult to practice continuous integration when you have to manually monitor test statuses after, for example, deploying a new version of your product to a staging environment. MoQuality understands this and has created a GitHub app, referred to as Gitbot, to automatically notify you of test statuses for the new version of your app. Follow the steps below to integrate MoQuality's GitHub app into your development workflow.\n\n\nPrerequisites\n\u2693\n\n\n\n\nGitHub accounts & respository: In order to use Gitbot, you will, of course, need to have created a \nGitHub account\n and a \nrepository\n.\n\n\nMoQuality account: Gitbot will need to link your GitHub account to your MoQuality account, which you can create \nhere\n.\n\n\nMoQuality app: For the purpose of test status notifications for a new version of your app, ensure that you have already uploaded the first version of your app through the \nMoQuality website\n.\n\n\n\n\nInstallation\n\u2693\n\n\nInstall Gitbot from from your \nMoQuality account page\n under the \nIntegrations\n tab. Follow the prompts to authorize Gitbot and install it to your desired repository or repositories. You will see that Gitbot will be given \nRead\n \nand \nwrite\n access to pull requests\n. This does not give Gitbot access to the code. It only allows Gitbot to interact with the high-level interfaces such as comments. See the \nGitHub API\n for more detailed permissions information.\n\n\nSetup\n\u2693\n\n\nTo recieve testing updates in the comments of a pull request, enter your pull request URL when you press the \nGenerate Tests\n button on your MoQuality app's page. This will tell Gitbot where to post status updates from those tests. You can also enter the pull request URL on the test report's page.\n\n\nUninstallation\n\u2693\n\n\nGitbot can be uninstalled by navigating to the \nIntegrations\n tab of your \nMoQuality account page\n and pressing the \nX\n on the top right of the GitHub integration. This will direct you to Gitbot's configuration page, and at the bottom of said page is the \nUninstall\n button. By clicking that button, Gitbot will be uninstalled from your workspace and your MoQuality account will be delinked from your GitHub account.\n\n\nTroubleshooting\n\u2693\n\n\nIf you encounter an error, please open an issue on our \npublic GitHub repository\n. Alternatively, you can report your error to \nhello@moquality.com\n.",
            "title": "Getting Started"
        },
        {
            "location": "/notifications/gitbot/getting-started/#getting-started-with-gitbot",
            "text": "",
            "title": "Getting Started with Gitbot"
        },
        {
            "location": "/notifications/gitbot/getting-started/#introduction",
            "text": "MoQuality's services provide an invaluable advancement to QA testing, but those advancements are only as powerful as their accessibility. It's difficult to practice continuous integration when you have to manually monitor test statuses after, for example, deploying a new version of your product to a staging environment. MoQuality understands this and has created a GitHub app, referred to as Gitbot, to automatically notify you of test statuses for the new version of your app. Follow the steps below to integrate MoQuality's GitHub app into your development workflow.",
            "title": "Introduction"
        },
        {
            "location": "/notifications/gitbot/getting-started/#prerequisites",
            "text": "GitHub accounts & respository: In order to use Gitbot, you will, of course, need to have created a  GitHub account  and a  repository .  MoQuality account: Gitbot will need to link your GitHub account to your MoQuality account, which you can create  here .  MoQuality app: For the purpose of test status notifications for a new version of your app, ensure that you have already uploaded the first version of your app through the  MoQuality website .",
            "title": "Prerequisites"
        },
        {
            "location": "/notifications/gitbot/getting-started/#installation",
            "text": "Install Gitbot from from your  MoQuality account page  under the  Integrations  tab. Follow the prompts to authorize Gitbot and install it to your desired repository or repositories. You will see that Gitbot will be given  Read   and  write  access to pull requests . This does not give Gitbot access to the code. It only allows Gitbot to interact with the high-level interfaces such as comments. See the  GitHub API  for more detailed permissions information.",
            "title": "Installation"
        },
        {
            "location": "/notifications/gitbot/getting-started/#setup",
            "text": "To recieve testing updates in the comments of a pull request, enter your pull request URL when you press the  Generate Tests  button on your MoQuality app's page. This will tell Gitbot where to post status updates from those tests. You can also enter the pull request URL on the test report's page.",
            "title": "Setup"
        },
        {
            "location": "/notifications/gitbot/getting-started/#uninstallation",
            "text": "Gitbot can be uninstalled by navigating to the  Integrations  tab of your  MoQuality account page  and pressing the  X  on the top right of the GitHub integration. This will direct you to Gitbot's configuration page, and at the bottom of said page is the  Uninstall  button. By clicking that button, Gitbot will be uninstalled from your workspace and your MoQuality account will be delinked from your GitHub account.",
            "title": "Uninstallation"
        },
        {
            "location": "/notifications/gitbot/getting-started/#troubleshooting",
            "text": "If you encounter an error, please open an issue on our  public GitHub repository . Alternatively, you can report your error to  hello@moquality.com .",
            "title": "Troubleshooting"
        },
        {
            "location": "/notifications/gitbot/features/",
            "text": "Gitbot Features\n\u2693\n\n\nUpload App Reminder\n\u2693\n\n\nWhen a pull request is opened or reopned, Gitbot will post to the pull request a comment, reminding you to upload the new version of your app to MoQuality.\n\n\nStatus Updates\n\u2693\n\n\nIf Gitbot has been \nconfigured correctly\n, it will post updates from tests to the comments of a pull request.\n\n\nFuture Features\n\u2693\n\n\nIn the future, Gitbot could be smarter and capable of automatically testing your new app versions when they are, perhaps, in a pending pull request. Then, Gitbot could post testing updates to the comments of said pull request, thereby notifying you of any breaking bugs without you having to manually enter any pull request URLs.",
            "title": "Features"
        },
        {
            "location": "/notifications/gitbot/features/#gitbot-features",
            "text": "",
            "title": "Gitbot Features"
        },
        {
            "location": "/notifications/gitbot/features/#upload-app-reminder",
            "text": "When a pull request is opened or reopned, Gitbot will post to the pull request a comment, reminding you to upload the new version of your app to MoQuality.",
            "title": "Upload App Reminder"
        },
        {
            "location": "/notifications/gitbot/features/#status-updates",
            "text": "If Gitbot has been  configured correctly , it will post updates from tests to the comments of a pull request.",
            "title": "Status Updates"
        },
        {
            "location": "/notifications/gitbot/features/#future-features",
            "text": "In the future, Gitbot could be smarter and capable of automatically testing your new app versions when they are, perhaps, in a pending pull request. Then, Gitbot could post testing updates to the comments of said pull request, thereby notifying you of any breaking bugs without you having to manually enter any pull request URLs.",
            "title": "Future Features"
        },
        {
            "location": "/faq/",
            "text": "Frequently Asked Questions\n\u2693\n\n\nTesting\n\u2693\n\n\nWhat types of apps can be tested with MoQuality?\n\u2693\n\n\nMoQuality can be used to test native Android and iOS apps.\n\n\nWhat is the maximum number of apps we can test?\n\u2693\n\n\nYou can upload a total of 100 apps for each account. Note that two versions of the same app count as two apps towards this total.\n\n\nDo I need to instrument my app or supply source code?\n\u2693\n\n\nNo instrumentation or source code is required to use the built-in tests. Android apps can be submitted as .apk files. iOS apps should be built with \u201ciOS Device\u201d as the target. If they are built with a simulator as the target, select the simulator checkbox while uploading the app.\n\n\nHow do you clean up devices after my testing is completed?\n\u2693\n\n\nAfter test execution completes, we uninstall the app and any data related to the app (cache is deleted).\n\n\nWhile we continue to add additional cleanup steps and improve the cleanup process, it is possible for data to persist between sessions. In case you want to test on a private device, contact us. In some cases you might have to provide sensitive information like login or other security-sensitive details during your automated test sessions. We advise you to create sandbox accounts to perform these tests on your staging environments.\n\n\nDo you modify my app?\n\u2693\n\n\nNo, we don't modify your app. Some iOS apps may require re-signing, but this feature is not currently supported. We recommend uploading a version of your app with debugging symbols enabled.\n\n\nTest Recording and Editing\n\u2693\n\n\nDoes the recorder support both Android and iOS?\n\u2693\n\n\nYes, both Android and iOS, including iOS simulators, are supported.\n\n\nDo I need any additional software on my machine?\n\u2693\n\n\nAndroid does not require any additional software. iOS requires Xcode to be installed and the command-line tools enabled. For details on how to setup a system for use with iOS, see \nRecorder Setup for iOS Devices\n.\n\n\nCan I connect to multiple Android devices from my local machine?\n\u2693\n\n\nYes. The recorder allows you to choose which device you would like to use after you have logged in.\n\n\nWhat is the maximum test time allowed?\n\u2693\n\n\nThe maximum time for each test is 5 minutes. If you need a longer timeout, please\u00a0contact us at \nsupport@moquality.com\n\n\nIs there a way to download the results?\n\u2693\n\n\nWe offer this feature as an add-on. After you enable it, a link appears in our dashboard that enables you to download tests and test reports in JSON format.\n\n\nDevices\n\u2693\n\n\nCan the cloud devices communicate with external web-services?\n\u2693\n\n\nYes. All devices have internet access through a Wifi connection.\n\n\nCan I make phone calls or send SMS from the test devices?\n\u2693\n\n\nNo, currently our cloud devices do not have carrier SIM setup and cannot make phone calls or send SMS messages. \n\n\nCan I access the cloud device camera?\n\u2693\n\n\nYes, you can access both front and rear facing device cameras.\n\n\nAndroid: Are there any default accounts (e.g., Google) available on cloud devices?\n\u2693\n\n\nNo. By default, every device is clean and there is no account data setup.  \n\n\nHowever, the test recorder provides the functionality to add webhooks which allows it to communicate with server-side scripts that you may use for account setup. See \nRecorder Features\n\n\nAndroid: Is Google Play Services available on cloud devices? Which version is installed?\n\u2693\n\n\nYes, Google Play Services is installed on supported devices. The services are updated as new versions become available.\n\n\nIf you didn't find answer to your questions, please contact us at any of our following support channels:\n\u2693\n\n\n\n\nIntercom chat on our website.\n\n\nSlack with us at \nslack.moquality.com\n.\n\n\nEmail at \nsupport@moquality.com\n.",
            "title": "FAQ"
        },
        {
            "location": "/faq/#frequently-asked-questions",
            "text": "",
            "title": "Frequently Asked Questions"
        },
        {
            "location": "/faq/#testing",
            "text": "",
            "title": "Testing"
        },
        {
            "location": "/faq/#what-types-of-apps-can-be-tested-with-moquality",
            "text": "MoQuality can be used to test native Android and iOS apps.",
            "title": "What types of apps can be tested with MoQuality?"
        },
        {
            "location": "/faq/#what-is-the-maximum-number-of-apps-we-can-test",
            "text": "You can upload a total of 100 apps for each account. Note that two versions of the same app count as two apps towards this total.",
            "title": "What is the maximum number of apps we can test?"
        },
        {
            "location": "/faq/#do-i-need-to-instrument-my-app-or-supply-source-code",
            "text": "No instrumentation or source code is required to use the built-in tests. Android apps can be submitted as .apk files. iOS apps should be built with \u201ciOS Device\u201d as the target. If they are built with a simulator as the target, select the simulator checkbox while uploading the app.",
            "title": "Do I need to instrument my app or supply source code?"
        },
        {
            "location": "/faq/#how-do-you-clean-up-devices-after-my-testing-is-completed",
            "text": "After test execution completes, we uninstall the app and any data related to the app (cache is deleted).  While we continue to add additional cleanup steps and improve the cleanup process, it is possible for data to persist between sessions. In case you want to test on a private device, contact us. In some cases you might have to provide sensitive information like login or other security-sensitive details during your automated test sessions. We advise you to create sandbox accounts to perform these tests on your staging environments.",
            "title": "How do you clean up devices after my testing is completed?"
        },
        {
            "location": "/faq/#do-you-modify-my-app",
            "text": "No, we don't modify your app. Some iOS apps may require re-signing, but this feature is not currently supported. We recommend uploading a version of your app with debugging symbols enabled.",
            "title": "Do you modify my app?"
        },
        {
            "location": "/faq/#test-recording-and-editing",
            "text": "",
            "title": "Test Recording and Editing"
        },
        {
            "location": "/faq/#does-the-recorder-support-both-android-and-ios",
            "text": "Yes, both Android and iOS, including iOS simulators, are supported.",
            "title": "Does the recorder support both Android and iOS?"
        },
        {
            "location": "/faq/#do-i-need-any-additional-software-on-my-machine",
            "text": "Android does not require any additional software. iOS requires Xcode to be installed and the command-line tools enabled. For details on how to setup a system for use with iOS, see  Recorder Setup for iOS Devices .",
            "title": "Do I need any additional software on my machine?"
        },
        {
            "location": "/faq/#can-i-connect-to-multiple-android-devices-from-my-local-machine",
            "text": "Yes. The recorder allows you to choose which device you would like to use after you have logged in.",
            "title": "Can I connect to multiple Android devices from my local machine?"
        },
        {
            "location": "/faq/#what-is-the-maximum-test-time-allowed",
            "text": "The maximum time for each test is 5 minutes. If you need a longer timeout, please\u00a0contact us at  support@moquality.com",
            "title": "What is the maximum test time allowed?"
        },
        {
            "location": "/faq/#is-there-a-way-to-download-the-results",
            "text": "We offer this feature as an add-on. After you enable it, a link appears in our dashboard that enables you to download tests and test reports in JSON format.",
            "title": "Is there a way to download the results?"
        },
        {
            "location": "/faq/#devices",
            "text": "",
            "title": "Devices"
        },
        {
            "location": "/faq/#can-the-cloud-devices-communicate-with-external-web-services",
            "text": "Yes. All devices have internet access through a Wifi connection.",
            "title": "Can the cloud devices communicate with external web-services?"
        },
        {
            "location": "/faq/#can-i-make-phone-calls-or-send-sms-from-the-test-devices",
            "text": "No, currently our cloud devices do not have carrier SIM setup and cannot make phone calls or send SMS messages.",
            "title": "Can I make phone calls or send SMS from the test devices?"
        },
        {
            "location": "/faq/#can-i-access-the-cloud-device-camera",
            "text": "Yes, you can access both front and rear facing device cameras.",
            "title": "Can I access the cloud device camera?"
        },
        {
            "location": "/faq/#android-are-there-any-default-accounts-eg-google-available-on-cloud-devices",
            "text": "No. By default, every device is clean and there is no account data setup.    However, the test recorder provides the functionality to add webhooks which allows it to communicate with server-side scripts that you may use for account setup. See  Recorder Features",
            "title": "Android: Are there any default accounts (e.g., Google) available on cloud devices?"
        },
        {
            "location": "/faq/#android-is-google-play-services-available-on-cloud-devices-which-version-is-installed",
            "text": "Yes, Google Play Services is installed on supported devices. The services are updated as new versions become available.",
            "title": "Android: Is Google Play Services available on cloud devices? Which version is installed?"
        },
        {
            "location": "/faq/#if-you-didnt-find-answer-to-your-questions-please-contact-us-at-any-of-our-following-support-channels",
            "text": "Intercom chat on our website.  Slack with us at  slack.moquality.com .  Email at  support@moquality.com .",
            "title": "If you didn't find answer to your questions, please contact us at any of our following support channels:"
        }
    ]
}