{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is MoQuality? \u00b6 MoQuality is an AI based automated testing platform for native android and iOS mobile apps. It provides an easier way to record tests and run across multiple devices at once. You can expand your test coverage as the AI explores your app just like humans would do and discover more errors in the process. Get started in few simple steps: Create tests in Barista Execute tests in Barista Robot Testing View results You can also use MoQuality in other uses cases: Exporting Tests with MoQuality","title":"What is MoQuality?"},{"location":"#what-is-moquality","text":"MoQuality is an AI based automated testing platform for native android and iOS mobile apps. It provides an easier way to record tests and run across multiple devices at once. You can expand your test coverage as the AI explores your app just like humans would do and discover more errors in the process. Get started in few simple steps: Create tests in Barista Execute tests in Barista Robot Testing View results You can also use MoQuality in other uses cases: Exporting Tests with MoQuality","title":"What is MoQuality?"},{"location":"faq/","text":"Frequently Asked Questions \u00b6 Testing \u00b6 What types of apps can be tested with MoQuality? \u00b6 MoQuality can be used to test native Android and iOS apps. What is the maximum number of apps we can test? \u00b6 You can upload a total of 100 apps for each account. Note that two versions of the same app count as two apps towards this total. Do I need to instrument my app or supply source code? \u00b6 No instrumentation or source code is required to use the built-in tests. Android apps can be submitted as .apk files. iOS apps should be built with \u201ciOS Device\u201d as the target. If they are built with a simulator as the target, select the simulator checkbox while uploading the app. How do you clean up devices after my testing is completed? \u00b6 After test execution completes, we uninstall the app and any data related to the app (cache is deleted). While we continue to add additional cleanup steps and improve the cleanup process, it is possible for data to persist between sessions. In case you want to test on a private device, contact us. In some cases you might have to provide sensitive information like login or other security-sensitive details during your automated test sessions. We advise you to create sandbox accounts to perform these tests on your staging environments. Do you modify my app? \u00b6 No, we don't modify your app. Some iOS apps may require re-signing, but this feature is not currently supported. We recommend uploading a version of your app with debugging symbols enabled. Test Recording and Editing \u00b6 Does the recorder support both Android and iOS? \u00b6 Yes, both Android and iOS, including iOS simulators, are supported. Do I need any additional software on my machine? \u00b6 Android does not require any additional software. iOS requires Xcode to be installed and the command-line tools enabled. For details on how to setup a system for use with iOS, see Recorder Setup for iOS Devices . Can I connect to multiple Android devices from my local machine? \u00b6 Yes. The recorder allows you to choose which device you would like to use after you have logged in. What is the maximum test time allowed? \u00b6 The maximum time for each test is 5 minutes. If you need a longer timeout, please contact us at support@moquality.com Is there a way to download the results? \u00b6 We offer this feature as an add-on. After you enable it, a link appears in our dashboard that enables you to download tests and test reports in JSON format. Devices \u00b6 Can the cloud devices communicate with external web-services? \u00b6 Yes. All devices have internet access through a Wifi connection. Can I make phone calls or send SMS from the test devices? \u00b6 No, currently our cloud devices do not have carrier SIM setup and cannot make phone calls or send SMS messages. Can I access the cloud device camera? \u00b6 Yes, you can access both front and rear facing device cameras. Android: Are there any default accounts (e.g., Google) available on cloud devices? \u00b6 No. By default, every device is clean and there is no account data setup. However, the test recorder provides the functionality to add webhooks which allows it to communicate with server-side scripts that you may use for account setup. See Recorder Features Android: Is Google Play Services available on cloud devices? Which version is installed? \u00b6 Yes, Google Play Services is installed on supported devices. The services are updated as new versions become available. If you didn't find answer to your questions, please contact us at any of our following support channels: \u00b6 Intercom chat on our website. Slack with us at slack.moquality.com . Email at support@moquality.com .","title":"FAQ"},{"location":"faq/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"faq/#testing","text":"","title":"Testing"},{"location":"faq/#what-types-of-apps-can-be-tested-with-moquality","text":"MoQuality can be used to test native Android and iOS apps.","title":"What types of apps can be tested with MoQuality?"},{"location":"faq/#what-is-the-maximum-number-of-apps-we-can-test","text":"You can upload a total of 100 apps for each account. Note that two versions of the same app count as two apps towards this total.","title":"What is the maximum number of apps we can test?"},{"location":"faq/#do-i-need-to-instrument-my-app-or-supply-source-code","text":"No instrumentation or source code is required to use the built-in tests. Android apps can be submitted as .apk files. iOS apps should be built with \u201ciOS Device\u201d as the target. If they are built with a simulator as the target, select the simulator checkbox while uploading the app.","title":"Do I need to instrument my app or supply source code?"},{"location":"faq/#how-do-you-clean-up-devices-after-my-testing-is-completed","text":"After test execution completes, we uninstall the app and any data related to the app (cache is deleted). While we continue to add additional cleanup steps and improve the cleanup process, it is possible for data to persist between sessions. In case you want to test on a private device, contact us. In some cases you might have to provide sensitive information like login or other security-sensitive details during your automated test sessions. We advise you to create sandbox accounts to perform these tests on your staging environments.","title":"How do you clean up devices after my testing is completed?"},{"location":"faq/#do-you-modify-my-app","text":"No, we don't modify your app. Some iOS apps may require re-signing, but this feature is not currently supported. We recommend uploading a version of your app with debugging symbols enabled.","title":"Do you modify my app?"},{"location":"faq/#test-recording-and-editing","text":"","title":"Test Recording and Editing"},{"location":"faq/#does-the-recorder-support-both-android-and-ios","text":"Yes, both Android and iOS, including iOS simulators, are supported.","title":"Does the recorder support both Android and iOS?"},{"location":"faq/#do-i-need-any-additional-software-on-my-machine","text":"Android does not require any additional software. iOS requires Xcode to be installed and the command-line tools enabled. For details on how to setup a system for use with iOS, see Recorder Setup for iOS Devices .","title":"Do I need any additional software on my machine?"},{"location":"faq/#can-i-connect-to-multiple-android-devices-from-my-local-machine","text":"Yes. The recorder allows you to choose which device you would like to use after you have logged in.","title":"Can I connect to multiple Android devices from my local machine?"},{"location":"faq/#what-is-the-maximum-test-time-allowed","text":"The maximum time for each test is 5 minutes. If you need a longer timeout, please contact us at support@moquality.com","title":"What is the maximum test time allowed?"},{"location":"faq/#is-there-a-way-to-download-the-results","text":"We offer this feature as an add-on. After you enable it, a link appears in our dashboard that enables you to download tests and test reports in JSON format.","title":"Is there a way to download the results?"},{"location":"faq/#devices","text":"","title":"Devices"},{"location":"faq/#can-the-cloud-devices-communicate-with-external-web-services","text":"Yes. All devices have internet access through a Wifi connection.","title":"Can the cloud devices communicate with external web-services?"},{"location":"faq/#can-i-make-phone-calls-or-send-sms-from-the-test-devices","text":"No, currently our cloud devices do not have carrier SIM setup and cannot make phone calls or send SMS messages.","title":"Can I make phone calls or send SMS from the test devices?"},{"location":"faq/#can-i-access-the-cloud-device-camera","text":"Yes, you can access both front and rear facing device cameras.","title":"Can I access the cloud device camera?"},{"location":"faq/#android-are-there-any-default-accounts-eg-google-available-on-cloud-devices","text":"No. By default, every device is clean and there is no account data setup. However, the test recorder provides the functionality to add webhooks which allows it to communicate with server-side scripts that you may use for account setup. See Recorder Features","title":"Android: Are there any default accounts (e.g., Google) available on cloud devices?"},{"location":"faq/#android-is-google-play-services-available-on-cloud-devices-which-version-is-installed","text":"Yes, Google Play Services is installed on supported devices. The services are updated as new versions become available.","title":"Android: Is Google Play Services available on cloud devices? Which version is installed?"},{"location":"faq/#if-you-didnt-find-answer-to-your-questions-please-contact-us-at-any-of-our-following-support-channels","text":"Intercom chat on our website. Slack with us at slack.moquality.com . Email at support@moquality.com .","title":"If you didn't find answer to your questions, please contact us at any of our following support channels:"},{"location":"flows/documentation/","text":"Documentation with MoQuality \u00b6 You can use MoQuality to document manual or automated tests. The documentation feature allows you to export/download tests or test reports created on our platform. Enable Docs \u00b6 Enable the docs option in your Accounts > Payment page. You need to put your credit card information to enable this feature. We will invoice you for this feature at the end of each month. Check out pricing here. Export Tests \u00b6 Create tests Before you export tests you will first need to create tests with our Test Recorder. You can learn more about creating tests on MoQuality here . Create a test suite with the tests you want to export. Learn how to create test suite here . To export tests click on the Download icon on the Test Suites page. We will email you a link to download the tests. The report contains screenshots with actions overlayed on them. Export Test Reports \u00b6 If you have enabled the export option, we will email you a link to download the report alongwith every test run you schedule on MoQuality. Upcoming Features \u00b6 Slack Integration (release Aug 1) Github Integration (release Aug 1) Pivotal Tracker (release mid Aug) Integration with Slack and Github will allow you to export your results directly to Github PRs or a Slack channel.","title":"Documentation"},{"location":"flows/documentation/#documentation-with-moquality","text":"You can use MoQuality to document manual or automated tests. The documentation feature allows you to export/download tests or test reports created on our platform.","title":"Documentation with MoQuality"},{"location":"flows/documentation/#enable-docs","text":"Enable the docs option in your Accounts > Payment page. You need to put your credit card information to enable this feature. We will invoice you for this feature at the end of each month. Check out pricing here.","title":"Enable Docs"},{"location":"flows/documentation/#export-tests","text":"Create tests Before you export tests you will first need to create tests with our Test Recorder. You can learn more about creating tests on MoQuality here . Create a test suite with the tests you want to export. Learn how to create test suite here . To export tests click on the Download icon on the Test Suites page. We will email you a link to download the tests. The report contains screenshots with actions overlayed on them.","title":"Export Tests"},{"location":"flows/documentation/#export-test-reports","text":"If you have enabled the export option, we will email you a link to download the report alongwith every test run you schedule on MoQuality.","title":"Export Test Reports"},{"location":"flows/documentation/#upcoming-features","text":"Slack Integration (release Aug 1) Github Integration (release Aug 1) Pivotal Tracker (release mid Aug) Integration with Slack and Github will allow you to export your results directly to Github PRs or a Slack channel.","title":"Upcoming Features"},{"location":"getting-started/android/","text":"Building an Android App \u00b6 Enable your main activity to be called through an external program. You can do that by setting the following setting in your AndroidManifest file. android : exported = \"true\" Using Gradle \u00b6 For Android projects that use the Gradle build system, building a debug APK requires running a command like: ./gradlew assembleDebug The output APK is typically located at [project]/app/build/outputs/apk/app-debug.apk . You might need to replace \"app\" with your Android default module name. Using Eclipse/Ant \u00b6 If your app uses the legacy ant build system, the command is usually ant debug Upload the debug apk to app.moquality.com .","title":"Android"},{"location":"getting-started/android/#building-an-android-app","text":"Enable your main activity to be called through an external program. You can do that by setting the following setting in your AndroidManifest file. android : exported = \"true\"","title":"Building an Android App"},{"location":"getting-started/android/#using-gradle","text":"For Android projects that use the Gradle build system, building a debug APK requires running a command like: ./gradlew assembleDebug The output APK is typically located at [project]/app/build/outputs/apk/app-debug.apk . You might need to replace \"app\" with your Android default module name.","title":"Using Gradle"},{"location":"getting-started/android/#using-eclipseant","text":"If your app uses the legacy ant build system, the command is usually ant debug Upload the debug apk to app.moquality.com .","title":"Using Eclipse/Ant"},{"location":"getting-started/auto-test/","text":"Auto-generating Tests \u00b6 This feature allows MQ-Bot (our AI Agent) to create tests automatically and executing them on devices users specify. The MQ-Bot tries to systematically identify widgets on every screen and interacts with them. In the end, it gives you a list of test runs it has conducted and a pass or success for each of them, along with screenshots, AppMap, and various statistics. To view results and reports of the test runs, visit Dashboard . Use Case \u00b6 In contrast to demonstrating a test and running them, robot test can be used for quick feedback and check cases that you might otherwise miss out.The more you use this feature on your app, the smarter it gets. For example, if the robot finds a bug, it prioritizes testing towards creating test runs to produce that bug. For enterprise customers, the robot learns the context of your app and creates test runs like a human would. In order to automatically generate tests, click on Generate Tests. Now specify the name of the report, number of tests you want to generate and the maximum amount of time MQ-Bot ,should run. For example, if you specify 10 tests to be generated in an hour, than the MQ-Bot will generate approximately 10 tests in an hour. If you specify 30 min instead of an hour, it will still generate the same number of tests, but the tests will be shorter. Training MQ-Bot \u00b6 Our MQ-Bot can be trained!! By recording with MoQuality Recorder , we can train the MQ-Bot to know the important test flows and screens. It makes the MQ-Bot bias itself towards such flows and screen when creating tests.18 Viewing results \u00b6 To view results and reports of the test runs, visit Dashboard","title":"Auto-generating Tests"},{"location":"getting-started/auto-test/#auto-generating-tests","text":"This feature allows MQ-Bot (our AI Agent) to create tests automatically and executing them on devices users specify. The MQ-Bot tries to systematically identify widgets on every screen and interacts with them. In the end, it gives you a list of test runs it has conducted and a pass or success for each of them, along with screenshots, AppMap, and various statistics. To view results and reports of the test runs, visit Dashboard .","title":"Auto-generating Tests"},{"location":"getting-started/auto-test/#use-case","text":"In contrast to demonstrating a test and running them, robot test can be used for quick feedback and check cases that you might otherwise miss out.The more you use this feature on your app, the smarter it gets. For example, if the robot finds a bug, it prioritizes testing towards creating test runs to produce that bug. For enterprise customers, the robot learns the context of your app and creates test runs like a human would. In order to automatically generate tests, click on Generate Tests. Now specify the name of the report, number of tests you want to generate and the maximum amount of time MQ-Bot ,should run. For example, if you specify 10 tests to be generated in an hour, than the MQ-Bot will generate approximately 10 tests in an hour. If you specify 30 min instead of an hour, it will still generate the same number of tests, but the tests will be shorter.","title":"Use Case"},{"location":"getting-started/auto-test/#training-mq-bot","text":"Our MQ-Bot can be trained!! By recording with MoQuality Recorder , we can train the MQ-Bot to know the important test flows and screens. It makes the MQ-Bot bias itself towards such flows and screen when creating tests.18","title":"Training MQ-Bot"},{"location":"getting-started/auto-test/#viewing-results","text":"To view results and reports of the test runs, visit Dashboard","title":"Viewing results"},{"location":"getting-started/dashboard/","text":"Testing with MoQuality Quickstart \u00b6 Upload an app Upload an app on (http://app.moquality.com) Create test cases using Recorder (only for Manual testing?): To create test cases, go the Tests tab and click on + in the Tests module to add a test. You can download the recorder for your machine. Login to the recorder and record a test. Read more about recording test cases here. Create test suites (only for Manual testing?): Go to the Tests tab and click on + in the Test Suites module to create test suites. You can select a number of tests that will run in order when we execute them. Create device group (only for Manual testing?): Go to the Devices tab. You can now select a custom device group or create your own. Create a test report (only for Manual testing?) Go to the Overview page and create a test report by clicking on + in the Test Reports module. Select one test suite and a device group to schedule runs for this test report. For Automated Testing: Click on Generate Tests on the Overview Page and select the number of tests you want to generate and time limit. Reporting and executing tests Visit the guide. Note: The test cases you create adapt to every version of the app you upload. So the test, test suites, and device groups you create show up for every new version. Only the overview page keeps changing because the test report runs on a particular version. Detailed Dashboard Overview \u00b6 Upload an App \u00b6 Go to app.moquality.com and click on the Add APP box. Upload an app. Enter the App detials such as name, description, and select the type of App (Android/iOS). After uploading an, a page with multiple tabs is shown. Those tabs are: Overview Tests Suites Devices Settings We describe each of these tabs and their functionality. There is also a button with caption DOWNLOAD TEST RECORDER . Download the recorder if you want to record the testcases. Overview page \u00b6 The overview page provide the App and Test Reports details. Test Reports are described in detail in the Test Report Section. Here you can schedule the test runs recorded with Moquality recorder or Automatic Testing on a set of selected devices. Tests page \u00b6 Recording test cases Writing test cases is hard. Using MoQuality test recorder, it is a matter of few clicks to record a test case. In the background, AI understands the test case and ensures it is playble across multiple devices and adaptible to future app versions and os updates. Features: Perform any action that you will in your app Assertions which checks for text or widgets Convert demonstrations to tests and run it on any device on our cloud. Viewing recorded tests: Naviagate to Tests tab. This tab provides an overview of all the tests that have been recorded with the MoQuality Recorder. A test consist of a series of actions performed on an app on a device. It is displayed as a series of screenshot and a heilighted area indiciating the action widget. Suite page \u00b6 A test is a series of action that should be performed to cover a use case or check an assertion. All our tests always start after clearing any cache related to the app. A test suite is a series of tests that should be run in an order. A test report is a test of these test suites. A test is created using the MQRecorder. After creating a few tests, you can create test suites. Usecase ... Creating a suite Navigate to the Suite tab and click on the Create Test Suite. Now name the Test Suite and select the tests that are part of it. You can create multiple test suites this way. Devices page \u00b6 We rent devices from various test infrastructure providers. Today we support around 50 devices and we are continuously adding new devices into our system as and when our users need them. A device group is a collection of devices on which you want to run tests on. A user can create a group of devices you want to run tests on. There are few presets available such as Google Devices, Samsung Devices, Popular Devices. In order to create a custom device group click the + button. Custom device groups are important in many situations. For example, a user may want to run the apps on devices that have the latest android version, or to confirm it works on old versions. Another example is to create a group of devices from a certain manufacturer, or a user wants to create a group of popular devices. An example is shown below to create a custom group Settings page \u00b6 Here you can change the name of the app and version. You can also specify Package Name of the app and launchable activity name. If you are not sure, do not change these fields. Reporting and Executing Tests \u00b6 Visit the guide","title":"Testing with MoQuality Quickstart"},{"location":"getting-started/dashboard/#testing-with-moquality-quickstart","text":"Upload an app Upload an app on (http://app.moquality.com) Create test cases using Recorder (only for Manual testing?): To create test cases, go the Tests tab and click on + in the Tests module to add a test. You can download the recorder for your machine. Login to the recorder and record a test. Read more about recording test cases here. Create test suites (only for Manual testing?): Go to the Tests tab and click on + in the Test Suites module to create test suites. You can select a number of tests that will run in order when we execute them. Create device group (only for Manual testing?): Go to the Devices tab. You can now select a custom device group or create your own. Create a test report (only for Manual testing?) Go to the Overview page and create a test report by clicking on + in the Test Reports module. Select one test suite and a device group to schedule runs for this test report. For Automated Testing: Click on Generate Tests on the Overview Page and select the number of tests you want to generate and time limit. Reporting and executing tests Visit the guide. Note: The test cases you create adapt to every version of the app you upload. So the test, test suites, and device groups you create show up for every new version. Only the overview page keeps changing because the test report runs on a particular version.","title":"Testing with MoQuality Quickstart"},{"location":"getting-started/dashboard/#detailed-dashboard-overview","text":"","title":"Detailed Dashboard Overview"},{"location":"getting-started/dashboard/#upload-an-app","text":"Go to app.moquality.com and click on the Add APP box. Upload an app. Enter the App detials such as name, description, and select the type of App (Android/iOS). After uploading an, a page with multiple tabs is shown. Those tabs are: Overview Tests Suites Devices Settings We describe each of these tabs and their functionality. There is also a button with caption DOWNLOAD TEST RECORDER . Download the recorder if you want to record the testcases.","title":"Upload an App"},{"location":"getting-started/dashboard/#overview-page","text":"The overview page provide the App and Test Reports details. Test Reports are described in detail in the Test Report Section. Here you can schedule the test runs recorded with Moquality recorder or Automatic Testing on a set of selected devices.","title":"Overview page"},{"location":"getting-started/dashboard/#tests-page","text":"Recording test cases Writing test cases is hard. Using MoQuality test recorder, it is a matter of few clicks to record a test case. In the background, AI understands the test case and ensures it is playble across multiple devices and adaptible to future app versions and os updates. Features: Perform any action that you will in your app Assertions which checks for text or widgets Convert demonstrations to tests and run it on any device on our cloud. Viewing recorded tests: Naviagate to Tests tab. This tab provides an overview of all the tests that have been recorded with the MoQuality Recorder. A test consist of a series of actions performed on an app on a device. It is displayed as a series of screenshot and a heilighted area indiciating the action widget.","title":"Tests page"},{"location":"getting-started/dashboard/#suite-page","text":"A test is a series of action that should be performed to cover a use case or check an assertion. All our tests always start after clearing any cache related to the app. A test suite is a series of tests that should be run in an order. A test report is a test of these test suites. A test is created using the MQRecorder. After creating a few tests, you can create test suites. Usecase ... Creating a suite Navigate to the Suite tab and click on the Create Test Suite. Now name the Test Suite and select the tests that are part of it. You can create multiple test suites this way.","title":"Suite page"},{"location":"getting-started/dashboard/#devices-page","text":"We rent devices from various test infrastructure providers. Today we support around 50 devices and we are continuously adding new devices into our system as and when our users need them. A device group is a collection of devices on which you want to run tests on. A user can create a group of devices you want to run tests on. There are few presets available such as Google Devices, Samsung Devices, Popular Devices. In order to create a custom device group click the + button. Custom device groups are important in many situations. For example, a user may want to run the apps on devices that have the latest android version, or to confirm it works on old versions. Another example is to create a group of devices from a certain manufacturer, or a user wants to create a group of popular devices. An example is shown below to create a custom group","title":"Devices  page"},{"location":"getting-started/dashboard/#settings-page","text":"Here you can change the name of the app and version. You can also specify Package Name of the app and launchable activity name. If you are not sure, do not change these fields.","title":"Settings page"},{"location":"getting-started/dashboard/#reporting-and-executing-tests","text":"Visit the guide","title":"Reporting and Executing Tests"},{"location":"getting-started/devices/","text":"Create Device Group \u00b6 A device group is a collection of devices on which you want to run tests. A user can create a group of devices you want to run tests on. There are few presets available such as Google Devices, Samsung Devices, Popular Devices. In order to create a custom device group click the \"+ button\" . Custom device groups are important in many situations. For example, a user may want to run the apps on devices that have the latest android version, or to confirm it works on old versions. You can create a group of devices from a certain manufacturer, or create a device group composed of popular devices. See below for an example on how to make a custom group. We rent devices from various test infrastructure providers. Today we support around 50 devices and we are continuously adding new devices into our system as and when our users need them.","title":"Create Device Group"},{"location":"getting-started/devices/#create-device-group","text":"A device group is a collection of devices on which you want to run tests. A user can create a group of devices you want to run tests on. There are few presets available such as Google Devices, Samsung Devices, Popular Devices. In order to create a custom device group click the \"+ button\" . Custom device groups are important in many situations. For example, a user may want to run the apps on devices that have the latest android version, or to confirm it works on old versions. You can create a group of devices from a certain manufacturer, or create a device group composed of popular devices. See below for an example on how to make a custom group. We rent devices from various test infrastructure providers. Today we support around 50 devices and we are continuously adding new devices into our system as and when our users need them.","title":"Create Device Group"},{"location":"getting-started/ios-native/","text":"Building an iOS Native App \u00b6 This document gives you an overview of how you can upload your iOS app for real device testing through MoQuality. The steps below walk you through the process of exporting your app as an IPA file (iPhone Application). In your build scheme, choose a \"Generic Device\", this allows you to Archive for multiple architectures and build without having the device plugged in. After this change, build your app for testing to ensure the binaries are in the right place. Build an Archive for your project by selecting Product > Archive . Navigate to the Archives organizer (Go to the Window > Organizer) to export the app IPA On the method of distribution screen, select Ad Hoc Distribution . Follow the later prompts to login to your Apple account, if necessary. On the Ad hoc distribution screen, make sure to select App Thinning to None . Select Automatically manage signing , unless you would like to manually create/select the provisioning profiles. On the final screen, select Export and choose the path for the destination folder. In this folder you will find the IPA file that you need to upload to your MoQuality account for testing.","title":"Building an iOS Native App"},{"location":"getting-started/ios-native/#building-an-ios-native-app","text":"This document gives you an overview of how you can upload your iOS app for real device testing through MoQuality. The steps below walk you through the process of exporting your app as an IPA file (iPhone Application). In your build scheme, choose a \"Generic Device\", this allows you to Archive for multiple architectures and build without having the device plugged in. After this change, build your app for testing to ensure the binaries are in the right place. Build an Archive for your project by selecting Product > Archive . Navigate to the Archives organizer (Go to the Window > Organizer) to export the app IPA On the method of distribution screen, select Ad Hoc Distribution . Follow the later prompts to login to your Apple account, if necessary. On the Ad hoc distribution screen, make sure to select App Thinning to None . Select Automatically manage signing , unless you would like to manually create/select the provisioning profiles. On the final screen, select Export and choose the path for the destination folder. In this folder you will find the IPA file that you need to upload to your MoQuality account for testing.","title":"Building an iOS Native App"},{"location":"getting-started/ios-sim/","text":"Building an iOS Simulator App \u00b6 We test iOS simulator apps and native apps. iOS Simulator App \u00b6 Although it is strongly recommended to test an app on real devices, some developers might want to quickly test their apps on a simulator. Below are the steps you can follow to build your iOS app to run on the iOS Simulator through XCode and the command-line. XCode Workflow \u00b6 Select a iOS simulator target for the project inside XCode. Select the .app file under Products and choose to \"Show in Finder\" to get the file. Alternately, you can also navigate to the output folder, which should be located at ~/Library/Developer/Xcode/DerivedData/<project>/Build/Products/<device> Compress the .app folder to create an archived zip file. You can now upload this zip file to MoQuality for recording tests. CLI Workflow \u00b6 Go into the directory containing your XCode project and use xcodebuild to build the app. xcodebuild -sdk iphonesimulator -configuration Debug Then zip the .app bundle in build/Debug-iphonesimulator zip -r UIKitCatalog.zip UIKitCatalog.app You can now upload this zip file to MoQuality for recording tests.","title":"Building an iOS Simulator App"},{"location":"getting-started/ios-sim/#building-an-ios-simulator-app","text":"We test iOS simulator apps and native apps.","title":"Building an iOS Simulator App"},{"location":"getting-started/ios-sim/#ios-simulator-app","text":"Although it is strongly recommended to test an app on real devices, some developers might want to quickly test their apps on a simulator. Below are the steps you can follow to build your iOS app to run on the iOS Simulator through XCode and the command-line.","title":"iOS Simulator App"},{"location":"getting-started/ios-sim/#xcode-workflow","text":"Select a iOS simulator target for the project inside XCode. Select the .app file under Products and choose to \"Show in Finder\" to get the file. Alternately, you can also navigate to the output folder, which should be located at ~/Library/Developer/Xcode/DerivedData/<project>/Build/Products/<device> Compress the .app folder to create an archived zip file. You can now upload this zip file to MoQuality for recording tests.","title":"XCode Workflow"},{"location":"getting-started/ios-sim/#cli-workflow","text":"Go into the directory containing your XCode project and use xcodebuild to build the app. xcodebuild -sdk iphonesimulator -configuration Debug Then zip the .app bundle in build/Debug-iphonesimulator zip -r UIKitCatalog.zip UIKitCatalog.app You can now upload this zip file to MoQuality for recording tests.","title":"CLI Workflow"},{"location":"getting-started/pushkar/","text":"TODO (PK) \u00b6","title":"TODO (PK)"},{"location":"getting-started/pushkar/#todo-pk","text":"","title":"TODO (PK)"},{"location":"getting-started/scheduling-tests/","text":"Scheduling Tests \u00b6 You will be able to schedule test runs on devices, after you have created tests using MoQuality Recorder, created Test Suites and device groups. Note: The test cases you create adapt to every version of the app you upload. So the test, test suites, and device groups you create show up for every new version. Only the overview page keeps changing because the test report runs on a particular version. Executing Tests \u00b6 Click Overview tab and scroll down to Test Reports section. Click on Run Tests, then the following window would pop-up. Enter the name of the report, select a device group, and select tests/suites you want to run on other devices. Viewing results \u00b6 To view results and reports of the test runs, visit View Results","title":"Scheduling Tests"},{"location":"getting-started/scheduling-tests/#scheduling-tests","text":"You will be able to schedule test runs on devices, after you have created tests using MoQuality Recorder, created Test Suites and device groups. Note: The test cases you create adapt to every version of the app you upload. So the test, test suites, and device groups you create show up for every new version. Only the overview page keeps changing because the test report runs on a particular version.","title":"Scheduling Tests"},{"location":"getting-started/scheduling-tests/#executing-tests","text":"Click Overview tab and scroll down to Test Reports section. Click on Run Tests, then the following window would pop-up. Enter the name of the report, select a device group, and select tests/suites you want to run on other devices.","title":"Executing Tests"},{"location":"getting-started/scheduling-tests/#viewing-results","text":"To view results and reports of the test runs, visit View Results","title":"Viewing results"},{"location":"getting-started/test-suite/","text":"Test Suites \u00b6 A test suite is an ordered sequence of tests . After recording the test cases through the recorder, you can create a Test Suite and schedule it to run on a devie group . Test Suite Example \u00b6 A music app may have several tests related to playlists, therefore a playlist test suite would contain all the test cases related to playlist. Likewise a test suite would contain tests for a music player. Creating a test suite \u00b6 Navigate to the Suites tab and click on the Create Test Suite. Now name the Test Suite and select the tests that you want to run. You can create multiple test suites this way.","title":"Test Suites"},{"location":"getting-started/test-suite/#test-suites","text":"A test suite is an ordered sequence of tests . After recording the test cases through the recorder, you can create a Test Suite and schedule it to run on a devie group .","title":"Test Suites"},{"location":"getting-started/test-suite/#test-suite-example","text":"A music app may have several tests related to playlists, therefore a playlist test suite would contain all the test cases related to playlist. Likewise a test suite would contain tests for a music player.","title":"Test Suite Example"},{"location":"getting-started/test-suite/#creating-a-test-suite","text":"Navigate to the Suites tab and click on the Create Test Suite. Now name the Test Suite and select the tests that you want to run. You can create multiple test suites this way.","title":"Creating a test suite"},{"location":"getting-started/testreport/","text":"Executing Tests and Viewing Test Reports \u00b6 You can reach the Test Reports from the Dashboard by clicking Overview. There are two ways to execute tests and reports: Executing existing tests that have been recorded by MoQuality Recorder. Automatically generating test using MoQuality AI-bot. Executing existing tests \u00b6 Tests recorded by the recorder can be replayed and tested on other devices. Click on Run Tests, then the following window would pop-up. Enter the name of the report, select a device group, and select tests/suites you want to run on other devices. Use Case: \u00b6 Using the MoQuality recorder, you have recorded a login test on Nexus 6p that checks whether login functionality works on Nexus 6p or not. Now you want to test it on a Samsung Galaxy S8. All you have to do is schedule a test run on Samsung Galaxy S8. Ensuring that a new version of your app has all the existing tests running smoothly. Ensuring that a your app has all the existing tests running smoothly on a new version of android/iOS. Click on Run Tests, then the following window would pop-up. Enter the name of the report, select a device group, and select tests/suites you want to run on other devices. Auto-generated Test \u00b6 This feature allows MQ-Bot (our AI Agent) to create tests automatically and executing them on devices a user specify. The MQ-Bot tries to systematically identify widgets on every screen and interacts with them. In the end, it gives you a list of test runs it conducted and a pass or success for each of them. Use Case: \u00b6 In contrast to demonstrating a test and running them, robot test can be used for quick feedback and check cases that you might otherwise miss out.The more you use this feature on your app, the smarter it gets. For example, if the robot finds a bug it prioritizes testing towards creating test runs near the bug. For enterprise customers, the robot learns the context of your app and creates test runs like a human would. In order to automatically generate tests, click on Generate Tests. Now specify the name of the report, number of tests you want to generate and the maximum amount of time MQ-Bot ,should run. For example, if you specify 10 tests to be generated in an hour, than the MQ-Bot will generate approximately 10 tests in an hour. If you specify 30 min instead of an hour, it will still generate the same number of tests, but the tests will be shorter. Viewing Test Reports \u00b6 Each row represents the Test Report created, it's status, suites it ran on, device groups, and the various actions. The status is either a tick signalling that no bugs found, red balloon showing that there are bugs, orange balloon indicating warnings or potential risks or an hour glass indicating that the tests yet to be executed. There are currently two actions available now: View Report \u00b6 It shows the test runs of all the tests in the report across all the selected devices. The report provides the details af tests as well such as if the test was successful along with any bugs. By clicking the view report button you get the details of the test runs. By clicking on the individual test, you can see the screenshots of a test. View map \u00b6 It present a snapshot of the whole app itself. It shows how all the screens are connected with each other and therefore ...","title":"Executing Tests and Viewing Test Reports"},{"location":"getting-started/testreport/#executing-tests-and-viewing-test-reports","text":"You can reach the Test Reports from the Dashboard by clicking Overview. There are two ways to execute tests and reports: Executing existing tests that have been recorded by MoQuality Recorder. Automatically generating test using MoQuality AI-bot.","title":"Executing Tests and Viewing Test Reports"},{"location":"getting-started/testreport/#executing-existing-tests","text":"Tests recorded by the recorder can be replayed and tested on other devices. Click on Run Tests, then the following window would pop-up. Enter the name of the report, select a device group, and select tests/suites you want to run on other devices.","title":"Executing existing tests"},{"location":"getting-started/testreport/#use-case","text":"Using the MoQuality recorder, you have recorded a login test on Nexus 6p that checks whether login functionality works on Nexus 6p or not. Now you want to test it on a Samsung Galaxy S8. All you have to do is schedule a test run on Samsung Galaxy S8. Ensuring that a new version of your app has all the existing tests running smoothly. Ensuring that a your app has all the existing tests running smoothly on a new version of android/iOS. Click on Run Tests, then the following window would pop-up. Enter the name of the report, select a device group, and select tests/suites you want to run on other devices.","title":"Use Case:"},{"location":"getting-started/testreport/#auto-generated-test","text":"This feature allows MQ-Bot (our AI Agent) to create tests automatically and executing them on devices a user specify. The MQ-Bot tries to systematically identify widgets on every screen and interacts with them. In the end, it gives you a list of test runs it conducted and a pass or success for each of them.","title":"Auto-generated Test"},{"location":"getting-started/testreport/#use-case_1","text":"In contrast to demonstrating a test and running them, robot test can be used for quick feedback and check cases that you might otherwise miss out.The more you use this feature on your app, the smarter it gets. For example, if the robot finds a bug it prioritizes testing towards creating test runs near the bug. For enterprise customers, the robot learns the context of your app and creates test runs like a human would. In order to automatically generate tests, click on Generate Tests. Now specify the name of the report, number of tests you want to generate and the maximum amount of time MQ-Bot ,should run. For example, if you specify 10 tests to be generated in an hour, than the MQ-Bot will generate approximately 10 tests in an hour. If you specify 30 min instead of an hour, it will still generate the same number of tests, but the tests will be shorter.","title":"Use Case:"},{"location":"getting-started/testreport/#viewing-test-reports","text":"Each row represents the Test Report created, it's status, suites it ran on, device groups, and the various actions. The status is either a tick signalling that no bugs found, red balloon showing that there are bugs, orange balloon indicating warnings or potential risks or an hour glass indicating that the tests yet to be executed. There are currently two actions available now:","title":"Viewing Test Reports"},{"location":"getting-started/testreport/#view-report","text":"It shows the test runs of all the tests in the report across all the selected devices. The report provides the details af tests as well such as if the test was successful along with any bugs. By clicking the view report button you get the details of the test runs. By clicking on the individual test, you can see the screenshots of a test.","title":"View Report"},{"location":"getting-started/testreport/#view-map","text":"It present a snapshot of the whole app itself. It shows how all the screens are connected with each other and therefore ...","title":"View map"},{"location":"getting-started/upload-app/","text":"Uploading an App \u00b6 Go to app.moquality.com . Click \"ADD APP\". Choose the type of app you would like to add, enter a name and, optionally, a description, and click submit. If you are adding an Android app, choose an APK to upload. If you are adding an iOS app, choose either a .ipa file or a .app directory in a Zip file. If the iOS app in question is a simulator build, make sure to check the \"Is Simulator\" checkbox, or the app will not work correctly. Now what? \u00b6 After uploading an app, a user can either Record tests using the MoQuality Test Recorder and schedule runs of recorded tests to run on multiple devices. Request an auto-generation of tests .","title":"Uploading an App"},{"location":"getting-started/upload-app/#uploading-an-app","text":"Go to app.moquality.com . Click \"ADD APP\". Choose the type of app you would like to add, enter a name and, optionally, a description, and click submit. If you are adding an Android app, choose an APK to upload. If you are adding an iOS app, choose either a .ipa file or a .app directory in a Zip file. If the iOS app in question is a simulator build, make sure to check the \"Is Simulator\" checkbox, or the app will not work correctly.","title":"Uploading an App"},{"location":"getting-started/upload-app/#now-what","text":"After uploading an app, a user can either Record tests using the MoQuality Test Recorder and schedule runs of recorded tests to run on multiple devices. Request an auto-generation of tests .","title":"Now what?"},{"location":"getting-started/view-results/","text":"Viewing Results \u00b6 When a user has either scheduled tests or requested automatically generated tests, reports containing the results, success/failure of a tests, screenshot, various statistics, app maps are automatically generated. In order to view these results, navigate to the Overview page and a following screen shall appear. If a user has not requested any tests, then there is no reporting. Under Test Reports section, each row represents a Test Report, status, suites it ran on, device groups, and the various actions. The status is either a green tick signalling that no bugs found, red balloon showing that there are bugs, orange balloon indicating warnings or potential risks or an hour glass indicating that the tests yet to be executed. There are currently two results available now: View Report \u00b6 It shows the test runs of all the tests in the report across all the selected devices. The report provides the details af tests as well such as if the test was successful along with any bugs. By clicking the view report button you get the details of the test runs. By clicking on the individual test, you can see the screenshots of a test along with the highlighted widget that was clicked. View map \u00b6 It present a snapshot of the whole app itself. It shows how all the screens are connected with each other and therefore is useful in understanding the whole app structure. It aids in coming up with good test cases. For example, if a certain screen is not present in the map, then a user might be interested in creating a test case containing that screen. Such test case can easily be created with MoQuality Recorder with a few clicks.","title":"Test Reports"},{"location":"getting-started/view-results/#viewing-results","text":"When a user has either scheduled tests or requested automatically generated tests, reports containing the results, success/failure of a tests, screenshot, various statistics, app maps are automatically generated. In order to view these results, navigate to the Overview page and a following screen shall appear. If a user has not requested any tests, then there is no reporting. Under Test Reports section, each row represents a Test Report, status, suites it ran on, device groups, and the various actions. The status is either a green tick signalling that no bugs found, red balloon showing that there are bugs, orange balloon indicating warnings or potential risks or an hour glass indicating that the tests yet to be executed. There are currently two results available now:","title":"Viewing Results"},{"location":"getting-started/view-results/#view-report","text":"It shows the test runs of all the tests in the report across all the selected devices. The report provides the details af tests as well such as if the test was successful along with any bugs. By clicking the view report button you get the details of the test runs. By clicking on the individual test, you can see the screenshots of a test along with the highlighted widget that was clicked.","title":"View Report"},{"location":"getting-started/view-results/#view-map","text":"It present a snapshot of the whole app itself. It shows how all the screens are connected with each other and therefore is useful in understanding the whole app structure. It aids in coming up with good test cases. For example, if a certain screen is not present in the map, then a user might be interested in creating a test case containing that screen. Such test case can easily be created with MoQuality Recorder with a few clicks.","title":"View map"},{"location":"getting-started/view-tests/","text":"View Recorded Test Cases \u00b6 To view your recorded tests, navigate to Tests page. If you have not recorded a test yet, download the MoQuality Test Recorder and record your first test. A test consist of a series of actions performed on an app on a device. It is displayed as a series of screenshots which show a highlighted area indicating the action widget. The following page displays all the recorded tests with MoQuality Recorder. By clicking on an individual test, you can see the screenshots of the test.","title":"View tests"},{"location":"getting-started/view-tests/#view-recorded-test-cases","text":"To view your recorded tests, navigate to Tests page. If you have not recorded a test yet, download the MoQuality Test Recorder and record your first test. A test consist of a series of actions performed on an app on a device. It is displayed as a series of screenshots which show a highlighted area indicating the action widget. The following page displays all the recorded tests with MoQuality Recorder. By clicking on an individual test, you can see the screenshots of the test.","title":"View Recorded Test Cases"},{"location":"integration-ci-cd/bitrise/","text":"Integrate with Bitrise \u00b6 Introduction \u00b6 Bitrise is a Continuous Integration and Delivery Platform as a Service. MoQuality integrates with the workflows of Bitrise by adding a step to a workflow. The following instructions outline how to integrate MoQuality with your Bitrise workflow. Prerequisites \u00b6 Bitrise: If you have not yet installed Bitrise, follow the instructions here . MQ CLI: Install the MQ CLI . MoQuality app: If you intend to upload a new build of an app, ensure that you have already uploaded the first version through the MoQuality website . Example Code \u00b6 MoQuality hosts a GitHub repository that contains example code for all of our CI/CD integrations, including Bitrise. You can take advantage of this repository by running the following command in the directory of your choosing. git clone https://github.com/moquality/devcenter.git Instructions \u00b6 Export Several Variables \u00b6 Integrating MoQuality with Bitrise requires that you export several environment variables. The first variable is API_KEY , which will enable user login. To find your API key, run mq login in your command line to log in to MoQuality. Then, run mq user to display user information. Your API key will be in the list of returned information. The next variable is APP_ID . This will specify which app is being uploaded. To find your app Id, log in with mq login and run mq apps to see a list of your apps. Find your app in the list and locate the app Id in the same row. The third variable is APK_PATH , the path to your folder for apk's. Navigate through your file explorer to find this path. See the below command line commands as an example of setting these variables for a Calculator app. export API_KEY =[ OBTAINED_VALUE ] export APP_ID =[ OBTAINED_VALUE ] export APK_PATH = /Users/ [ USERNAME ] /Calculator/app/build/outputs/apk/ Open bitrise.yml \u00b6 Ensure bitrise.yml is in your main directory, and open the file in an editor. Set File Paths \u00b6 In bitrise.yml, there should be environment variables GRADLE_BUILD_FILE_PATH and GRADLEW_PATH . These are the paths to your build.gradle and gradlew files, respectively. You can find these paths using your file explorer. When you know the paths, enter them in bitrise.yml for their respective variables. The below code is an example of how your variables might look. app : envs : - GRADLE_BUILD_FILE_PATH : /Users/[USERNAME]/Calculator/build.gradle - GRADLEW_PATH : /Users/[USERNAME]/Calculator/gradlew Remove Two Steps \u00b6 There are two default workflows in bitrise.yml: deploy and primary. To begin adding a step integrating MoQuality with either of these workflows, remove the last two steps, deploy-to-bitrise-io@1.3.10 and cache-push@2.0.5 . Add MQ CLI Installation Step \u00b6 In place of those steps, add: - script@1.1.5 : title : Install MQ CLI and Upload App to MoQuality inputs : - content : | Fill New Step \u00b6 The lines following content are shell commands. You may create a shell script to run MoQuality commands and run that script in Bitrise by adding sh [script name].sh beneath - content: | , or you can add the MoQuality commands beneath - content: | without a shell script. The following sub-intructions exlain how to install the MQCLI and upload a new build of an app. Again, these commands can either be run through a shell script or placed directly into bitrise.yml. Below are the commands to upload an app to MoQuality: npm install -g mq-cli mq login -a $API_KEY mq user mq upload -a $APP_ID -f $APK_PATH /app-debug.apk mq apps npm install mq-cli installs the MQ CLI. See the MQ CLI documentation for alternative installation commands. mq login -a $API_KEY will log you in using your API key. mq user returns user information, and you can check that your user is correct. mq upload -a $APP_ID -f $APK_PATH/app-debug.apk will upload your app, whose location is provided by $APK_PATH , and the command uses $APP_ID to determine which app is being uploaded. mq apps returns a list of the users apps, and you can confirm that your app version has incremented by one. Completed Step Examples \u00b6 Your new step, integrating MoQuality with Bitrise, should be formatted like one of the two examples below. - script@1.1.5 : title : Install MQ CLI and Upload App to MoQuality inputs : - content : | npm install -g mq-cli mq login -a $API_KEY mq user mq upload -a $APP_ID -f $APK_PATH/app-debug.apk mq apps - script@1.1.5 : title : Install MQ CLI and Upload App to MoQuality inputs : - content : | sh [SCRIPT_NAME].sh Run Workflow \u00b6 In your command line, run bitrise run [WORKFLOW] . Troubleshooting \u00b6 Permission denied when installing MQ CLI \u00b6 Run sudo chown -R [USERNAME] /usr/local/lib/node_modules in your terminal. This will give you permission to write to the node_modules directory. Gradle-runner step fails for task ':app:mergeDebugResources' \u00b6 Don't worry about this error. Run the workflow again, and it should work. Undocumented Error \u00b6 If you encounter an error that is not documented, please open an issue on our public GitHub repository . Alternatively, you can report your error to hello@moquality.com .","title":"Integrate with Bitrise"},{"location":"integration-ci-cd/bitrise/#integrate-with-bitrise","text":"","title":"Integrate with Bitrise"},{"location":"integration-ci-cd/bitrise/#introduction","text":"Bitrise is a Continuous Integration and Delivery Platform as a Service. MoQuality integrates with the workflows of Bitrise by adding a step to a workflow. The following instructions outline how to integrate MoQuality with your Bitrise workflow.","title":"Introduction"},{"location":"integration-ci-cd/bitrise/#prerequisites","text":"Bitrise: If you have not yet installed Bitrise, follow the instructions here . MQ CLI: Install the MQ CLI . MoQuality app: If you intend to upload a new build of an app, ensure that you have already uploaded the first version through the MoQuality website .","title":"Prerequisites"},{"location":"integration-ci-cd/bitrise/#example-code","text":"MoQuality hosts a GitHub repository that contains example code for all of our CI/CD integrations, including Bitrise. You can take advantage of this repository by running the following command in the directory of your choosing. git clone https://github.com/moquality/devcenter.git","title":"Example Code"},{"location":"integration-ci-cd/bitrise/#instructions","text":"","title":"Instructions"},{"location":"integration-ci-cd/bitrise/#export-several-variables","text":"Integrating MoQuality with Bitrise requires that you export several environment variables. The first variable is API_KEY , which will enable user login. To find your API key, run mq login in your command line to log in to MoQuality. Then, run mq user to display user information. Your API key will be in the list of returned information. The next variable is APP_ID . This will specify which app is being uploaded. To find your app Id, log in with mq login and run mq apps to see a list of your apps. Find your app in the list and locate the app Id in the same row. The third variable is APK_PATH , the path to your folder for apk's. Navigate through your file explorer to find this path. See the below command line commands as an example of setting these variables for a Calculator app. export API_KEY =[ OBTAINED_VALUE ] export APP_ID =[ OBTAINED_VALUE ] export APK_PATH = /Users/ [ USERNAME ] /Calculator/app/build/outputs/apk/","title":"Export Several Variables"},{"location":"integration-ci-cd/bitrise/#open-bitriseyml","text":"Ensure bitrise.yml is in your main directory, and open the file in an editor.","title":"Open bitrise.yml"},{"location":"integration-ci-cd/bitrise/#set-file-paths","text":"In bitrise.yml, there should be environment variables GRADLE_BUILD_FILE_PATH and GRADLEW_PATH . These are the paths to your build.gradle and gradlew files, respectively. You can find these paths using your file explorer. When you know the paths, enter them in bitrise.yml for their respective variables. The below code is an example of how your variables might look. app : envs : - GRADLE_BUILD_FILE_PATH : /Users/[USERNAME]/Calculator/build.gradle - GRADLEW_PATH : /Users/[USERNAME]/Calculator/gradlew","title":"Set File Paths"},{"location":"integration-ci-cd/bitrise/#remove-two-steps","text":"There are two default workflows in bitrise.yml: deploy and primary. To begin adding a step integrating MoQuality with either of these workflows, remove the last two steps, deploy-to-bitrise-io@1.3.10 and cache-push@2.0.5 .","title":"Remove Two Steps"},{"location":"integration-ci-cd/bitrise/#add-mq-cli-installation-step","text":"In place of those steps, add: - script@1.1.5 : title : Install MQ CLI and Upload App to MoQuality inputs : - content : |","title":"Add MQ CLI Installation Step"},{"location":"integration-ci-cd/bitrise/#fill-new-step","text":"The lines following content are shell commands. You may create a shell script to run MoQuality commands and run that script in Bitrise by adding sh [script name].sh beneath - content: | , or you can add the MoQuality commands beneath - content: | without a shell script. The following sub-intructions exlain how to install the MQCLI and upload a new build of an app. Again, these commands can either be run through a shell script or placed directly into bitrise.yml. Below are the commands to upload an app to MoQuality: npm install -g mq-cli mq login -a $API_KEY mq user mq upload -a $APP_ID -f $APK_PATH /app-debug.apk mq apps npm install mq-cli installs the MQ CLI. See the MQ CLI documentation for alternative installation commands. mq login -a $API_KEY will log you in using your API key. mq user returns user information, and you can check that your user is correct. mq upload -a $APP_ID -f $APK_PATH/app-debug.apk will upload your app, whose location is provided by $APK_PATH , and the command uses $APP_ID to determine which app is being uploaded. mq apps returns a list of the users apps, and you can confirm that your app version has incremented by one.","title":"Fill New Step"},{"location":"integration-ci-cd/bitrise/#completed-step-examples","text":"Your new step, integrating MoQuality with Bitrise, should be formatted like one of the two examples below. - script@1.1.5 : title : Install MQ CLI and Upload App to MoQuality inputs : - content : | npm install -g mq-cli mq login -a $API_KEY mq user mq upload -a $APP_ID -f $APK_PATH/app-debug.apk mq apps - script@1.1.5 : title : Install MQ CLI and Upload App to MoQuality inputs : - content : | sh [SCRIPT_NAME].sh","title":"Completed Step Examples"},{"location":"integration-ci-cd/bitrise/#run-workflow","text":"In your command line, run bitrise run [WORKFLOW] .","title":"Run Workflow"},{"location":"integration-ci-cd/bitrise/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"integration-ci-cd/bitrise/#permission-denied-when-installing-mq-cli","text":"Run sudo chown -R [USERNAME] /usr/local/lib/node_modules in your terminal. This will give you permission to write to the node_modules directory.","title":"Permission denied when installing MQ CLI"},{"location":"integration-ci-cd/bitrise/#gradle-runner-step-fails-for-task-appmergedebugresources","text":"Don't worry about this error. Run the workflow again, and it should work.","title":"Gradle-runner step fails for task ':app:mergeDebugResources'"},{"location":"integration-ci-cd/bitrise/#undocumented-error","text":"If you encounter an error that is not documented, please open an issue on our public GitHub repository . Alternatively, you can report your error to hello@moquality.com .","title":"Undocumented Error"},{"location":"integration-ci-cd/circleci/","text":"Integrate with CircleCI \u00b6 Introduction \u00b6 CircleCI is a Continuous Integration and Continuous Delivery platform that allows developers to automate the build, test, and deployment of software for mobile, enterprise, and web applications. MoQuality integrates with CircleCI by simply adding a step to a job. This step enables devleopers to use MQ CLI within their container. The following instructions walk through how to integrate MoQuality with CircleCI. Prerequisites \u00b6 CircleCI: If you have not yet installed CircleCI, follow the instructions here . MQ CLI: Install the MQ CLI . MoQuality app: If you intend to upload a new build of an app using MQ CLI, ensure that you have already uploaded the first version through the MoQuality website . Example Code \u00b6 MoQuality hosts a GitHub repository that contains example code for all of our CI/CD integrations, including CircleCI. You can take advantage of this repository by running the following command in the directory of your choosing. git clone https://github.com/moquality/devcenter.git Instructions \u00b6 Open config.yml \u00b6 Open your config.yml file in an editor. Add Installation Step \u00b6 Under steps: in your job, add a run step called Install mq-cli by using name: . Beneath name: , add command: | . This indicates that you are going to issue multiple lines of commands. Your step should look like the below. - run : name : Install MQ CLI command : | Add Commands to Step \u00b6 There are four commands you must run to install MQ CLI within your container. The first two are curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash - and sudo apt-get install -y nodejs . These commands are based off of these instructions for installing Nodejs via a package manager. Installing Nodejs enables the use of npm commands, which will be necessary for installing MQ CLI. The third command to run is sudo chown -R $(whoami) /usr/lib/node_modules /usr/bin . This command will give the user write permissions to two directories whose write permissions are necessary for the installation of MQ CLI. Finally, the command npm install -g mq-cli installs MQ CLI. You have now created the step that installs MQ CLI and enables MQ CLI commands within your container. Your step should look like the below. - run : name : Install MQ CLI command : | curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash - sudo apt-get install -y nodejs sudo chown -R $(whoami) /usr/lib/node_modules /usr/bin npm install -g mq-cli Add Login and Upload Step \u00b6 Now that you have access to MQ CLI commands, you can create a subsequent step of your own to perform a task with these commands. The following sub-instructions breakdown how to write a step that uploads your app to MoQuality using MQ CLI commands. - run : name : Login and Upload to MoQuality command : | mq login -a [API_KEY] mq user mq upload -f [APK_PATH] -a [APP_ID] mq apps The first two lines create a step called Upload to MoQuality . As before, the line command: | indicates that you are going to issue multiple lines of commands. mq login -a [API_KEY] logs you in using your API key. Your API key uniquely identifies your account. To find your API key, run mq login in your command line and follow the prompts to log in to your account. Next, run mq user to display user information. Your API key will be in the list of returned information. mq user returns user information, and you can check that your user is correct. mq upload -f [APK_PATH] -a [APP_ID] will upload your app, whose location is provided by [APK_PATH] , the path to your apk file. The command uses [APP_ID] to determine which app is being uploaded. Your app Id uniquely identifies your app. To find your app Id, log in with mq login and run mq apps to see a list of your apps. Find your app in the list and locate the app Id in the same row. mq apps returns a list of your apps, and you can confirm that your app version has incremented by one. Run the Build \u00b6 Now that you have created new steps, integrating MoQuality with CircleCI, run circleci build in your command line to run the build job. If you added the steps within a job other than build, add the --job option followed by the name of the job to the circleci build command. Notes \u00b6 We do not recommend running the commands to install MQ CLI within a docker image and saving that image for future use. If you do so, and updates to MQ CLI are released, your docker image will not be using them. It is best to install MQ CLI every time you run the workflow, so you are always using the most up-to-date version of MQ CLI. This is what was done within the instructions. Troubleshooting \u00b6 Write permissions error when installing MQ CLI \u00b6 Read the error to find the directory to which you cannot write. Add the path of that directory to your sudo chown -R $(whoami) /usr/lib/node_modules /usr/bin command. The command will then look like sudo chown -R $(whoami) /usr/lib/node_modules /usr/bin [DIRECTORY_PATH] . Undocumented Error \u00b6 If you encounter an error that is not documented, please open an issue on our public GitHub repository . Alternatively, you can report your error to hello@moquality.com .","title":"Integrate with CircleCI"},{"location":"integration-ci-cd/circleci/#integrate-with-circleci","text":"","title":"Integrate with CircleCI"},{"location":"integration-ci-cd/circleci/#introduction","text":"CircleCI is a Continuous Integration and Continuous Delivery platform that allows developers to automate the build, test, and deployment of software for mobile, enterprise, and web applications. MoQuality integrates with CircleCI by simply adding a step to a job. This step enables devleopers to use MQ CLI within their container. The following instructions walk through how to integrate MoQuality with CircleCI.","title":"Introduction"},{"location":"integration-ci-cd/circleci/#prerequisites","text":"CircleCI: If you have not yet installed CircleCI, follow the instructions here . MQ CLI: Install the MQ CLI . MoQuality app: If you intend to upload a new build of an app using MQ CLI, ensure that you have already uploaded the first version through the MoQuality website .","title":"Prerequisites"},{"location":"integration-ci-cd/circleci/#example-code","text":"MoQuality hosts a GitHub repository that contains example code for all of our CI/CD integrations, including CircleCI. You can take advantage of this repository by running the following command in the directory of your choosing. git clone https://github.com/moquality/devcenter.git","title":"Example Code"},{"location":"integration-ci-cd/circleci/#instructions","text":"","title":"Instructions"},{"location":"integration-ci-cd/circleci/#open-configyml","text":"Open your config.yml file in an editor.","title":"Open config.yml"},{"location":"integration-ci-cd/circleci/#add-installation-step","text":"Under steps: in your job, add a run step called Install mq-cli by using name: . Beneath name: , add command: | . This indicates that you are going to issue multiple lines of commands. Your step should look like the below. - run : name : Install MQ CLI command : |","title":"Add Installation Step"},{"location":"integration-ci-cd/circleci/#add-commands-to-step","text":"There are four commands you must run to install MQ CLI within your container. The first two are curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash - and sudo apt-get install -y nodejs . These commands are based off of these instructions for installing Nodejs via a package manager. Installing Nodejs enables the use of npm commands, which will be necessary for installing MQ CLI. The third command to run is sudo chown -R $(whoami) /usr/lib/node_modules /usr/bin . This command will give the user write permissions to two directories whose write permissions are necessary for the installation of MQ CLI. Finally, the command npm install -g mq-cli installs MQ CLI. You have now created the step that installs MQ CLI and enables MQ CLI commands within your container. Your step should look like the below. - run : name : Install MQ CLI command : | curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash - sudo apt-get install -y nodejs sudo chown -R $(whoami) /usr/lib/node_modules /usr/bin npm install -g mq-cli","title":"Add Commands to Step"},{"location":"integration-ci-cd/circleci/#add-login-and-upload-step","text":"Now that you have access to MQ CLI commands, you can create a subsequent step of your own to perform a task with these commands. The following sub-instructions breakdown how to write a step that uploads your app to MoQuality using MQ CLI commands. - run : name : Login and Upload to MoQuality command : | mq login -a [API_KEY] mq user mq upload -f [APK_PATH] -a [APP_ID] mq apps The first two lines create a step called Upload to MoQuality . As before, the line command: | indicates that you are going to issue multiple lines of commands. mq login -a [API_KEY] logs you in using your API key. Your API key uniquely identifies your account. To find your API key, run mq login in your command line and follow the prompts to log in to your account. Next, run mq user to display user information. Your API key will be in the list of returned information. mq user returns user information, and you can check that your user is correct. mq upload -f [APK_PATH] -a [APP_ID] will upload your app, whose location is provided by [APK_PATH] , the path to your apk file. The command uses [APP_ID] to determine which app is being uploaded. Your app Id uniquely identifies your app. To find your app Id, log in with mq login and run mq apps to see a list of your apps. Find your app in the list and locate the app Id in the same row. mq apps returns a list of your apps, and you can confirm that your app version has incremented by one.","title":"Add Login and Upload Step"},{"location":"integration-ci-cd/circleci/#run-the-build","text":"Now that you have created new steps, integrating MoQuality with CircleCI, run circleci build in your command line to run the build job. If you added the steps within a job other than build, add the --job option followed by the name of the job to the circleci build command.","title":"Run the Build"},{"location":"integration-ci-cd/circleci/#notes","text":"We do not recommend running the commands to install MQ CLI within a docker image and saving that image for future use. If you do so, and updates to MQ CLI are released, your docker image will not be using them. It is best to install MQ CLI every time you run the workflow, so you are always using the most up-to-date version of MQ CLI. This is what was done within the instructions.","title":"Notes"},{"location":"integration-ci-cd/circleci/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"integration-ci-cd/circleci/#write-permissions-error-when-installing-mq-cli","text":"Read the error to find the directory to which you cannot write. Add the path of that directory to your sudo chown -R $(whoami) /usr/lib/node_modules /usr/bin command. The command will then look like sudo chown -R $(whoami) /usr/lib/node_modules /usr/bin [DIRECTORY_PATH] .","title":"Write permissions error when installing MQ CLI"},{"location":"integration-ci-cd/circleci/#undocumented-error","text":"If you encounter an error that is not documented, please open an issue on our public GitHub repository . Alternatively, you can report your error to hello@moquality.com .","title":"Undocumented Error"},{"location":"integration-ci-cd/dockerfile/","text":"Custom Docker Images \u00b6 Introduction \u00b6 A source of difficulty when developing applications is creating the perfect environment on one's machine to run said application. However, by using Docker, you can set up the perfect environment to run your application. Dockerfiles define the environment within a container, a runtime instance of an image. An image is an executable package that cointains an application's code, runtime, libraries, environment variables, and configuration files. A Dockerfile can use an image, such as Ubuntu, and define the environment on top of the image. Thus, we can run an app in, for example, an Ubuntu container with all the necessary dependencies installed, as defined in our Dockerfile. These instructions follow the creation of a Dockerfile for testing a calculator app, available [here], and are based off of this Docker documentation. Prerequisites \u00b6 Docker: Install your preferred version of Docker here and use the official Docker getting started guide to familiarize yourself with Docker. Docker account: Set up a Docker account here . Create a Custom Docker Image \u00b6 Create Empty Directory \u00b6 Create an empty directory and navigate into that directory within your command line. cd [ EMPTY_DIRECTORY ] Create Dockerfile \u00b6 Within that directory, create a file called Dockerfile . This is where you will define the environment of your container. Open Dockerfile \u00b6 Open Dockerfile in an editor of your choice. Fill Dockerfile \u00b6 Fill the Dockerfile while following the format below. A very short example Dockerfile is beneath the format. The FROM instruction initializes a new build stage and sets the base image. The RUN instruction runs a command within our docker container. For more reference on instructions and information on Docker syntax, click here . Format \u00b6 # Comment INSTRUCTION arguments Example \u00b6 #Use an official Ubuntu runtime as a parent image FROM ubuntu #Say hello RUN echo \"Hello world!\" Build Image \u00b6 Now that you have a Dockerfile with instructions, it's time to build your image. Run the below command, inserting your own tag for the image. Note the period after the image tag . docker build -t [ LOCAL_IMAGE_TAG ] . Confirm Image Existence \u00b6 Once your image is done building, you can confirm that it is in your machine\u2019s local Docker image registry with the below command. docker image ls Log in to Docker \u00b6 To share your image, log in to docker with the below command. docker login Tag Image \u00b6 Before uploading your image, you should give it a tag for Docker Hub using the following command. An example of a repository name and tag could be dockertesting:latest . If no tag is given, Docker will tag the image with latest by default. docker tag [ LOCAL_IMAGE_TAG ] [ DOCKER_USERNAME ] / [ REPOSITORY_NAME ] : [ TAG ] Publish Image \u00b6 Publish the image with below command. docker push [ DOCKER_USERNAME ] / [ REPOSITORY_NAME ] : [ TAG ] Now your image is accessible from online and can be pulled at any time. The next set of instructions explain how you can use your Docker image in CircleCI. CircleCI and Custom Docker Images \u00b6 CircleCI supports the use of custom Docker images, and the CircleCI documentation on customizing Docker images for CircleCI can be found here . Add Docker Image to Job \u00b6 If you have built and pushed a custom Docker image, you can use it in your CircleCI job by adding the image path to the Docker executor in your job. job : build : docker : - image : [ DOCKER_USERNAME ] /[REPOSITORY_NAME]:[TAG] The information in brackets can be found by visiting your image on Docker Hub and selecting your repository. The Docker pull command will be on the repository page, and you can find your tag under the Tags tab. CircleCI Image as Base Image \u00b6 You can also build your custom Docker image on top of a CirlceCI image. Say you want to use the circleci/android:api-25-alpha image, but you need to add more dependencies. You can create a Dockerfile and begin it with the following. FROM circleci/android:api-25-alpha Now you can add your instructions to set up an environment within a CircleCI container. The next section breaks down an exmaple Docker image used with CircleCI to build and upload an app to MoQuality. CircleCI and Custom Docker Image for MoQuality App \u00b6 MoQuality has created a Github repository with all the necessary files to build and upload a calculator app to MoQuality by using CircleCI and a custom Dockerfile. Our Dockerfile uses Ubuntu as our parent image and installs dependencies such as Gradle to build the app. The Docker image path is jragonemq/mqubuntutest:latest . Before beginning, create an app on MoQuality that you can use to test the upload properties of this build. It does not matter what apk file you upload upon creation of the app. MoQuality's Example Dockerfile \u00b6 The following is the code behind the jragonemq/mqubuntutest:latest Dockerfile. This creates an environment for running the calculator app on top of an Ubuntu parent image. We are essentially filling a fresh Ubuntu container with our dependencies. The comments explain what each set of instructions is doing. However, understanding each instruction is less important than understanding what these instructions accomplish holistically: they build the environment. #Use an official Ubuntu runtime as a parent image FROM ubuntu #Set user to root USER root #Update apt-get and install dependencies RUN apt-get -y update && apt-get install -y wget bzip2 unzip gcc nodejs npm openjdk-8-jdk git sudo curl #Install Gradle RUN wget https://services.gradle.org/distributions/gradle-4.1-bin.zip RUN mkdir /opt/gradle RUN unzip -d /opt/gradle gradle-4.1-bin.zip #Define environment variable ENV PATH=$PATH:/opt/gradle/gradle-4.1/bin RUN gradle -v #Install Android tools for sdkmanager RUN mkdir /android-sdk RUN wget https://dl.google.com/android/repository/sdk-tools-darwin-3859397.zip RUN unzip -d /android-sdk sdk-tools*.zip ENV ANDROID_HOME=/android-sdk ENV PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/tools/platform-tools:$ANDROID_HOME/build-tools/26.0.2 #Accept all licenses and install dependencies RUN yes | sdkmanager --licenses RUN sdkmanager \"platforms;android-22\" RUN sdkmanager \"build-tools;26.0.2\" #Copy Android COPY android-8.0.0 android ENV PATH=\"/android:$PATH\" Create Empty Directory for Git Repo \u00b6 Create an empty directory and cd into it. cd [ EMPTY_DIRECTORY ] Clone MoQuality Repository \u00b6 Clone MoQuality's example repository using git clone . git clone https://github.com/moquality/plugins.git config.yml Contents \u00b6 Within the hidden .circleci folder is the config.yml file. In this file are steps which build the app using gradle build , install the mq-cli , and login and upload the app to MoQuality . version : 2 jobs : build : docker : - image : jragonemq/mqubuntutest:latest environment : JVM_OPTS : -Xmx3200m steps : - checkout - run : name : Build app command : gradle build - run : name : Install mq-cli command : | curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash - sudo apt-get install -y nodejs sudo chown -R $(whoami) /usr/lib/node_modules /usr/bin npm -g config set user root npm install -g mq-cli - run : name : Login and Upload to MoQuality command : | mq login -a [API_KEY] mq user mq upload -f app/build/outputs/apk/debug/app-debug.apk -a [APP_ID] mq apps Edit config.yml \u00b6 By the mq login and mq upload commands, highlighted above, fill in [API_KEY] and [APP_ID] with the API key of your account and app Id of your app, respectively. To find your API key, run mq login in your command line and follow the prompts to log in to your account. Next, run mq user to display user information. Your API key will be in the list of returned information. To find your app Id, log in with mq login and run mq apps to see a list of your apps. Find your app in the list and locate the app Id in the same row. Using the above instructions and CircleCI MQ CLI integration documentation , we have created our own custom Dockerfile, integrated it with CircleCI, and integrated CircleCI with MoQuality. Troublshooting \u00b6 Undocumented Error \u00b6 If you encounter an error that is not documented, please open an issue on our public GitHub repository . Alternatively, you can report your error to hello@moquality.com .","title":"Custom Docker Images"},{"location":"integration-ci-cd/dockerfile/#custom-docker-images","text":"","title":"Custom Docker Images"},{"location":"integration-ci-cd/dockerfile/#introduction","text":"A source of difficulty when developing applications is creating the perfect environment on one's machine to run said application. However, by using Docker, you can set up the perfect environment to run your application. Dockerfiles define the environment within a container, a runtime instance of an image. An image is an executable package that cointains an application's code, runtime, libraries, environment variables, and configuration files. A Dockerfile can use an image, such as Ubuntu, and define the environment on top of the image. Thus, we can run an app in, for example, an Ubuntu container with all the necessary dependencies installed, as defined in our Dockerfile. These instructions follow the creation of a Dockerfile for testing a calculator app, available [here], and are based off of this Docker documentation.","title":"Introduction"},{"location":"integration-ci-cd/dockerfile/#prerequisites","text":"Docker: Install your preferred version of Docker here and use the official Docker getting started guide to familiarize yourself with Docker. Docker account: Set up a Docker account here .","title":"Prerequisites"},{"location":"integration-ci-cd/dockerfile/#create-a-custom-docker-image","text":"","title":"Create a Custom Docker Image"},{"location":"integration-ci-cd/dockerfile/#create-empty-directory","text":"Create an empty directory and navigate into that directory within your command line. cd [ EMPTY_DIRECTORY ]","title":"Create Empty Directory"},{"location":"integration-ci-cd/dockerfile/#create-dockerfile","text":"Within that directory, create a file called Dockerfile . This is where you will define the environment of your container.","title":"Create Dockerfile"},{"location":"integration-ci-cd/dockerfile/#open-dockerfile","text":"Open Dockerfile in an editor of your choice.","title":"Open Dockerfile"},{"location":"integration-ci-cd/dockerfile/#fill-dockerfile","text":"Fill the Dockerfile while following the format below. A very short example Dockerfile is beneath the format. The FROM instruction initializes a new build stage and sets the base image. The RUN instruction runs a command within our docker container. For more reference on instructions and information on Docker syntax, click here .","title":"Fill Dockerfile"},{"location":"integration-ci-cd/dockerfile/#format","text":"# Comment INSTRUCTION arguments","title":"Format"},{"location":"integration-ci-cd/dockerfile/#example","text":"#Use an official Ubuntu runtime as a parent image FROM ubuntu #Say hello RUN echo \"Hello world!\"","title":"Example"},{"location":"integration-ci-cd/dockerfile/#build-image","text":"Now that you have a Dockerfile with instructions, it's time to build your image. Run the below command, inserting your own tag for the image. Note the period after the image tag . docker build -t [ LOCAL_IMAGE_TAG ] .","title":"Build Image"},{"location":"integration-ci-cd/dockerfile/#confirm-image-existence","text":"Once your image is done building, you can confirm that it is in your machine\u2019s local Docker image registry with the below command. docker image ls","title":"Confirm Image Existence"},{"location":"integration-ci-cd/dockerfile/#log-in-to-docker","text":"To share your image, log in to docker with the below command. docker login","title":"Log in to Docker"},{"location":"integration-ci-cd/dockerfile/#tag-image","text":"Before uploading your image, you should give it a tag for Docker Hub using the following command. An example of a repository name and tag could be dockertesting:latest . If no tag is given, Docker will tag the image with latest by default. docker tag [ LOCAL_IMAGE_TAG ] [ DOCKER_USERNAME ] / [ REPOSITORY_NAME ] : [ TAG ]","title":"Tag Image"},{"location":"integration-ci-cd/dockerfile/#publish-image","text":"Publish the image with below command. docker push [ DOCKER_USERNAME ] / [ REPOSITORY_NAME ] : [ TAG ] Now your image is accessible from online and can be pulled at any time. The next set of instructions explain how you can use your Docker image in CircleCI.","title":"Publish Image"},{"location":"integration-ci-cd/dockerfile/#circleci-and-custom-docker-images","text":"CircleCI supports the use of custom Docker images, and the CircleCI documentation on customizing Docker images for CircleCI can be found here .","title":"CircleCI and Custom Docker Images"},{"location":"integration-ci-cd/dockerfile/#add-docker-image-to-job","text":"If you have built and pushed a custom Docker image, you can use it in your CircleCI job by adding the image path to the Docker executor in your job. job : build : docker : - image : [ DOCKER_USERNAME ] /[REPOSITORY_NAME]:[TAG] The information in brackets can be found by visiting your image on Docker Hub and selecting your repository. The Docker pull command will be on the repository page, and you can find your tag under the Tags tab.","title":"Add Docker Image to Job"},{"location":"integration-ci-cd/dockerfile/#circleci-image-as-base-image","text":"You can also build your custom Docker image on top of a CirlceCI image. Say you want to use the circleci/android:api-25-alpha image, but you need to add more dependencies. You can create a Dockerfile and begin it with the following. FROM circleci/android:api-25-alpha Now you can add your instructions to set up an environment within a CircleCI container. The next section breaks down an exmaple Docker image used with CircleCI to build and upload an app to MoQuality.","title":"CircleCI Image as Base Image"},{"location":"integration-ci-cd/dockerfile/#circleci-and-custom-docker-image-for-moquality-app","text":"MoQuality has created a Github repository with all the necessary files to build and upload a calculator app to MoQuality by using CircleCI and a custom Dockerfile. Our Dockerfile uses Ubuntu as our parent image and installs dependencies such as Gradle to build the app. The Docker image path is jragonemq/mqubuntutest:latest . Before beginning, create an app on MoQuality that you can use to test the upload properties of this build. It does not matter what apk file you upload upon creation of the app.","title":"CircleCI and Custom Docker Image for MoQuality App"},{"location":"integration-ci-cd/dockerfile/#moqualitys-example-dockerfile","text":"The following is the code behind the jragonemq/mqubuntutest:latest Dockerfile. This creates an environment for running the calculator app on top of an Ubuntu parent image. We are essentially filling a fresh Ubuntu container with our dependencies. The comments explain what each set of instructions is doing. However, understanding each instruction is less important than understanding what these instructions accomplish holistically: they build the environment. #Use an official Ubuntu runtime as a parent image FROM ubuntu #Set user to root USER root #Update apt-get and install dependencies RUN apt-get -y update && apt-get install -y wget bzip2 unzip gcc nodejs npm openjdk-8-jdk git sudo curl #Install Gradle RUN wget https://services.gradle.org/distributions/gradle-4.1-bin.zip RUN mkdir /opt/gradle RUN unzip -d /opt/gradle gradle-4.1-bin.zip #Define environment variable ENV PATH=$PATH:/opt/gradle/gradle-4.1/bin RUN gradle -v #Install Android tools for sdkmanager RUN mkdir /android-sdk RUN wget https://dl.google.com/android/repository/sdk-tools-darwin-3859397.zip RUN unzip -d /android-sdk sdk-tools*.zip ENV ANDROID_HOME=/android-sdk ENV PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/tools/platform-tools:$ANDROID_HOME/build-tools/26.0.2 #Accept all licenses and install dependencies RUN yes | sdkmanager --licenses RUN sdkmanager \"platforms;android-22\" RUN sdkmanager \"build-tools;26.0.2\" #Copy Android COPY android-8.0.0 android ENV PATH=\"/android:$PATH\"","title":"MoQuality's Example Dockerfile"},{"location":"integration-ci-cd/dockerfile/#create-empty-directory-for-git-repo","text":"Create an empty directory and cd into it. cd [ EMPTY_DIRECTORY ]","title":"Create Empty Directory for Git Repo"},{"location":"integration-ci-cd/dockerfile/#clone-moquality-repository","text":"Clone MoQuality's example repository using git clone . git clone https://github.com/moquality/plugins.git","title":"Clone MoQuality Repository"},{"location":"integration-ci-cd/dockerfile/#configyml-contents","text":"Within the hidden .circleci folder is the config.yml file. In this file are steps which build the app using gradle build , install the mq-cli , and login and upload the app to MoQuality . version : 2 jobs : build : docker : - image : jragonemq/mqubuntutest:latest environment : JVM_OPTS : -Xmx3200m steps : - checkout - run : name : Build app command : gradle build - run : name : Install mq-cli command : | curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash - sudo apt-get install -y nodejs sudo chown -R $(whoami) /usr/lib/node_modules /usr/bin npm -g config set user root npm install -g mq-cli - run : name : Login and Upload to MoQuality command : | mq login -a [API_KEY] mq user mq upload -f app/build/outputs/apk/debug/app-debug.apk -a [APP_ID] mq apps","title":"config.yml Contents"},{"location":"integration-ci-cd/dockerfile/#edit-configyml","text":"By the mq login and mq upload commands, highlighted above, fill in [API_KEY] and [APP_ID] with the API key of your account and app Id of your app, respectively. To find your API key, run mq login in your command line and follow the prompts to log in to your account. Next, run mq user to display user information. Your API key will be in the list of returned information. To find your app Id, log in with mq login and run mq apps to see a list of your apps. Find your app in the list and locate the app Id in the same row. Using the above instructions and CircleCI MQ CLI integration documentation , we have created our own custom Dockerfile, integrated it with CircleCI, and integrated CircleCI with MoQuality.","title":"Edit config.yml"},{"location":"integration-ci-cd/dockerfile/#troublshooting","text":"","title":"Troublshooting"},{"location":"integration-ci-cd/dockerfile/#undocumented-error","text":"If you encounter an error that is not documented, please open an issue on our public GitHub repository . Alternatively, you can report your error to hello@moquality.com .","title":"Undocumented Error"},{"location":"integration-ci-cd/fastlane/","text":"Integrate with fastlane \u00b6 Introduction \u00b6 fastlane is a Continuous Integration and Continuous Delivery tool for iOS and Android apps. MoQuality integrates with fastlane through the simple addition of a step to a lane. Prerequisites \u00b6 fastlane : If you have not yet installed fastlane , follow the instructions here . MQ CLI: Install the MQ CLI . MoQuality app: If you intend to upload a new build of an app, ensure that you have already uploaded the first version through the MoQuality website . Example Code \u00b6 MoQuality hosts a GitHub repository that contains example code for all of our CI/CD integrations, including fastlane . You can take advantage of this repository by running the following command in the directory of your choosing. git clone https://github.com/moquality/devcenter.git Instructions \u00b6 To integrate MoQuality with fastlane , you will add a step to your lane that runs a shell script containing your MQ CLI commands. For this documentation, we will call that script mq.sh , but you can call it whatever you wish. Set Environment Variables \u00b6 There are two environment variables that you must set. The first variable is API_KEY , which will enable user login. To find your API key, run mq login in your command line to log in to MoQuality. Then, run mq user to display user information. Your API key will be in the list of returned information. The second variable is APP_ID . This will specify which app is being uploaded. To find your app Id, log in with mq login and run mq apps to see a list of your apps. Find your app in the list and locate the app Id in the same row. Run the below example commands in your command line to set these environment variables. export API_KEY =[ OBTAINED_VALUE ] export APP_ID =[ OBTAINED_VALUE ] Create Shell Script \u00b6 Create a shell script in the same directory as your Fastfile called mq.sh . Open that shell script in an editor. This shell script will contain the MQ CLI commands that your new step will run. Before writing that step, we will write the shell script. The next section follows the creation of a shell script to upload an apk file built using Gradle, to MoQuality. #!/bin/sh npm install -g mq-cli mq login -a $API_KEY mq user mq upload -a $APP_ID -f $1 mq apps npm install mq-cli installs the MQ CLI. See the MQ CLI documentation for alternative installation commands. mq login -a $API_KEY logs you in using your API key. mq user returns user information, and you can check that your user is correct. mq upload -a $APP_ID -f $1 will upload your app, whose location is provided by $1 , the apk file's path that will be passed as an argument during execution. The command uses $APP_ID to determine which app is being uploaded. mq apps returns a list of your apps, and you can confirm that your app version has incremented by one. Edit Fastfile \u00b6 Open your Fastfile in an editor. Find the lane to which you want to add the MoQuality step. If you build your app in this lane, make sure you add the new step after the app has been built. Below is an example lane before the step has been added. lane :beta do gradle ( task : \"clean assembleDebug\" ) end Add Shell Method to Fastfile \u00b6 Add a shell method that runs your shell script to the lane. If you are following the example upload script, pass as an argument to the script the output variable from the Gradle step that provides the apk path. Below is the updated example lane. lane :beta do gradle ( task : \"clean assembleDebug\" ) sh ( \u201c sh \u201d , \u201d mqtest . sh \u201d , \" #{ lane_context [ SharedValues :: GRADLE_APK_OUTPUT_PATH ] } \" ) end Run the Lane \u00b6 Now that you have integrated MoQuality with fastlane , try running the lane with fastlane [LANE_NAME] in your command line. Troubleshooting \u00b6 Undocumented Error \u00b6 If you encounter an error that is not documented, please open an issue on our public GitHub repository . Alternatively, you can report your error to hello@moquality.com .","title":"Integrate with fastlane"},{"location":"integration-ci-cd/fastlane/#integrate-with-fastlane","text":"","title":"Integrate with fastlane"},{"location":"integration-ci-cd/fastlane/#introduction","text":"fastlane is a Continuous Integration and Continuous Delivery tool for iOS and Android apps. MoQuality integrates with fastlane through the simple addition of a step to a lane.","title":"Introduction"},{"location":"integration-ci-cd/fastlane/#prerequisites","text":"fastlane : If you have not yet installed fastlane , follow the instructions here . MQ CLI: Install the MQ CLI . MoQuality app: If you intend to upload a new build of an app, ensure that you have already uploaded the first version through the MoQuality website .","title":"Prerequisites"},{"location":"integration-ci-cd/fastlane/#example-code","text":"MoQuality hosts a GitHub repository that contains example code for all of our CI/CD integrations, including fastlane . You can take advantage of this repository by running the following command in the directory of your choosing. git clone https://github.com/moquality/devcenter.git","title":"Example Code"},{"location":"integration-ci-cd/fastlane/#instructions","text":"To integrate MoQuality with fastlane , you will add a step to your lane that runs a shell script containing your MQ CLI commands. For this documentation, we will call that script mq.sh , but you can call it whatever you wish.","title":"Instructions"},{"location":"integration-ci-cd/fastlane/#set-environment-variables","text":"There are two environment variables that you must set. The first variable is API_KEY , which will enable user login. To find your API key, run mq login in your command line to log in to MoQuality. Then, run mq user to display user information. Your API key will be in the list of returned information. The second variable is APP_ID . This will specify which app is being uploaded. To find your app Id, log in with mq login and run mq apps to see a list of your apps. Find your app in the list and locate the app Id in the same row. Run the below example commands in your command line to set these environment variables. export API_KEY =[ OBTAINED_VALUE ] export APP_ID =[ OBTAINED_VALUE ]","title":"Set Environment Variables"},{"location":"integration-ci-cd/fastlane/#create-shell-script","text":"Create a shell script in the same directory as your Fastfile called mq.sh . Open that shell script in an editor. This shell script will contain the MQ CLI commands that your new step will run. Before writing that step, we will write the shell script. The next section follows the creation of a shell script to upload an apk file built using Gradle, to MoQuality. #!/bin/sh npm install -g mq-cli mq login -a $API_KEY mq user mq upload -a $APP_ID -f $1 mq apps npm install mq-cli installs the MQ CLI. See the MQ CLI documentation for alternative installation commands. mq login -a $API_KEY logs you in using your API key. mq user returns user information, and you can check that your user is correct. mq upload -a $APP_ID -f $1 will upload your app, whose location is provided by $1 , the apk file's path that will be passed as an argument during execution. The command uses $APP_ID to determine which app is being uploaded. mq apps returns a list of your apps, and you can confirm that your app version has incremented by one.","title":"Create Shell Script"},{"location":"integration-ci-cd/fastlane/#edit-fastfile","text":"Open your Fastfile in an editor. Find the lane to which you want to add the MoQuality step. If you build your app in this lane, make sure you add the new step after the app has been built. Below is an example lane before the step has been added. lane :beta do gradle ( task : \"clean assembleDebug\" ) end","title":"Edit Fastfile"},{"location":"integration-ci-cd/fastlane/#add-shell-method-to-fastfile","text":"Add a shell method that runs your shell script to the lane. If you are following the example upload script, pass as an argument to the script the output variable from the Gradle step that provides the apk path. Below is the updated example lane. lane :beta do gradle ( task : \"clean assembleDebug\" ) sh ( \u201c sh \u201d , \u201d mqtest . sh \u201d , \" #{ lane_context [ SharedValues :: GRADLE_APK_OUTPUT_PATH ] } \" ) end","title":"Add Shell Method to Fastfile"},{"location":"integration-ci-cd/fastlane/#run-the-lane","text":"Now that you have integrated MoQuality with fastlane , try running the lane with fastlane [LANE_NAME] in your command line.","title":"Run the Lane"},{"location":"integration-ci-cd/fastlane/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"integration-ci-cd/fastlane/#undocumented-error","text":"If you encounter an error that is not documented, please open an issue on our public GitHub repository . Alternatively, you can report your error to hello@moquality.com .","title":"Undocumented Error"},{"location":"integration-ci-cd/mq-cli/","text":"MoQuality CLI \u00b6 Introduction \u00b6 The MoQuality CLI (MQ CLI) is a Command Line Interface that enables users to interact with MoQuality through their command line. Installation \u00b6 The MQ CLI can be installed using either yarn or npm. The respective command for either method is below. yarn global add mq-cli npm install -g mq-cli For a list of the MQ CLI's commands, type mq help in your command line. Usage \u00b6 The standard usage of MQ CLI commands is mq [COMMAND] , where COMMAND is one of the commands listed by the mq help command and below. Commands \u00b6 apps help login tests upload user apps \u00b6 Displays a list of the current user's apps. Usage mq apps help \u00b6 Displays the version, usage, and commands for the MQ CLI. Usage mq help Arguments COMMAND command to show help for Options -all see all commands in CLI login \u00b6 Logs the user in with either their email and password or their API key. Usage mq login Options -e, --email=email email of user -p, --password=password password of user -a, --api_key=api_key api_key of user tests \u00b6 Show tests recorded for a particular app project. Usage mq tests Options -a --app=app app id upload \u00b6 Uploads a new version to an app project on MoQuality. Usage mq upload Options -a --app=app app id -f, --file=file location of app user \u00b6 Displays current user information. Usage mq user Troubleshooting \u00b6 Undocumented Error \u00b6 If you encounter an error that is not documented, please open an issue on our public GitHub repository . Alternatively, you can report your error to hello@moquality.com .","title":"MoQuality CLI"},{"location":"integration-ci-cd/mq-cli/#moquality-cli","text":"","title":"MoQuality CLI"},{"location":"integration-ci-cd/mq-cli/#introduction","text":"The MoQuality CLI (MQ CLI) is a Command Line Interface that enables users to interact with MoQuality through their command line.","title":"Introduction"},{"location":"integration-ci-cd/mq-cli/#installation","text":"The MQ CLI can be installed using either yarn or npm. The respective command for either method is below. yarn global add mq-cli npm install -g mq-cli For a list of the MQ CLI's commands, type mq help in your command line.","title":"Installation"},{"location":"integration-ci-cd/mq-cli/#usage","text":"The standard usage of MQ CLI commands is mq [COMMAND] , where COMMAND is one of the commands listed by the mq help command and below.","title":"Usage"},{"location":"integration-ci-cd/mq-cli/#commands","text":"apps help login tests upload user","title":"Commands"},{"location":"integration-ci-cd/mq-cli/#apps","text":"Displays a list of the current user's apps. Usage mq apps","title":"apps"},{"location":"integration-ci-cd/mq-cli/#help","text":"Displays the version, usage, and commands for the MQ CLI. Usage mq help Arguments COMMAND command to show help for Options -all see all commands in CLI","title":"help"},{"location":"integration-ci-cd/mq-cli/#login","text":"Logs the user in with either their email and password or their API key. Usage mq login Options -e, --email=email email of user -p, --password=password password of user -a, --api_key=api_key api_key of user","title":"login"},{"location":"integration-ci-cd/mq-cli/#tests","text":"Show tests recorded for a particular app project. Usage mq tests Options -a --app=app app id","title":"tests"},{"location":"integration-ci-cd/mq-cli/#upload","text":"Uploads a new version to an app project on MoQuality. Usage mq upload Options -a --app=app app id -f, --file=file location of app","title":"upload"},{"location":"integration-ci-cd/mq-cli/#user","text":"Displays current user information. Usage mq user","title":"user"},{"location":"integration-ci-cd/mq-cli/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"integration-ci-cd/mq-cli/#undocumented-error","text":"If you encounter an error that is not documented, please open an issue on our public GitHub repository . Alternatively, you can report your error to hello@moquality.com .","title":"Undocumented Error"},{"location":"notifications/gitbot/features/","text":"Gitbot Features \u00b6 Upload App Reminder \u00b6 When a pull request is opened or reopned, Gitbot will post to the pull request a comment, reminding you to upload the new version of your app to MoQuality. Status Updates \u00b6 If Gitbot has been configured correctly , it will post updates from tests to the comments of a pull request. Future Features \u00b6 In the future, Gitbot could be smarter and capable of automatically testing your new app versions when they are, perhaps, in a pending pull request. Then, Gitbot could post testing updates to the comments of said pull request, thereby notifying you of any breaking bugs without you having to manually enter any pull request URLs.","title":"Features"},{"location":"notifications/gitbot/features/#gitbot-features","text":"","title":"Gitbot Features"},{"location":"notifications/gitbot/features/#upload-app-reminder","text":"When a pull request is opened or reopned, Gitbot will post to the pull request a comment, reminding you to upload the new version of your app to MoQuality.","title":"Upload App Reminder"},{"location":"notifications/gitbot/features/#status-updates","text":"If Gitbot has been configured correctly , it will post updates from tests to the comments of a pull request.","title":"Status Updates"},{"location":"notifications/gitbot/features/#future-features","text":"In the future, Gitbot could be smarter and capable of automatically testing your new app versions when they are, perhaps, in a pending pull request. Then, Gitbot could post testing updates to the comments of said pull request, thereby notifying you of any breaking bugs without you having to manually enter any pull request URLs.","title":"Future Features"},{"location":"notifications/gitbot/getting-started/","text":"Getting Started with Gitbot \u00b6 Introduction \u00b6 MoQuality's services provide an invaluable advancement to QA testing, but those advancements are only as powerful as their accessibility. It's difficult to practice continuous integration when you have to manually monitor test statuses after, for example, deploying a new version of your product to a staging environment. MoQuality understands this and has created a GitHub app, referred to as Gitbot, to automatically notify you of test statuses for the new version of your app. Follow the steps below to integrate MoQuality's GitHub app into your development workflow. Prerequisites \u00b6 GitHub accounts & respository: In order to use Gitbot, you will, of course, need to have created a GitHub account and a repository . MoQuality account: Gitbot will need to link your GitHub account to your MoQuality account, which you can create here . MoQuality app: For the purpose of test status notifications for a new version of your app, ensure that you have already uploaded the first version of your app through the MoQuality website . Installation \u00b6 Install Gitbot from from your MoQuality account page under the Integrations tab. Follow the prompts to authorize Gitbot and install it to your desired repository or repositories. You will see that Gitbot will be given Read and write access to pull requests . This does not give Gitbot access to the code. It only allows Gitbot to interact with the high-level interfaces such as comments. See the GitHub API for more detailed permissions information. Setup \u00b6 To recieve testing updates in the comments of a pull request, enter your pull request URL when you press the Generate Tests button on your MoQuality app's page. This will tell Gitbot where to post status updates from those tests. You can also enter the pull request URL on the test report's page. Uninstallation \u00b6 Gitbot can be uninstalled by navigating to the Integrations tab of your MoQuality account page and pressing the X on the top right of the GitHub integration. This will direct you to Gitbot's configuration page, and at the bottom of said page is the Uninstall button. By clicking that button, Gitbot will be uninstalled from your workspace and your MoQuality account will be delinked from your GitHub account. Troubleshooting \u00b6 If you encounter an error, please open an issue on our public GitHub repository . Alternatively, you can report your error to hello@moquality.com .","title":"Getting Started"},{"location":"notifications/gitbot/getting-started/#getting-started-with-gitbot","text":"","title":"Getting Started with Gitbot"},{"location":"notifications/gitbot/getting-started/#introduction","text":"MoQuality's services provide an invaluable advancement to QA testing, but those advancements are only as powerful as their accessibility. It's difficult to practice continuous integration when you have to manually monitor test statuses after, for example, deploying a new version of your product to a staging environment. MoQuality understands this and has created a GitHub app, referred to as Gitbot, to automatically notify you of test statuses for the new version of your app. Follow the steps below to integrate MoQuality's GitHub app into your development workflow.","title":"Introduction"},{"location":"notifications/gitbot/getting-started/#prerequisites","text":"GitHub accounts & respository: In order to use Gitbot, you will, of course, need to have created a GitHub account and a repository . MoQuality account: Gitbot will need to link your GitHub account to your MoQuality account, which you can create here . MoQuality app: For the purpose of test status notifications for a new version of your app, ensure that you have already uploaded the first version of your app through the MoQuality website .","title":"Prerequisites"},{"location":"notifications/gitbot/getting-started/#installation","text":"Install Gitbot from from your MoQuality account page under the Integrations tab. Follow the prompts to authorize Gitbot and install it to your desired repository or repositories. You will see that Gitbot will be given Read and write access to pull requests . This does not give Gitbot access to the code. It only allows Gitbot to interact with the high-level interfaces such as comments. See the GitHub API for more detailed permissions information.","title":"Installation"},{"location":"notifications/gitbot/getting-started/#setup","text":"To recieve testing updates in the comments of a pull request, enter your pull request URL when you press the Generate Tests button on your MoQuality app's page. This will tell Gitbot where to post status updates from those tests. You can also enter the pull request URL on the test report's page.","title":"Setup"},{"location":"notifications/gitbot/getting-started/#uninstallation","text":"Gitbot can be uninstalled by navigating to the Integrations tab of your MoQuality account page and pressing the X on the top right of the GitHub integration. This will direct you to Gitbot's configuration page, and at the bottom of said page is the Uninstall button. By clicking that button, Gitbot will be uninstalled from your workspace and your MoQuality account will be delinked from your GitHub account.","title":"Uninstallation"},{"location":"notifications/gitbot/getting-started/#troubleshooting","text":"If you encounter an error, please open an issue on our public GitHub repository . Alternatively, you can report your error to hello@moquality.com .","title":"Troubleshooting"},{"location":"notifications/slackbot/features/","text":"Slackbot Features \u00b6 Slash Commands \u00b6 Slack has CLI-like interactions called Slash Commands . Slash Commands enable the user to directly interact with Slackbot in a variety of ways. Listed below is the full array of Slash Commands that Slackbot supports. /mq-apps /mq-help /mq-status /mq-subscribe /mq-user /mq-apps \u00b6 Posts a private message as an attachment containing the user's apps. Usage /mq-apps /mq-help \u00b6 Posts a private message as an attachment containing information about MoQuality and Slackbot's Slash Commands. Usage /mq-help /mq-status \u00b6 Posts a private message as an attachment containing the statuses of tests for an app that has been created on MoQuality. Usage / mq - status [ app Id ] /mq-subscribe \u00b6 Subscribes the authorized channel to test updates from the given MoQuality app. After subscribing the channel, Slackbot posts a public message as an attachment containing information about the subscription. Usage / mq - subscribe [ app Id ] /mq-user \u00b6 Posts a private message as an attachment containing information about the MoQuality user linked with the current Slack account. Usage /mq-user","title":"Features"},{"location":"notifications/slackbot/features/#slackbot-features","text":"","title":"Slackbot Features"},{"location":"notifications/slackbot/features/#slash-commands","text":"Slack has CLI-like interactions called Slash Commands . Slash Commands enable the user to directly interact with Slackbot in a variety of ways. Listed below is the full array of Slash Commands that Slackbot supports. /mq-apps /mq-help /mq-status /mq-subscribe /mq-user","title":"Slash Commands"},{"location":"notifications/slackbot/features/#mq-apps","text":"Posts a private message as an attachment containing the user's apps. Usage /mq-apps","title":"/mq-apps"},{"location":"notifications/slackbot/features/#mq-help","text":"Posts a private message as an attachment containing information about MoQuality and Slackbot's Slash Commands. Usage /mq-help","title":"/mq-help"},{"location":"notifications/slackbot/features/#mq-status","text":"Posts a private message as an attachment containing the statuses of tests for an app that has been created on MoQuality. Usage / mq - status [ app Id ]","title":"/mq-status"},{"location":"notifications/slackbot/features/#mq-subscribe","text":"Subscribes the authorized channel to test updates from the given MoQuality app. After subscribing the channel, Slackbot posts a public message as an attachment containing information about the subscription. Usage / mq - subscribe [ app Id ]","title":"/mq-subscribe"},{"location":"notifications/slackbot/features/#mq-user","text":"Posts a private message as an attachment containing information about the MoQuality user linked with the current Slack account. Usage /mq-user","title":"/mq-user"},{"location":"notifications/slackbot/getting-started/","text":"Getting Started with Slackbot \u00b6 Introduction \u00b6 MoQuality enables you to schedule tests when you deploy a new build of your app. However, these tests take time, and so does monitoring their success. Rather than watch and wait for your tests to complete, Slack users can install the MoQuality bot to their workspace. This bot, referred to as Slackbot, will send a notification with test results to your desired Slack channel when a chosen app's test has completed. In order to utilize MoQuality bot's services effectively, there are several steps to follow. Prerequisites \u00b6 Slack account & workspace: In order to use Slackbot, you will, of course, need to have created a Slack account , workspace , and channel . It is ideal to create a channel specifically for the use of Slackbot. MoQuality account: Slackbot will need to link your Slack account to your MoQuality account, which you can create here . MoQuality app: For the purpose of receiving an app's status updates from Slackbot, ensure that you have already uploaded the first version of your app through the MoQuality website . Installation \u00b6 Install Slackbot from your MoQuality account page under the Integrations tab. Slack will prompt you to authorize the bot for a channel. There is one permission that the bot requires. Said permission is the ability to Send messages as MoQuality . This permission is necessary for Slackbot to post messages as a bot user. Setup \u00b6 Once Slackbot is integrated with your workspace, your MoQuality and Slack accounts are linked. This means that you or anyone else in your workspace can invoke one of Slackbots many Slash Commands . By typing /mq in your Slack workspace, you should see a list of the available Slash Commands. The first Slash Command you may want to use is /mq-subscribe [app Id] . This command subscribes the authorized channel to test updates from the given MoQuality app. After subscribing the channel, Slackbot posts a public message as an attachment containing information about the subscription. Uninstallation \u00b6 Slackbot can be uninstalled by navigating to the Integrations tab of your MoQuality account page and pressing the X on the top right of the Slack integration. This will direct you to Slackbot's configuration page, and at the bottom of said page is the Remove app button. By clicking that button, Slackbot will be uninstalled from your workspace and your MoQuality account will be delinked from your Slack account. Troubleshooting \u00b6 If you encounter an error, please open an issue on our public GitHub repository . Alternatively, you can report your error to hello@moquality.com .","title":"Getting Started"},{"location":"notifications/slackbot/getting-started/#getting-started-with-slackbot","text":"","title":"Getting Started with Slackbot"},{"location":"notifications/slackbot/getting-started/#introduction","text":"MoQuality enables you to schedule tests when you deploy a new build of your app. However, these tests take time, and so does monitoring their success. Rather than watch and wait for your tests to complete, Slack users can install the MoQuality bot to their workspace. This bot, referred to as Slackbot, will send a notification with test results to your desired Slack channel when a chosen app's test has completed. In order to utilize MoQuality bot's services effectively, there are several steps to follow.","title":"Introduction"},{"location":"notifications/slackbot/getting-started/#prerequisites","text":"Slack account & workspace: In order to use Slackbot, you will, of course, need to have created a Slack account , workspace , and channel . It is ideal to create a channel specifically for the use of Slackbot. MoQuality account: Slackbot will need to link your Slack account to your MoQuality account, which you can create here . MoQuality app: For the purpose of receiving an app's status updates from Slackbot, ensure that you have already uploaded the first version of your app through the MoQuality website .","title":"Prerequisites"},{"location":"notifications/slackbot/getting-started/#installation","text":"Install Slackbot from your MoQuality account page under the Integrations tab. Slack will prompt you to authorize the bot for a channel. There is one permission that the bot requires. Said permission is the ability to Send messages as MoQuality . This permission is necessary for Slackbot to post messages as a bot user.","title":"Installation"},{"location":"notifications/slackbot/getting-started/#setup","text":"Once Slackbot is integrated with your workspace, your MoQuality and Slack accounts are linked. This means that you or anyone else in your workspace can invoke one of Slackbots many Slash Commands . By typing /mq in your Slack workspace, you should see a list of the available Slash Commands. The first Slash Command you may want to use is /mq-subscribe [app Id] . This command subscribes the authorized channel to test updates from the given MoQuality app. After subscribing the channel, Slackbot posts a public message as an attachment containing information about the subscription.","title":"Setup"},{"location":"notifications/slackbot/getting-started/#uninstallation","text":"Slackbot can be uninstalled by navigating to the Integrations tab of your MoQuality account page and pressing the X on the top right of the Slack integration. This will direct you to Slackbot's configuration page, and at the bottom of said page is the Remove app button. By clicking that button, Slackbot will be uninstalled from your workspace and your MoQuality account will be delinked from your Slack account.","title":"Uninstallation"},{"location":"notifications/slackbot/getting-started/#troubleshooting","text":"If you encounter an error, please open an issue on our public GitHub repository . Alternatively, you can report your error to hello@moquality.com .","title":"Troubleshooting"},{"location":"recorder/","text":"Getting Started with Barista \u00b6 Barista can be used to record, replay and edit tests using a local mobile device. It automatically downloads and installs the app on a new device. For a full overview of the recorder's functionality, see Barista's Feature List . Installing Barista \u00b6 Install Barista with brew : brew cask install moquality/brew/barista Setup the Device \u00b6 Android and iOS devices are setup differently, as follows: Setup an Android Device Setup an iOS Device Creating a Test Case \u00b6 Choose a device and an app. Choose device settings. Install app (for the first time use). Click \"Record\". Perform actions in the app. Click \"Save\". Enter a name for the test. Click \"Save\". Replaying a Test \u00b6 Choose a device. Choose the app that the test was recorded for. Choose device settings. Install app (if it is not previously installed). Switch to the \"Tests\" tab. Find the test that you would like to replay and expand it. Click \"Run\". Editing a Test \u00b6 After saving a test recording, you can make changes to a test such as adding a time delay, or deleting a step. For more information see Test editing Troubleshooting \u00b6 Infinite Loading Screen \u00b6 Get a screenshot \u00b6 In some cases, the recorder may fail to start properly when connecting to a device. If this occurs, you will be presented with an error message, following which the loading screen will continue to load infinitely. This usually happens as a result of a desynchronization between the device and ADB (Android Debug Bridge), resulting in ADB classifying the device as \"offline\". If this happens, try the following steps: Close the recorder. Unplug the device. Disable USB debugging in the devices settings ( Click here to know how ). Re-enable USB debugging. Plug the device back in. Start the recorder again. If the problem persists, please contact MoQuality for further support. Differences between Android and iOS test recording \u00b6 Android and iOS devices behave similarly in the recorder, but there are a few differences in the touch control. On Android, the mouse pointer emulates a touch input, providing a clean 1-to-1 interaction between the recorder and the app. Unfortunately, due to limitations in iOS automation, the recorder is unable to do this 1-to-1 interaction with iOS devices. When clicking on the screen while using an iOS device, a circle will appear where the mouse button was pressed. If the mouse is dragged past a threshold distance away from that starting point, a second circle will appear under the mouse with a line connecting the two. If this appears, releasing the mouse will perform a drag from the first circle to the second; if it does not appear, then a click action will be performed at the location of the first circle instead.","title":"Getting Started"},{"location":"recorder/#getting-started-with-barista","text":"Barista can be used to record, replay and edit tests using a local mobile device. It automatically downloads and installs the app on a new device. For a full overview of the recorder's functionality, see Barista's Feature List .","title":"Getting Started with Barista"},{"location":"recorder/#installing-barista","text":"Install Barista with brew : brew cask install moquality/brew/barista","title":"Installing Barista"},{"location":"recorder/#setup-the-device","text":"Android and iOS devices are setup differently, as follows: Setup an Android Device Setup an iOS Device","title":"Setup the Device"},{"location":"recorder/#creating-a-test-case","text":"Choose a device and an app. Choose device settings. Install app (for the first time use). Click \"Record\". Perform actions in the app. Click \"Save\". Enter a name for the test. Click \"Save\".","title":"Creating a Test Case"},{"location":"recorder/#replaying-a-test","text":"Choose a device. Choose the app that the test was recorded for. Choose device settings. Install app (if it is not previously installed). Switch to the \"Tests\" tab. Find the test that you would like to replay and expand it. Click \"Run\".","title":"Replaying a Test"},{"location":"recorder/#editing-a-test","text":"After saving a test recording, you can make changes to a test such as adding a time delay, or deleting a step. For more information see Test editing","title":"Editing a Test"},{"location":"recorder/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"recorder/#infinite-loading-screen","text":"","title":"Infinite Loading Screen"},{"location":"recorder/#get-a-screenshot","text":"In some cases, the recorder may fail to start properly when connecting to a device. If this occurs, you will be presented with an error message, following which the loading screen will continue to load infinitely. This usually happens as a result of a desynchronization between the device and ADB (Android Debug Bridge), resulting in ADB classifying the device as \"offline\". If this happens, try the following steps: Close the recorder. Unplug the device. Disable USB debugging in the devices settings ( Click here to know how ). Re-enable USB debugging. Plug the device back in. Start the recorder again. If the problem persists, please contact MoQuality for further support.","title":"Get a screenshot"},{"location":"recorder/#differences-between-android-and-ios-test-recording","text":"Android and iOS devices behave similarly in the recorder, but there are a few differences in the touch control. On Android, the mouse pointer emulates a touch input, providing a clean 1-to-1 interaction between the recorder and the app. Unfortunately, due to limitations in iOS automation, the recorder is unable to do this 1-to-1 interaction with iOS devices. When clicking on the screen while using an iOS device, a circle will appear where the mouse button was pressed. If the mouse is dragged past a threshold distance away from that starting point, a second circle will appear under the mouse with a line connecting the two. If this appears, releasing the mouse will perform a drag from the first circle to the second; if it does not appear, then a click action will be performed at the location of the first circle instead.","title":"Differences between Android and iOS test recording"},{"location":"recorder/android/","text":"Setup an Android Device \u00b6 Enable USB Debugging \u00b6 Select a device you would like to test with and then turn on USB Debugging , which can be found inside of Settings > Developer Options > USB Debugging and connect your device to your computer. Press 'Always Allow\" on the popup on the device. Upload App \u00b6 Make sure to have uploaded a version of your app to test on app.moquality.com . We automatically will find the package name and activity name for the app. You can verify it under the Settings tab. Launch Recorder \u00b6 Launch the recorder with your connected device and log in with either your API key or username/password . Select your device and app from the drop down, as well as your screen size and keyboard preference. We recommend setting it to no-keyboard, tests are more reliable without flaky keyboard. The recorder itself has a text input feature which will allow you to input text into text boxes. Press Record (on top left) to begin recording your test on your device. Interact with the screen projection you see in front of you. You MUST use the bottom interface buttons for actions instead of the hardware buttons on your device. Hardware buttons include back button, home screen button and show apps button. Similarly, if your device has software buttons, do not click them. We assume that software buttoms will never be a part of a test case and discard them. When you are done recording a test, press SAVE and name your test . You can then view the test in the app.moquality.com website. Replay Tests \u00b6 To confirm the test was valid, move to the Tests Tab and try to run the test . If you are unable to run the test, you may have to re-record it, or head down to the FAQ to see possible solutions. FAQ \u00b6 Why does my phone not connect? Double-check that USB debugging is on and that you have clicked 'Allow' on the on-screen popup. You may have to unplug and replug the device in some cases. Why does it say I need to re-record in 'Stable Mode'? For some apps and tests, the regular mode may be unable to capture all the necessary details to successfully run the test. You can toggle 'Stable Mode' inside the recording by going into 'Settings' and toggling the option.","title":"Android Setup"},{"location":"recorder/android/#setup-an-android-device","text":"","title":"Setup an Android Device"},{"location":"recorder/android/#enable-usb-debugging","text":"Select a device you would like to test with and then turn on USB Debugging , which can be found inside of Settings > Developer Options > USB Debugging and connect your device to your computer. Press 'Always Allow\" on the popup on the device.","title":"Enable USB Debugging"},{"location":"recorder/android/#upload-app","text":"Make sure to have uploaded a version of your app to test on app.moquality.com . We automatically will find the package name and activity name for the app. You can verify it under the Settings tab.","title":"Upload App"},{"location":"recorder/android/#launch-recorder","text":"Launch the recorder with your connected device and log in with either your API key or username/password . Select your device and app from the drop down, as well as your screen size and keyboard preference. We recommend setting it to no-keyboard, tests are more reliable without flaky keyboard. The recorder itself has a text input feature which will allow you to input text into text boxes. Press Record (on top left) to begin recording your test on your device. Interact with the screen projection you see in front of you. You MUST use the bottom interface buttons for actions instead of the hardware buttons on your device. Hardware buttons include back button, home screen button and show apps button. Similarly, if your device has software buttons, do not click them. We assume that software buttoms will never be a part of a test case and discard them. When you are done recording a test, press SAVE and name your test . You can then view the test in the app.moquality.com website.","title":"Launch Recorder"},{"location":"recorder/android/#replay-tests","text":"To confirm the test was valid, move to the Tests Tab and try to run the test . If you are unable to run the test, you may have to re-record it, or head down to the FAQ to see possible solutions.","title":"Replay Tests"},{"location":"recorder/android/#faq","text":"Why does my phone not connect? Double-check that USB debugging is on and that you have clicked 'Allow' on the on-screen popup. You may have to unplug and replug the device in some cases. Why does it say I need to re-record in 'Stable Mode'? For some apps and tests, the regular mode may be unable to capture all the necessary details to successfully run the test. You can toggle 'Stable Mode' inside the recording by going into 'Settings' and toggling the option.","title":"FAQ"},{"location":"recorder/features/","text":"Recorder Feature List \u00b6 Assertions \u00b6 Add an assertion to your test, to force-check expected outcomes such as checking for specific text or UI element. For example, at the login screen, incase of incorrect username or password, you can add an assertion in the recorder to check for the 'Invalid login credentials' text message. API Requests \u00b6 Make API requests to your testing environments through the app. Recorder allows API requests at any screen of the app. This is most helpful when you might want to initialize user setup before testing the login screen or make an API call to clean out the test data at the end of test flow. Explore Tab \u00b6 You can interact with the hierarchy of your app in the Explore Tab . Here you can view widget properties and also add assertions for any screen in your app. Keyboard Input \u00b6 To enter text input, click the keyboard button below the phone screen Recording \u00b6 When you press record button, the app's cache is automatically cleared, and your app is launched. Auto-launch can be turned off in Settings. While in record mode, all interactions on the phone projection will be recorded. If you unintentiionally clicked an item, you can delete the action from the action list on the right pane. If you delete an action on which the next steps are dependant, the subsequent attempts to run the test can fail. Test Editing \u00b6 To edit a previously recorded test, go into the Tests tab. Open the test and go to the step that you would like to edit. Click the edit icon to open the editor. Here you can edit the step's description, select a new widget to target, or add a sleep time. Sleep time is helpful when you want the test run to wait until the screen loads completely. Test Replay \u00b6 After you have a recorded a successful test, proceed to the Tests Tab and replay your test.","title":"Features"},{"location":"recorder/features/#recorder-feature-list","text":"","title":"Recorder Feature List"},{"location":"recorder/features/#assertions","text":"Add an assertion to your test, to force-check expected outcomes such as checking for specific text or UI element. For example, at the login screen, incase of incorrect username or password, you can add an assertion in the recorder to check for the 'Invalid login credentials' text message.","title":"Assertions"},{"location":"recorder/features/#api-requests","text":"Make API requests to your testing environments through the app. Recorder allows API requests at any screen of the app. This is most helpful when you might want to initialize user setup before testing the login screen or make an API call to clean out the test data at the end of test flow.","title":"API Requests"},{"location":"recorder/features/#explore-tab","text":"You can interact with the hierarchy of your app in the Explore Tab . Here you can view widget properties and also add assertions for any screen in your app.","title":"Explore Tab"},{"location":"recorder/features/#keyboard-input","text":"To enter text input, click the keyboard button below the phone screen","title":"Keyboard Input"},{"location":"recorder/features/#recording","text":"When you press record button, the app's cache is automatically cleared, and your app is launched. Auto-launch can be turned off in Settings. While in record mode, all interactions on the phone projection will be recorded. If you unintentiionally clicked an item, you can delete the action from the action list on the right pane. If you delete an action on which the next steps are dependant, the subsequent attempts to run the test can fail.","title":"Recording"},{"location":"recorder/features/#test-editing","text":"To edit a previously recorded test, go into the Tests tab. Open the test and go to the step that you would like to edit. Click the edit icon to open the editor. Here you can edit the step's description, select a new widget to target, or add a sleep time. Sleep time is helpful when you want the test run to wait until the screen loads completely.","title":"Test Editing"},{"location":"recorder/features/#test-replay","text":"After you have a recorded a successful test, proceed to the Tests Tab and replay your test.","title":"Test Replay"},{"location":"recorder/ios/","text":"Setup for iOS Device \u00b6 In order to use the recorder with iOS devices, some configuration is necessary. This page documents that configuration. Note These steps were gathered via repeated attempts to determine the code signing process. It is possible that earlier attempts affected the steps determined, meaning that these may not work on a clean setup. Further testing is necessary. Log in to Apple Developer Portal \u00b6 First, log into the Apple Developer Portal . Click the Account link at the top of the page to access your account info. In the sidebar on the left, you should see the following links: Click the \"Certificates, IDs & Profiles\" link. If you already have a valid certificate, skip to step 3 (Alternate). Generate a certificate \u00b6 Above the certificate list on the next page, click the + button to generate a new certificate. Select \"iOS App Development\". The next page should give you instructions on how to generate a CSR. Follow those instructions before continuing. Import the certificate \u00b6 Download the newly generated certificate. If you already have a certificate generated, navigate to the certificate list, find your certificate, click on it, and then click the download button in the expanded panel. Once the certificate is downloaded, locate it in Finder and double-click it. This should open the Keychain Access app with the certificate newly imported into the \"System\" keychain. To find it, click System in the sidebar, and then Certificates. The certificate needs to be moved to the \"local\" keychain. To do so, simply drag it from the list of certificates on the local keychain in the sidebar. Once this is done, it should appear under \"My Certificates\", rather than just under \"Certificates\". Generate an App ID \u00b6 Back in the developer portal, click \"App IDs\" on the sidebar. Click the + button at the top, much like when generating a certificate. Name the ID something reasonable for its use, such as \"Recorder\". Select \"Wildcard App ID\" and enter a single asterisk as the ID. Take note of the Team ID listed under the \"App ID Prefix\". You'll need it. Click \"Done\". Generate a mobile provisioning profile \u00b6 Click \"All\" under \"Provisioning Profiles\" in the sidebar. You may need to scroll down to see it. Click the + button to generate a new profile, and then select \"iOS App Development\". Select the App ID that you generated in the previous step. Select the certificate generated in step 2, or your existing certificate if you did not generate one. Click the \"Select All\" checkbox on the device list. Enter a name for the profile. You do not need to download the profile. That will be handled automatically. Set up environment variables \u00b6 The final step is to set the $DEVELOPMENT_TEAM environment variable to the Team ID from step 4. There are several ways to do this, but one of the simplest is to add the variable to the .bash_profile file in your home directory. Open the $HOME/.bash_profile file in an editor of your choice and add the following line to the end of it: bash export DEVELOPMENT_TEAM=<Team ID> Replace <Team ID> with the your team ID. Once this is done, you will need to log out and back in. Then simply run the recorder as normal. Ensure xcode is in system path \u00b6 Go to Xcode > Preferences > Locations , and assign the Command Line Tools to XCode.","title":"iOS Setup"},{"location":"recorder/ios/#setup-for-ios-device","text":"In order to use the recorder with iOS devices, some configuration is necessary. This page documents that configuration. Note These steps were gathered via repeated attempts to determine the code signing process. It is possible that earlier attempts affected the steps determined, meaning that these may not work on a clean setup. Further testing is necessary.","title":"Setup for iOS Device"},{"location":"recorder/ios/#log-in-to-apple-developer-portal","text":"First, log into the Apple Developer Portal . Click the Account link at the top of the page to access your account info. In the sidebar on the left, you should see the following links: Click the \"Certificates, IDs & Profiles\" link. If you already have a valid certificate, skip to step 3 (Alternate).","title":"Log in to Apple Developer Portal"},{"location":"recorder/ios/#generate-a-certificate","text":"Above the certificate list on the next page, click the + button to generate a new certificate. Select \"iOS App Development\". The next page should give you instructions on how to generate a CSR. Follow those instructions before continuing.","title":"Generate a certificate"},{"location":"recorder/ios/#import-the-certificate","text":"Download the newly generated certificate. If you already have a certificate generated, navigate to the certificate list, find your certificate, click on it, and then click the download button in the expanded panel. Once the certificate is downloaded, locate it in Finder and double-click it. This should open the Keychain Access app with the certificate newly imported into the \"System\" keychain. To find it, click System in the sidebar, and then Certificates. The certificate needs to be moved to the \"local\" keychain. To do so, simply drag it from the list of certificates on the local keychain in the sidebar. Once this is done, it should appear under \"My Certificates\", rather than just under \"Certificates\".","title":"Import the certificate"},{"location":"recorder/ios/#generate-an-app-id","text":"Back in the developer portal, click \"App IDs\" on the sidebar. Click the + button at the top, much like when generating a certificate. Name the ID something reasonable for its use, such as \"Recorder\". Select \"Wildcard App ID\" and enter a single asterisk as the ID. Take note of the Team ID listed under the \"App ID Prefix\". You'll need it. Click \"Done\".","title":"Generate an App ID"},{"location":"recorder/ios/#generate-a-mobile-provisioning-profile","text":"Click \"All\" under \"Provisioning Profiles\" in the sidebar. You may need to scroll down to see it. Click the + button to generate a new profile, and then select \"iOS App Development\". Select the App ID that you generated in the previous step. Select the certificate generated in step 2, or your existing certificate if you did not generate one. Click the \"Select All\" checkbox on the device list. Enter a name for the profile. You do not need to download the profile. That will be handled automatically.","title":"Generate a mobile provisioning profile"},{"location":"recorder/ios/#set-up-environment-variables","text":"The final step is to set the $DEVELOPMENT_TEAM environment variable to the Team ID from step 4. There are several ways to do this, but one of the simplest is to add the variable to the .bash_profile file in your home directory. Open the $HOME/.bash_profile file in an editor of your choice and add the following line to the end of it: bash export DEVELOPMENT_TEAM=<Team ID> Replace <Team ID> with the your team ID. Once this is done, you will need to log out and back in. Then simply run the recorder as normal.","title":"Set up environment variables"},{"location":"recorder/ios/#ensure-xcode-is-in-system-path","text":"Go to Xcode > Preferences > Locations , and assign the Command Line Tools to XCode.","title":"Ensure xcode is in system path"},{"location":"recorder/test-editing/","text":"Test Editing in Barista \u00b6 Introduction \u00b6 Test editing feature allows you to change test steps, actions, test paramters, or sleep times. Opening the Edit Menu \u00b6 The Edit Menu can be accessed by hovering over the selected Test Step , and clicking the Edit Button . Editing Step Description \u00b6 If you would like to change the description of a test step, it's as easy as replacing the content inside the Description tab and pressing Submit Editing Test Parameters (Coming Soon) \u00b6 We are currently in the process of adding the functionality to parameterize test inputs, such as usernames and passwords, to expand the testing capabilities of an individual test. Adding Sleep Times after a step \u00b6 Sometimes our AI will try to continue through a test, despite the device not being ready to receive the additional information. This can happen for several reasons, including changes in internet connection speed, or background apps hogging the phone's processing power. The simplest way to tell the app to wait, is to add a sleep action immediately following a problematic action. Selecting a New Target Widget (Beta) \u00b6 If the recorded is unable to detect the desired widget, you can manually set a new target within the current screen. Simply go to Select Target tab and select the widget on the screen that you want to set as new target.","title":"Test Editing"},{"location":"recorder/test-editing/#test-editing-in-barista","text":"","title":"Test Editing in Barista"},{"location":"recorder/test-editing/#introduction","text":"Test editing feature allows you to change test steps, actions, test paramters, or sleep times.","title":"Introduction"},{"location":"recorder/test-editing/#opening-the-edit-menu","text":"The Edit Menu can be accessed by hovering over the selected Test Step , and clicking the Edit Button .","title":"Opening the Edit Menu"},{"location":"recorder/test-editing/#editing-step-description","text":"If you would like to change the description of a test step, it's as easy as replacing the content inside the Description tab and pressing Submit","title":"Editing Step Description"},{"location":"recorder/test-editing/#editing-test-parameters-coming-soon","text":"We are currently in the process of adding the functionality to parameterize test inputs, such as usernames and passwords, to expand the testing capabilities of an individual test.","title":"Editing Test Parameters (Coming Soon)"},{"location":"recorder/test-editing/#adding-sleep-times-after-a-step","text":"Sometimes our AI will try to continue through a test, despite the device not being ready to receive the additional information. This can happen for several reasons, including changes in internet connection speed, or background apps hogging the phone's processing power. The simplest way to tell the app to wait, is to add a sleep action immediately following a problematic action.","title":"Adding Sleep Times after a step"},{"location":"recorder/test-editing/#selecting-a-new-target-widget-beta","text":"If the recorded is unable to detect the desired widget, you can manually set a new target within the current screen. Simply go to Select Target tab and select the widget on the screen that you want to set as new target.","title":"Selecting a New Target Widget (Beta)"}]}