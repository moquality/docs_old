{
    "docs": [
        {
            "location": "/",
            "text": "What is MoQuality?\n\u2693\n\n\nMoQuality provides automated app testing services for native Android and iOS apps.\n\n\nThe best way to start using MoQuality is by creating an account on our website. Then you can use our test recorder to create tests.\n\n\n\n\nGetting Started with Android\n\n\nGetting Started with iOS\n\n\nGetting Started with the Recorder\n\n\nGetting Started with Test Execution and Report Generation\n\n\nQuickstart and Dashboard Overview\n\n\nUploading APK or IPA for iOS\n\n\nScheduling tests\n\n\nAuto generating tests\n\n\nViewing results in the dashboard",
            "title": "What is MoQuality?"
        },
        {
            "location": "/#what-is-moquality",
            "text": "MoQuality provides automated app testing services for native Android and iOS apps.  The best way to start using MoQuality is by creating an account on our website. Then you can use our test recorder to create tests.   Getting Started with Android  Getting Started with iOS  Getting Started with the Recorder  Getting Started with Test Execution and Report Generation  Quickstart and Dashboard Overview  Uploading APK or IPA for iOS  Scheduling tests  Auto generating tests  Viewing results in the dashboard",
            "title": "What is MoQuality?"
        },
        {
            "location": "/getting-started/pushkar/",
            "text": "TODO (PK)\n\u2693",
            "title": "Creating an Android APK"
        },
        {
            "location": "/getting-started/pushkar/#todo-pk",
            "text": "",
            "title": "TODO (PK)"
        },
        {
            "location": "/getting-started/pushkar/",
            "text": "TODO (PK)\n\u2693",
            "title": "Creating an iOS App"
        },
        {
            "location": "/getting-started/pushkar/#todo-pk",
            "text": "",
            "title": "TODO (PK)"
        },
        {
            "location": "/getting-started/upload-app/",
            "text": "Uploading an App\n\u2693\n\n\n\n\n\n\nNavigate to \napp.moquality.com\n.\n\n\n\n\n\n\nClick \"ADD APP\".\n\n\n\n\n\n\n\n\nChoose the type of app you would like to add, enter a name and, optionally, a description, and click submit. If you are adding an Android app, choose an APK to upload. If you are adding an iOS app, choose either a \n.ipa\n file or a \n.app\n directory in a Zip file. If the iOS app in question is a simulator build, make sure to check the \"Is Simulator\" checkbox, or the app will not work correctly.\n\n\n\n\n\n\n\n\nNow what?\n\u2693\n\n\nAfter uploading an app, a user can either\n\n\n\n\nRecord tests\n using the MoQuality Test Recorder and \nschedule runs\n of recorded tests to run on multiple devices.\n\n\nRequest an \nauto-generation of tests\n.",
            "title": "Upload App"
        },
        {
            "location": "/getting-started/upload-app/#uploading-an-app",
            "text": "Navigate to  app.moquality.com .    Click \"ADD APP\".     Choose the type of app you would like to add, enter a name and, optionally, a description, and click submit. If you are adding an Android app, choose an APK to upload. If you are adding an iOS app, choose either a  .ipa  file or a  .app  directory in a Zip file. If the iOS app in question is a simulator build, make sure to check the \"Is Simulator\" checkbox, or the app will not work correctly.",
            "title": "Uploading an App"
        },
        {
            "location": "/getting-started/upload-app/#now-what",
            "text": "After uploading an app, a user can either   Record tests  using the MoQuality Test Recorder and  schedule runs  of recorded tests to run on multiple devices.  Request an  auto-generation of tests .",
            "title": "Now what?"
        },
        {
            "location": "/recorder/",
            "text": "Getting Started with the Recorder\n\u2693\n\n\nThe MoQuality test recorder provides functionality for recording test cases for mobile apps, as well as for both replaying test cases on a local device and editing them. In addition, it offers useful supplementary functionality, such as the ability to automatically download and install the app  on a new device.\n\n\nFor a full overview of the recorder's functionality, see \nthe Recorder Feature List\n.\n\n\nDownloading the Recorder\n\u2693\n\n\n\n\nWindows\n\n\nMac OS X\n\n\nLinux (Coming Soon)\n\n\n\n\nSetup\n\u2693\n\n\nSetup differs rather significantly between Android and iOS. Please consult the relevant page for the device you wish to record test cases with.\n\n\n\n\nRecorder Setup for Android Devices\n\n\nRecorder Setup for iOS Devices\n\n\n\n\nRecording a Test Case\n\u2693\n\n\n\n\n\n\nChoose a device and an app.\n\n\n\n\n\n\n\n\nChoose device settings.\n\n\n\n\nInstall app (for the first time use).\n\n\nClick \"Record\".\n\n\nPerform actions in the app.\n\n\nClick \"Save\".\n\n\nEnter a name for the test.\n\n\nClick \"Save\".\n\n\n\n\nReplaying a Test\n\u2693\n\n\n\n\nChoose a device.\n\n\nChoose the app that the test was recorded for.\n\n\nChoose device settings.\n\n\nInstall app (if it is not previously installed).\n\n\nSwitch to the \"Tests\" tab.\n\n\nFind the test that you would like to replay and expand it.\n\n\nClick \"Run\".\n\n\n\n\nEditing a Test\n\u2693\n\n\nAfter saving a test, a user may want to edit a test such as adding a time delay, or deleting a step. For more information see \nTest editing\n\n\nTroubleshooting\n\u2693\n\n\nInfinite Loading Screen\n\u2693\n\n\nGet a screenshot\n\u2693\n\n\nIn some cases, the recorder may fail to start properly when connecting to a device. If this occurs, you will be presented with an error message, following which the loading screen will continue to load infinitely. This usually happens as a result of a desynchronization between the device and ADB, the Android Debug Bridge, resulting in ADB classifying the device as \"offline\". If this happens, try the following steps:\n\n\n\n\nClose the recorder.\n\n\nUnplug the device.\n\n\nDisable USB debugging in the devices settings (\nClick here to know how\n). \n\n\nRe-enable USB debugging.\n\n\nPlug the device back in.\n\n\nStart the recorder again.\n\n\n\n\nIf the problem persists, please contact MoQuality for further support.\n\n\nAppendix: Differences between Android and iOS\n\u2693\n\n\nFor the most part, Android and iOS devices behave similarly in the recorder, but there are a few differences. Some of these are obvious, as they pertain to unique features that one device type or the other has, such as the back button, which doesn't exist on iOS.\n\n\nA larger, less obvious difference is that of touch control. On Android, the mouse emulates a touch input, providing a clean 1-to-1 interaction between the recorder and the app. Unfortunately, due to limitations in iOS automation, the recorder is unable to do this 1-to-1 interaction with iOS devices.\n\n\nWhen clicking on the screen while using an iOS device, a circle will appear where the mouse button was pressed. If the mouse is dragged past a threshold distance away from that starting point, a second circle will appear under the mouse with a line connecting the two. If this appears, releasing the mouse will perform a drag from the first circle to the second; if it has not appeared, a click will be performed at the location of the circle instead.",
            "title": "Getting Started"
        },
        {
            "location": "/recorder/#getting-started-with-the-recorder",
            "text": "The MoQuality test recorder provides functionality for recording test cases for mobile apps, as well as for both replaying test cases on a local device and editing them. In addition, it offers useful supplementary functionality, such as the ability to automatically download and install the app  on a new device.  For a full overview of the recorder's functionality, see  the Recorder Feature List .",
            "title": "Getting Started with the Recorder"
        },
        {
            "location": "/recorder/#downloading-the-recorder",
            "text": "Windows  Mac OS X  Linux (Coming Soon)",
            "title": "Downloading the Recorder"
        },
        {
            "location": "/recorder/#setup",
            "text": "Setup differs rather significantly between Android and iOS. Please consult the relevant page for the device you wish to record test cases with.   Recorder Setup for Android Devices  Recorder Setup for iOS Devices",
            "title": "Setup"
        },
        {
            "location": "/recorder/#recording-a-test-case",
            "text": "Choose a device and an app.     Choose device settings.   Install app (for the first time use).  Click \"Record\".  Perform actions in the app.  Click \"Save\".  Enter a name for the test.  Click \"Save\".",
            "title": "Recording a Test Case"
        },
        {
            "location": "/recorder/#replaying-a-test",
            "text": "Choose a device.  Choose the app that the test was recorded for.  Choose device settings.  Install app (if it is not previously installed).  Switch to the \"Tests\" tab.  Find the test that you would like to replay and expand it.  Click \"Run\".",
            "title": "Replaying a Test"
        },
        {
            "location": "/recorder/#editing-a-test",
            "text": "After saving a test, a user may want to edit a test such as adding a time delay, or deleting a step. For more information see  Test editing",
            "title": "Editing a Test"
        },
        {
            "location": "/recorder/#troubleshooting",
            "text": "",
            "title": "Troubleshooting"
        },
        {
            "location": "/recorder/#infinite-loading-screen",
            "text": "",
            "title": "Infinite Loading Screen"
        },
        {
            "location": "/recorder/#get-a-screenshot",
            "text": "In some cases, the recorder may fail to start properly when connecting to a device. If this occurs, you will be presented with an error message, following which the loading screen will continue to load infinitely. This usually happens as a result of a desynchronization between the device and ADB, the Android Debug Bridge, resulting in ADB classifying the device as \"offline\". If this happens, try the following steps:   Close the recorder.  Unplug the device.  Disable USB debugging in the devices settings ( Click here to know how ).   Re-enable USB debugging.  Plug the device back in.  Start the recorder again.   If the problem persists, please contact MoQuality for further support.",
            "title": "Get a screenshot"
        },
        {
            "location": "/recorder/#appendix-differences-between-android-and-ios",
            "text": "For the most part, Android and iOS devices behave similarly in the recorder, but there are a few differences. Some of these are obvious, as they pertain to unique features that one device type or the other has, such as the back button, which doesn't exist on iOS.  A larger, less obvious difference is that of touch control. On Android, the mouse emulates a touch input, providing a clean 1-to-1 interaction between the recorder and the app. Unfortunately, due to limitations in iOS automation, the recorder is unable to do this 1-to-1 interaction with iOS devices.  When clicking on the screen while using an iOS device, a circle will appear where the mouse button was pressed. If the mouse is dragged past a threshold distance away from that starting point, a second circle will appear under the mouse with a line connecting the two. If this appears, releasing the mouse will perform a drag from the first circle to the second; if it has not appeared, a click will be performed at the location of the circle instead.",
            "title": "Appendix: Differences between Android and iOS"
        },
        {
            "location": "/recorder/android/",
            "text": "Recorder Setup for Android Devices\n\u2693\n\n\nGetting Started\n\u2693\n\n\n\n\n\n\nDownload the recorder from \napp.moquality.com > Apps > Download Test Recorder\n\n\n\n\n\n\n\n\nSelect a device you would like to test with and \nturn on USB Debugging\n, which can be found inside of \nSettings > Developer Options > USB Debugging\n and connect your device to your computer. \nPress 'Always Allow\"\n on the popup on the device.\n\n\n\n\n\n\n\n\nMake sure to have \nuploaded a version of your app to test onto www.app.moquality.com\n and have filled out the package name and activity name.\n\n\n\n\n\n\n\n\nLaunch the recorder with your connected device and \nlog in with either your API key or username and password\n. Select your device and app from the drop down, as well as your screen size and keyboard preference (we recommend setting it to no-keyboard).\n\n\n\n\n\n\n\n\nPress Record\n (on top left) to begin  recording your test on your device. Interact with the screen projection you see in front of you. You \nMUST use the bottom interface buttons\n for actions instead of the hardware buttons on your device. Hardware buttons include back button, home screen button and show apps button. Similarly, if your device has software buttons, \ndo not click them\n. Using the software buttons will cause mistakes in the recording.\n\n\n\n\n\n\n\n\nWhen you are done recording a test, \npress SAVE and name your test\n. You can then view the test in the app.moquality.com website.\n\n\n\n\n\n\n\n\nTo \nconfirm the test was valid, move to the Tests Tab and try to run the test\n. If you are unable to run the test, you may have to re-record it, or head down to the FAQ to see possible solutions.\n\n\n\n\n\n\n\n\nFAQ\n\u2693\n\n\nWhy does my phone not connect?\n\n\nDouble-check that USB debugging is on and that you have clicked 'Allow' on the on-screen popup. You may have to unplug and replug the device in some cases.\n\n\nWhy does it say I need to re-record in 'Stable Mode'?\n\n\nFor some apps and tests, the regular mode may be unable to capture all the necessary details to successfully run the test. You can toggle 'Stable Mode' inside the recording by going into 'Settings' and toggling the option.",
            "title": "Android Setup"
        },
        {
            "location": "/recorder/android/#recorder-setup-for-android-devices",
            "text": "",
            "title": "Recorder Setup for Android Devices"
        },
        {
            "location": "/recorder/android/#getting-started",
            "text": "Download the recorder from  app.moquality.com > Apps > Download Test Recorder     Select a device you would like to test with and  turn on USB Debugging , which can be found inside of  Settings > Developer Options > USB Debugging  and connect your device to your computer.  Press 'Always Allow\"  on the popup on the device.     Make sure to have  uploaded a version of your app to test onto www.app.moquality.com  and have filled out the package name and activity name.     Launch the recorder with your connected device and  log in with either your API key or username and password . Select your device and app from the drop down, as well as your screen size and keyboard preference (we recommend setting it to no-keyboard).     Press Record  (on top left) to begin  recording your test on your device. Interact with the screen projection you see in front of you. You  MUST use the bottom interface buttons  for actions instead of the hardware buttons on your device. Hardware buttons include back button, home screen button and show apps button. Similarly, if your device has software buttons,  do not click them . Using the software buttons will cause mistakes in the recording.     When you are done recording a test,  press SAVE and name your test . You can then view the test in the app.moquality.com website.     To  confirm the test was valid, move to the Tests Tab and try to run the test . If you are unable to run the test, you may have to re-record it, or head down to the FAQ to see possible solutions.",
            "title": "Getting Started"
        },
        {
            "location": "/recorder/android/#faq",
            "text": "Why does my phone not connect?  Double-check that USB debugging is on and that you have clicked 'Allow' on the on-screen popup. You may have to unplug and replug the device in some cases.  Why does it say I need to re-record in 'Stable Mode'?  For some apps and tests, the regular mode may be unable to capture all the necessary details to successfully run the test. You can toggle 'Stable Mode' inside the recording by going into 'Settings' and toggling the option.",
            "title": "FAQ"
        },
        {
            "location": "/recorder/ios/",
            "text": "Recorder Setup for iOS Devices\n\u2693\n\n\nIn order to use the recorder with iOS devices, some configuration is necessary. This page documents that configuration.\n\n\n\n\nNote\n\n\nThese steps were gathered via repeated attempts to determine the code signing process. It is possible that earlier attempts affected the steps determined, meaning that these may not work on a clean setup. Further testing is necessary.\n\n\n\n\nLog in to Apple Developer Portal\n\u2693\n\n\nFirst, log into \nthe Apple Developer Portal\n. Click the Account link at the top of the page to access your account info. In the sidebar on the left, you should see the following links:\n\n\n\n\nClick the \"Certificates, IDs & Profiles\" link.\n\n\nIf you already have a valid certificate, skip to step 3 (Alternate).\n\n\nGenerate a certificate\n\u2693\n\n\nAbove the certificate list on the next page, click the \n+\n button to generate a new certificate.\n\n\n\n\nSelect \"iOS App Development\".\n\n\n\n\nThe next page should give you instructions on how to generate a CSR. Follow those instructions before continuing.\n\n\n\n\n\n\nImport the certificate\n\u2693\n\n\nDownload the newly generated certificate.\n\n\n\n\nIf you already have a certificate generated, navigate to the certificate list, find your certificate, click on it, and then click the download button in the expanded panel.\n\n\n\n\nOnce the certificate is downloaded, locate it in Finder and double-click it. This should open the Keychain Access app with the certificate newly imported into the \"System\" keychain. To find it, click System in the sidebar, and then Certificates.\n\n\n\n\nThe certificate needs to be moved to the \"local\" keychain. To do so, simply drag it from the list of certificates on the local keychain in the sidebar. Once this is done, it should appear under \"My Certificates\", rather than just under \"Certificates\".\n\n\nGenerate an App ID\n\u2693\n\n\nBack in the developer portal, click \"App IDs\" on the sidebar.\n\n\n\n\nClick the \n+\n button at the top, much like when generating a certificate.\n\n\n\n\nName the ID something reasonable for its use, such as \"Recorder\".\n\n\n\n\nSelect \"Wildcard App ID\" and enter a single asterisk as the ID.\n\n\nTake note of the Team ID listed under the \"App ID Prefix\". You'll need it.\n\n\n\n\nClick \"Done\".\n\n\nGenerate a mobile provisioning profile\n\u2693\n\n\nClick \"All\" under \"Provisioning Profiles\" in the sidebar. You may need to scroll down to see it.\n\n\n\n\nClick the \n+\n button to generate a new profile, and then select \"iOS App Development\".\n\n\n\n\nSelect the App ID that you generated in the previous step.\n\n\n\n\nSelect the certificate generated in step 2, or your existing certificate if you did not generate one.\n\n\n\n\nClick the \"Select All\" checkbox on the device list.\n\n\n\n\nEnter a name for the profile.\n\n\n\n\nYou do \nnot\n need to download the profile. That will be handled automatically.\n\n\n\n\nSet up environment variables\n\u2693\n\n\nThe final step is to set the \n$DEVELOPMENT_TEAM\n environment variable to the Team ID from step 4. There are several ways to do this, but one of the simplest is to add the variable to the \n.bash_profile\n file in your home directory.\n\n\nOpen the \n$HOME/.bash_profile\n file in an editor of your choice and add the following line to the end of it:\n\n\nbash export DEVELOPMENT_TEAM=<Team ID>\n\n\n\n\n\nReplace \n<Team ID>\n with the your team ID.\n\n\nOnce this is done, you will need to log out and back in. Then simply run the recorder as normal.\n\n\nEnsure xcode is in system path\n\u2693\n\n\nGo to \nXcode > Preferences > Locations\n, and assign the Command Line Tools to XCode.",
            "title": "iOS Setup"
        },
        {
            "location": "/recorder/ios/#recorder-setup-for-ios-devices",
            "text": "In order to use the recorder with iOS devices, some configuration is necessary. This page documents that configuration.   Note  These steps were gathered via repeated attempts to determine the code signing process. It is possible that earlier attempts affected the steps determined, meaning that these may not work on a clean setup. Further testing is necessary.",
            "title": "Recorder Setup for iOS Devices"
        },
        {
            "location": "/recorder/ios/#log-in-to-apple-developer-portal",
            "text": "First, log into  the Apple Developer Portal . Click the Account link at the top of the page to access your account info. In the sidebar on the left, you should see the following links:   Click the \"Certificates, IDs & Profiles\" link.  If you already have a valid certificate, skip to step 3 (Alternate).",
            "title": "Log in to Apple Developer Portal"
        },
        {
            "location": "/recorder/ios/#generate-a-certificate",
            "text": "Above the certificate list on the next page, click the  +  button to generate a new certificate.   Select \"iOS App Development\".   The next page should give you instructions on how to generate a CSR. Follow those instructions before continuing.",
            "title": "Generate a certificate"
        },
        {
            "location": "/recorder/ios/#import-the-certificate",
            "text": "Download the newly generated certificate.   If you already have a certificate generated, navigate to the certificate list, find your certificate, click on it, and then click the download button in the expanded panel.   Once the certificate is downloaded, locate it in Finder and double-click it. This should open the Keychain Access app with the certificate newly imported into the \"System\" keychain. To find it, click System in the sidebar, and then Certificates.   The certificate needs to be moved to the \"local\" keychain. To do so, simply drag it from the list of certificates on the local keychain in the sidebar. Once this is done, it should appear under \"My Certificates\", rather than just under \"Certificates\".",
            "title": "Import the certificate"
        },
        {
            "location": "/recorder/ios/#generate-an-app-id",
            "text": "Back in the developer portal, click \"App IDs\" on the sidebar.   Click the  +  button at the top, much like when generating a certificate.   Name the ID something reasonable for its use, such as \"Recorder\".   Select \"Wildcard App ID\" and enter a single asterisk as the ID.  Take note of the Team ID listed under the \"App ID Prefix\". You'll need it.   Click \"Done\".",
            "title": "Generate an App ID"
        },
        {
            "location": "/recorder/ios/#generate-a-mobile-provisioning-profile",
            "text": "Click \"All\" under \"Provisioning Profiles\" in the sidebar. You may need to scroll down to see it.   Click the  +  button to generate a new profile, and then select \"iOS App Development\".   Select the App ID that you generated in the previous step.   Select the certificate generated in step 2, or your existing certificate if you did not generate one.   Click the \"Select All\" checkbox on the device list.   Enter a name for the profile.   You do  not  need to download the profile. That will be handled automatically.",
            "title": "Generate a mobile provisioning profile"
        },
        {
            "location": "/recorder/ios/#set-up-environment-variables",
            "text": "The final step is to set the  $DEVELOPMENT_TEAM  environment variable to the Team ID from step 4. There are several ways to do this, but one of the simplest is to add the variable to the  .bash_profile  file in your home directory.  Open the  $HOME/.bash_profile  file in an editor of your choice and add the following line to the end of it:  bash export DEVELOPMENT_TEAM=<Team ID>  Replace  <Team ID>  with the your team ID.  Once this is done, you will need to log out and back in. Then simply run the recorder as normal.",
            "title": "Set up environment variables"
        },
        {
            "location": "/recorder/ios/#ensure-xcode-is-in-system-path",
            "text": "Go to  Xcode > Preferences > Locations , and assign the Command Line Tools to XCode.",
            "title": "Ensure xcode is in system path"
        },
        {
            "location": "/recorder/features/",
            "text": "Recorder Feature List\n\u2693\n\n\nAssertions\n\u2693\n\n\nIn testing, users want to assert a particular output. For example, after a user login, the user want to see the name displayed correctly.\nThrough the recorder we can assert that.\nAdd an assertion to your test, to check whether an element has specific text, or exists.\n\n\n\n\nAPI Requests\n\u2693\n\n\nOur recorder allows to make API requests. It is useful in many scenarios where a user has to record a step and make an API request.\nYou can send API requests from within the app to set up your testing environment!\n\n\n\n\nExplore Tab\n\u2693\n\n\nYou can interact with the hierarchy of your app in the \nExplore Tab\n. Here you can view widget properties and add assertions for any screen in your app.\n\n\n\n\nKeyboard Input\n\u2693\n\n\nTo enter keyboard input, you must go through the keyboard button below the phone screen\n\n\n\n\nRecording\n\u2693\n\n\nWhen you press record, you app's cache will automatically cleared, and your app launched. You can turn auto-launch off in Settings. While in record mode, all interactions on the phone projection will be recorded. If you accidentally misclick an item, or an action wasn't intentional, you can delete the action from the action list to the right. Be warned! If you delete an action upon which later actions are dependant, such as a click that causes the app to change screens, subsequent attempts to run the test will fail.\n\n\n\n\nTest Editing\n\u2693\n\n\nTo edit a previously recorded test, go into the Tests tab. Open up the test you would like to edit and hover over the specific step. Click the edit icon to drop down into the editor.  Here you can edit the step description, select a new widget to target, and add a sleep action to happen after the step runs. This can be helpful if your app is taking too long to process a specific screen, and the replay algorithm has already moved on.\n\n\n\n\nTest Replay\n\u2693\n\n\nAfter you have a recorded a successful test, proceed to the Tests Tab and replay your test!",
            "title": "Features"
        },
        {
            "location": "/recorder/features/#recorder-feature-list",
            "text": "",
            "title": "Recorder Feature List"
        },
        {
            "location": "/recorder/features/#assertions",
            "text": "In testing, users want to assert a particular output. For example, after a user login, the user want to see the name displayed correctly.\nThrough the recorder we can assert that.\nAdd an assertion to your test, to check whether an element has specific text, or exists.",
            "title": "Assertions"
        },
        {
            "location": "/recorder/features/#api-requests",
            "text": "Our recorder allows to make API requests. It is useful in many scenarios where a user has to record a step and make an API request.\nYou can send API requests from within the app to set up your testing environment!",
            "title": "API Requests"
        },
        {
            "location": "/recorder/features/#explore-tab",
            "text": "You can interact with the hierarchy of your app in the  Explore Tab . Here you can view widget properties and add assertions for any screen in your app.",
            "title": "Explore Tab"
        },
        {
            "location": "/recorder/features/#keyboard-input",
            "text": "To enter keyboard input, you must go through the keyboard button below the phone screen",
            "title": "Keyboard Input"
        },
        {
            "location": "/recorder/features/#recording",
            "text": "When you press record, you app's cache will automatically cleared, and your app launched. You can turn auto-launch off in Settings. While in record mode, all interactions on the phone projection will be recorded. If you accidentally misclick an item, or an action wasn't intentional, you can delete the action from the action list to the right. Be warned! If you delete an action upon which later actions are dependant, such as a click that causes the app to change screens, subsequent attempts to run the test will fail.",
            "title": "Recording"
        },
        {
            "location": "/recorder/features/#test-editing",
            "text": "To edit a previously recorded test, go into the Tests tab. Open up the test you would like to edit and hover over the specific step. Click the edit icon to drop down into the editor.  Here you can edit the step description, select a new widget to target, and add a sleep action to happen after the step runs. This can be helpful if your app is taking too long to process a specific screen, and the replay algorithm has already moved on.",
            "title": "Test Editing"
        },
        {
            "location": "/recorder/features/#test-replay",
            "text": "After you have a recorded a successful test, proceed to the Tests Tab and replay your test!",
            "title": "Test Replay"
        },
        {
            "location": "/recorder/test-editing/",
            "text": "Test Editing in the Recorder\n\u2693\n\n\nIntroduction\n\u2693\n\n\nUsing the recorder to record test cases is one of the fastest, and most efficient ways to test your app. However, there may be times when you would like to tweak your individual test steps for more control, test editing allows you to do that!\n\n\nOpening the Edit Menu\n\u2693\n\n\nThe \nEdit Menu\n can be accessed by hovering over the selected \nTest Step\n, and clicking the \nEdit Button\n.\n\n\n\n\nEditing Step Description\n\u2693\n\n\nIf you would like to change the description of a test step, it's as easy as replacing the content inside the \nDescription\n tab and pressing \nSubmit\n\n\n\n\nEditing Test Parameters (Coming Soon)\n\u2693\n\n\nWe are currently in the process of adding the ability to parameterize test inputs, such as usernames and passwords, to expand the testing capabilities of an individual test.\n\n\n\n\nAdding Sleep Actions (Wait)\n\u2693\n\n\nSometimes\n our AI will try to continue through a test, despite the device not being ready to receive the additional information. This can happen for several reasons, including changes in internet connection speed, or background apps hogging the phone's processing power. The simplest way to tell the app to wait, is to add a sleep action immediately following a problematic action. \n\n\n\n\nSelecting a New Target (Beta)\n\u2693\n\n\nOccasionally\n, our AI will be unable to detect the appropriate widget or it may select the incorrect widget. To correct this we have added the ability to select a new target within current screenshot. To select a new widget, hover over the screenshot until you see a red box surround the particular item you would like to designate as a target.",
            "title": "Test Editing"
        },
        {
            "location": "/recorder/test-editing/#test-editing-in-the-recorder",
            "text": "",
            "title": "Test Editing in the Recorder"
        },
        {
            "location": "/recorder/test-editing/#introduction",
            "text": "Using the recorder to record test cases is one of the fastest, and most efficient ways to test your app. However, there may be times when you would like to tweak your individual test steps for more control, test editing allows you to do that!",
            "title": "Introduction"
        },
        {
            "location": "/recorder/test-editing/#opening-the-edit-menu",
            "text": "The  Edit Menu  can be accessed by hovering over the selected  Test Step , and clicking the  Edit Button .",
            "title": "Opening the Edit Menu"
        },
        {
            "location": "/recorder/test-editing/#editing-step-description",
            "text": "If you would like to change the description of a test step, it's as easy as replacing the content inside the  Description  tab and pressing  Submit",
            "title": "Editing Step Description"
        },
        {
            "location": "/recorder/test-editing/#editing-test-parameters-coming-soon",
            "text": "We are currently in the process of adding the ability to parameterize test inputs, such as usernames and passwords, to expand the testing capabilities of an individual test.",
            "title": "Editing Test Parameters (Coming Soon)"
        },
        {
            "location": "/recorder/test-editing/#adding-sleep-actions-wait",
            "text": "Sometimes  our AI will try to continue through a test, despite the device not being ready to receive the additional information. This can happen for several reasons, including changes in internet connection speed, or background apps hogging the phone's processing power. The simplest way to tell the app to wait, is to add a sleep action immediately following a problematic action.",
            "title": "Adding Sleep Actions (Wait)"
        },
        {
            "location": "/recorder/test-editing/#selecting-a-new-target-beta",
            "text": "Occasionally , our AI will be unable to detect the appropriate widget or it may select the incorrect widget. To correct this we have added the ability to select a new target within current screenshot. To select a new widget, hover over the screenshot until you see a red box surround the particular item you would like to designate as a target.",
            "title": "Selecting a New Target (Beta)"
        },
        {
            "location": "/getting-started/auto-test/",
            "text": "Auto-generated Test\n\u2693\n\n\nThis feature allows MQ-Bot (our AI Agent) to create tests automatically and executing them on devices users specify.\nThe MQ-Bot tries to systematically identify widgets on every screen and interacts with them. In the end, it gives you a list of test runs it has conducted and a pass or success for each of them, along with screenshots, AppMap, and various statistics. To view results and reports of the test runs, visit  \nDashboard\n.\n\n\nUse Case:\n\u2693\n\n\nIn contrast to demonstrating a test and running them, robot test can be used for quick feedback and check cases that you might otherwise miss out.The more you use this feature on your app, the smarter it gets. For example, if the robot finds a bug, it prioritizes testing towards creating test runs to produce  that bug. For enterprise customers, the robot learns the context of your app and creates test runs like a human would.\n\n\nIn order to automatically generate tests, click on Generate Tests.\nNow specify the name of the report, number of tests you want to generate and the maximum\namount of time MQ-Bot ,should run. For example, if you specify 10 tests to be generated in an hour, than the MQ-Bot will generate approximately 10 tests in an hour. If you specify\n30 min instead of an hour, it will still generate the same number of tests, but the\ntests will be shorter.\n\n\n\n\nTraining MQ-Bot\n\u2693\n\n\nOur MQ-Bot can be trained!! By recording with \nMoQuality Recorder\n, we can train the MQ-Bot to know the important\ntest flows and screens. It makes the MQ-Bot bias itself towards such flows and screen when creating tests.18 \n\n\nViewing results\n\u2693\n\n\nTo view results and reports of the test runs, visit  \nDashboard",
            "title": "Scheduling robot tests"
        },
        {
            "location": "/getting-started/auto-test/#auto-generated-test",
            "text": "This feature allows MQ-Bot (our AI Agent) to create tests automatically and executing them on devices users specify.\nThe MQ-Bot tries to systematically identify widgets on every screen and interacts with them. In the end, it gives you a list of test runs it has conducted and a pass or success for each of them, along with screenshots, AppMap, and various statistics. To view results and reports of the test runs, visit   Dashboard .",
            "title": "Auto-generated Test"
        },
        {
            "location": "/getting-started/auto-test/#use-case",
            "text": "In contrast to demonstrating a test and running them, robot test can be used for quick feedback and check cases that you might otherwise miss out.The more you use this feature on your app, the smarter it gets. For example, if the robot finds a bug, it prioritizes testing towards creating test runs to produce  that bug. For enterprise customers, the robot learns the context of your app and creates test runs like a human would.  In order to automatically generate tests, click on Generate Tests.\nNow specify the name of the report, number of tests you want to generate and the maximum\namount of time MQ-Bot ,should run. For example, if you specify 10 tests to be generated in an hour, than the MQ-Bot will generate approximately 10 tests in an hour. If you specify\n30 min instead of an hour, it will still generate the same number of tests, but the\ntests will be shorter.",
            "title": "Use Case:"
        },
        {
            "location": "/getting-started/auto-test/#training-mq-bot",
            "text": "Our MQ-Bot can be trained!! By recording with  MoQuality Recorder , we can train the MQ-Bot to know the important\ntest flows and screens. It makes the MQ-Bot bias itself towards such flows and screen when creating tests.18",
            "title": "Training MQ-Bot"
        },
        {
            "location": "/getting-started/auto-test/#viewing-results",
            "text": "To view results and reports of the test runs, visit   Dashboard",
            "title": "Viewing results"
        },
        {
            "location": "/getting-started/view-tests/",
            "text": "View Recorded Test Cases\n\u2693\n\n\nTo view your recorded tests, navigate to \nTests\n page. If you have not recorded a test yet, download the MoQuality Test Recorder and record your first test. A test consist of a series of actions performed on an app on a device. It is displayed as a series of screenshots which show a highlighted area indicating the action widget. The following page displays all the recorded tests with MoQuality Recorder.\n\n\n\n\nBy clicking on an individual test, you can see the screenshots of the test.",
            "title": "View Recorded Tests"
        },
        {
            "location": "/getting-started/view-tests/#view-recorded-test-cases",
            "text": "To view your recorded tests, navigate to  Tests  page. If you have not recorded a test yet, download the MoQuality Test Recorder and record your first test. A test consist of a series of actions performed on an app on a device. It is displayed as a series of screenshots which show a highlighted area indicating the action widget. The following page displays all the recorded tests with MoQuality Recorder.   By clicking on an individual test, you can see the screenshots of the test.",
            "title": "View Recorded Test Cases"
        },
        {
            "location": "/getting-started/test-suite/",
            "text": "Test Suites\n\u2693\n\n\nA \ntest\n is a \nseries of actions\n that should be performed to cover a use case or check an assertion. All of our tests start after clearing the cached data related to the app.\n\n\nA \ntest suite\n is a \nseries of tests\n that should be run in an order. A test report is a test of these test suites. A test is created using the MoQuality Recorder. After creating a few tests, you can create test suites. \n\n\n Use case \n\n\nA music app may have several tests related to playlists, therefore a playlist test suite would contain all the test cases related to playlist. Likewise a test suite would contain  tests for a music player.\n\n\n Creating a suite \n\n\nNavigate to the \nSuites\n tab and click on the Create Test Suite.\n\n\n\n\nNow name the Test Suite and select the tests that are part of it. You can create multiple test suites this way.",
            "title": "Creating Test Suites"
        },
        {
            "location": "/getting-started/test-suite/#test-suites",
            "text": "A  test  is a  series of actions  that should be performed to cover a use case or check an assertion. All of our tests start after clearing the cached data related to the app.  A  test suite  is a  series of tests  that should be run in an order. A test report is a test of these test suites. A test is created using the MoQuality Recorder. After creating a few tests, you can create test suites.    Use case   A music app may have several tests related to playlists, therefore a playlist test suite would contain all the test cases related to playlist. Likewise a test suite would contain  tests for a music player.   Creating a suite   Navigate to the  Suites  tab and click on the Create Test Suite.   Now name the Test Suite and select the tests that are part of it. You can create multiple test suites this way.",
            "title": "Test Suites"
        },
        {
            "location": "/getting-started/devices/",
            "text": "Create Device Group\n\u2693\n\n\nA device group is a collection of devices on which you want to run tests. A user can create a group of devices you want to run tests on. There are few presets available such as Google Devices, Samsung Devices, Popular Devices.\n\n\n\n\nIn order to create a custom device group \nclick the \"+ button\"\n. Custom device groups are important in many situations. For example, a user may want to run the apps on devices that have the latest android version, or to confirm it works on old versions. You can create a group of devices from a certain manufacturer, or create a device group composed of popular devices. See below for an example on how to make a custom group.\n\n\n\n\nWe rent devices from various test infrastructure providers. Today we support around 50 devices and we are continuously adding new devices into our system as and when our users need them.",
            "title": "Creating Device Groups"
        },
        {
            "location": "/getting-started/devices/#create-device-group",
            "text": "A device group is a collection of devices on which you want to run tests. A user can create a group of devices you want to run tests on. There are few presets available such as Google Devices, Samsung Devices, Popular Devices.   In order to create a custom device group  click the \"+ button\" . Custom device groups are important in many situations. For example, a user may want to run the apps on devices that have the latest android version, or to confirm it works on old versions. You can create a group of devices from a certain manufacturer, or create a device group composed of popular devices. See below for an example on how to make a custom group.   We rent devices from various test infrastructure providers. Today we support around 50 devices and we are continuously adding new devices into our system as and when our users need them.",
            "title": "Create Device Group"
        },
        {
            "location": "/getting-started/scheduling-tests/",
            "text": "Scheduling Tests\n\u2693\n\n\nWriting test cases is hard. Using MoQuality test recorder, it is a matter of a few clicks to record a test case. In the background, AI understands the test case and ensures it is playable across multiple devices and is adaptable to future app versions and os updates.\n\n\n Features: \n\n\n\n\nPerform any action that you will in your app\n\n\nAssertions which checks for text or widgets\n\n\nConvert demonstrations to tests and run it on any device on our cloud. \n\n\n\n\nUse Case:\n\u2693\n\n\n\n\n\n\nUsing the MoQuality recorder, you have recorded a login test on Nexus 6p that checks whether login functionality works on Nexus 6p or not. Now you want to test\nit on a Samsung Galaxy S8. All you have to do is schedule a test run on Samsung Galaxy S8.\n\n\n\n\n\n\nEnsuring that a new version of your app has all the  existing tests  running smoothly.\n\n\n\n\n\n\nEnsuring that a your app has all the  existing tests  running smoothly\non a new version of android/iOS.\n\n\n\n\n\n\nBefore a user is able to schedule tests runs on devices, he has to create test cases uses  MoQuality Recorder, select devices to run on, create various test suite. \n\n\n\n\nUpload an app\n\n\nCreate test cases using Recorder\n\n\nView Recorded Tests\n\n\nCreate test suites\n\n\nCreate device group\n\n\n\n\n Note: \n\nThe test cases you create adapt to every version of the app you upload. So the test, test suites, and device groups you create show up for every new version. Only the overview page keeps changing because the test report runs on a particular version.\n\n\nExecuting Tests\n\u2693\n\n\nYou can reach the Test Reports  from the Dashboard by clicking Overview. \n\n\n\nClick on Run Tests, then the following window would pop-up. Enter the name of the report, \nselect a device group, and select tests/suites you want to run on other devices.\n\n\n\n\nViewing results\n\u2693\n\n\nTo view results and reports of the test runs, visit  \nView Results",
            "title": "Scheduling Tests"
        },
        {
            "location": "/getting-started/scheduling-tests/#scheduling-tests",
            "text": "Writing test cases is hard. Using MoQuality test recorder, it is a matter of a few clicks to record a test case. In the background, AI understands the test case and ensures it is playable across multiple devices and is adaptable to future app versions and os updates.   Features:    Perform any action that you will in your app  Assertions which checks for text or widgets  Convert demonstrations to tests and run it on any device on our cloud.",
            "title": "Scheduling Tests"
        },
        {
            "location": "/getting-started/scheduling-tests/#use-case",
            "text": "Using the MoQuality recorder, you have recorded a login test on Nexus 6p that checks whether login functionality works on Nexus 6p or not. Now you want to test\nit on a Samsung Galaxy S8. All you have to do is schedule a test run on Samsung Galaxy S8.    Ensuring that a new version of your app has all the  existing tests  running smoothly.    Ensuring that a your app has all the  existing tests  running smoothly\non a new version of android/iOS.    Before a user is able to schedule tests runs on devices, he has to create test cases uses  MoQuality Recorder, select devices to run on, create various test suite.    Upload an app  Create test cases using Recorder  View Recorded Tests  Create test suites  Create device group    Note:  \nThe test cases you create adapt to every version of the app you upload. So the test, test suites, and device groups you create show up for every new version. Only the overview page keeps changing because the test report runs on a particular version.",
            "title": "Use Case:"
        },
        {
            "location": "/getting-started/scheduling-tests/#executing-tests",
            "text": "You can reach the Test Reports  from the Dashboard by clicking Overview.   Click on Run Tests, then the following window would pop-up. Enter the name of the report, \nselect a device group, and select tests/suites you want to run on other devices.",
            "title": "Executing Tests"
        },
        {
            "location": "/getting-started/scheduling-tests/#viewing-results",
            "text": "To view results and reports of the test runs, visit   View Results",
            "title": "Viewing results"
        },
        {
            "location": "/getting-started/pushkar/",
            "text": "TODO (PK)\n\u2693",
            "title": "Executing Tests"
        },
        {
            "location": "/getting-started/pushkar/#todo-pk",
            "text": "",
            "title": "TODO (PK)"
        },
        {
            "location": "/getting-started/view-results/",
            "text": "Viewing Results\n\u2693\n\n\nWhen a user has either scheduled tests or requested automatically generated tests, reports containing the results, success/failure of a tests, screenshot, various statistics, app maps are automatically generated. In order to view these\nresults,  navigate to the Overview page and a following screen shall appear.\n\n\n\n\nIf a user has not requested any tests, then there is no reporting.\nUnder \n Test Reports \n section,  each row represents a Test Report,  status, suites it ran on, device groups, and the various actions. The status is either a green tick signalling that no bugs found, red balloon showing that there are bugs, orange balloon indicating warnings or potential risks or an hour glass indicating that the tests yet to be executed. There are currently two results available now:\n\n\nView Report\n\u2693\n\n\nIt shows the test runs of all the tests in the report across all the selected devices. The report provides the details af tests as well such as if the test was successful along with any bugs. By clicking the view report button you get the details of the test runs.\n\n\n\n\nBy clicking on the individual test, you can see the screenshots of a test along with the highlighted widget that was clicked.\n\n\n\n\nView map\n\u2693\n\n\nIt present a snapshot of the whole app itself. It shows how all the screens are connected with each other and therefore is useful in understanding the whole app structure. It aids in coming up with good test cases. For example,\n if a certain screen is not present in the map, then a user might be interested in creating a test case containing that screen. Such test case can easily be created with MoQuality Recorder with a few clicks.",
            "title": "Dashboard"
        },
        {
            "location": "/getting-started/view-results/#viewing-results",
            "text": "When a user has either scheduled tests or requested automatically generated tests, reports containing the results, success/failure of a tests, screenshot, various statistics, app maps are automatically generated. In order to view these\nresults,  navigate to the Overview page and a following screen shall appear.   If a user has not requested any tests, then there is no reporting.\nUnder   Test Reports   section,  each row represents a Test Report,  status, suites it ran on, device groups, and the various actions. The status is either a green tick signalling that no bugs found, red balloon showing that there are bugs, orange balloon indicating warnings or potential risks or an hour glass indicating that the tests yet to be executed. There are currently two results available now:",
            "title": "Viewing Results"
        },
        {
            "location": "/getting-started/view-results/#view-report",
            "text": "It shows the test runs of all the tests in the report across all the selected devices. The report provides the details af tests as well such as if the test was successful along with any bugs. By clicking the view report button you get the details of the test runs.   By clicking on the individual test, you can see the screenshots of a test along with the highlighted widget that was clicked.",
            "title": "View Report"
        },
        {
            "location": "/getting-started/view-results/#view-map",
            "text": "It present a snapshot of the whole app itself. It shows how all the screens are connected with each other and therefore is useful in understanding the whole app structure. It aids in coming up with good test cases. For example,\n if a certain screen is not present in the map, then a user might be interested in creating a test case containing that screen. Such test case can easily be created with MoQuality Recorder with a few clicks.",
            "title": "View map"
        },
        {
            "location": "/integration-ci-cd/mq-cli/",
            "text": "MoQuality CLI\n\u2693\n\n\nIntroduction\n\u2693\n\n\nMoQuality CLI (MQ CLI) is a Command Line Interface that enables users to interact with MoQuality through their command line.\n\n\nInstallation\n\u2693\n\n\nMQ CLI can be installed using either yarn or npm. The respective commands for either are below.\n\n\n    $ yarn global add mq-cli\n    $ npm install -g mq-cli\n\n\n\n\n\nFor a list of MQ CLI commands, type \nmq help\n in your command line.\n\n\nUsage\n\u2693\n\n\nThe standard usage of MQ CLI commands is \nmq [COMMAND]\n, where COMMAND is one of the commands listed by the \nmq help\n command and below.\n\n\nCommands\n\u2693\n\n\n\n\napps\n\n\ndevices\n\n\nget-recorder\n\n\nhelp\n\n\nlogin\n\n\nschedule\n\n\nstatus\n\n\nsuites\n\n\ntests\n\n\nupload\n\n\nuser\n\n\n\n\napps\n\u2693\n\n\nDisplays a list of the current user's apps.\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nUsage\n\n\n        $ mq apps\n\n\n\n\n\ndevices\n\u2693\n\n\nDisplays a list of the current user's devices. Use these devices while scheduling test runs.\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nUsage\n\n\n        $ mq devices\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nOptions\n\n\n        -a --app=app             app id\n\n\n\n\n\nget-recorder\n\u2693\n\n\nDownloads or updates the recorder.\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nUsage\n\n\n        $ mq get-recorder\n\n\n\n\n\nhelp\n\u2693\n\n\nDisplays the version, usage, and commands for MQ CLI.\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nUsage\n\n\n        $ mq help\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nOptions\n\n\n        -all                     see all commands in CLI\n\n\n\n\n\nlogin\n\u2693\n\n\nLogs the user in with either their email and password or their API key.\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nUsage\n\n\n        $ mq login\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nOptions\n\n\n        -e, --email=email        email of user\n        -p, --password=password  password of user\n        -a, --api_key=api_key    api_key of user\n\n\n\n\n\nschedule\n\u2693\n\n\nSchedules test runs for a particular app project. Runs are scheduled on the last uploaded version.\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nUsage\n\n\n        $ mq schedule\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nOptions\n\n\n        -a, --app=app            app id\n        -s, --suite=suite        suite id \n        -d, --device=device      device group id\n\n\n\n\n\nstatus\n\u2693\n\n\nDisplays status on all test runs for the latest version uploaded for a particular app project.\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nUsage\n\n\n        $ mq status\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nOptions\n\n\n        -a --app=app             app id\n\n\n\n\n\nsuites\n\u2693\n\n\nDisplays test suites created for a particular app project.\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nUsage\n\n\n        $ mq devices\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nOptions\n\n\n        -a --app=app             app id\n\n\n\n\n\ntests\n\u2693\n\n\nShow tests recorded for a particular app project.\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nUsage\n\n\n        $ mq tests\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nOptions\n\n\n        -a --app=app             app id\n\n\n\n\n\nupload\n\u2693\n\n\nUploads a new version to an app project on MoQuality.\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nUsage\n\n\n        $ mq upload\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nOptions\n\n\n        -a --app=app             app id\n        -f, --file=file          location of app\n\n\n\n\n\nuser\n\u2693\n\n\nDisplays current user information.\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nUsage\n\n\n        $ mq user",
            "title": "MoQuality CLI"
        },
        {
            "location": "/integration-ci-cd/mq-cli/#moquality-cli",
            "text": "",
            "title": "MoQuality CLI"
        },
        {
            "location": "/integration-ci-cd/mq-cli/#introduction",
            "text": "MoQuality CLI (MQ CLI) is a Command Line Interface that enables users to interact with MoQuality through their command line.",
            "title": "Introduction"
        },
        {
            "location": "/integration-ci-cd/mq-cli/#installation",
            "text": "MQ CLI can be installed using either yarn or npm. The respective commands for either are below.      $ yarn global add mq-cli\n    $ npm install -g mq-cli  For a list of MQ CLI commands, type  mq help  in your command line.",
            "title": "Installation"
        },
        {
            "location": "/integration-ci-cd/mq-cli/#usage",
            "text": "The standard usage of MQ CLI commands is  mq [COMMAND] , where COMMAND is one of the commands listed by the  mq help  command and below.",
            "title": "Usage"
        },
        {
            "location": "/integration-ci-cd/mq-cli/#commands",
            "text": "apps  devices  get-recorder  help  login  schedule  status  suites  tests  upload  user",
            "title": "Commands"
        },
        {
            "location": "/integration-ci-cd/mq-cli/#apps",
            "text": "Displays a list of the current user's apps.  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Usage          $ mq apps",
            "title": "apps"
        },
        {
            "location": "/integration-ci-cd/mq-cli/#devices",
            "text": "Displays a list of the current user's devices. Use these devices while scheduling test runs.  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Usage          $ mq devices  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Options          -a --app=app             app id",
            "title": "devices"
        },
        {
            "location": "/integration-ci-cd/mq-cli/#get-recorder",
            "text": "Downloads or updates the recorder.  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Usage          $ mq get-recorder",
            "title": "get-recorder"
        },
        {
            "location": "/integration-ci-cd/mq-cli/#help",
            "text": "Displays the version, usage, and commands for MQ CLI.  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Usage          $ mq help  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Options          -all                     see all commands in CLI",
            "title": "help"
        },
        {
            "location": "/integration-ci-cd/mq-cli/#login",
            "text": "Logs the user in with either their email and password or their API key.  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Usage          $ mq login  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Options          -e, --email=email        email of user\n        -p, --password=password  password of user\n        -a, --api_key=api_key    api_key of user",
            "title": "login"
        },
        {
            "location": "/integration-ci-cd/mq-cli/#schedule",
            "text": "Schedules test runs for a particular app project. Runs are scheduled on the last uploaded version.  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Usage          $ mq schedule  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Options          -a, --app=app            app id\n        -s, --suite=suite        suite id \n        -d, --device=device      device group id",
            "title": "schedule"
        },
        {
            "location": "/integration-ci-cd/mq-cli/#status",
            "text": "Displays status on all test runs for the latest version uploaded for a particular app project.  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Usage          $ mq status  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Options          -a --app=app             app id",
            "title": "status"
        },
        {
            "location": "/integration-ci-cd/mq-cli/#suites",
            "text": "Displays test suites created for a particular app project.  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Usage          $ mq devices  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Options          -a --app=app             app id",
            "title": "suites"
        },
        {
            "location": "/integration-ci-cd/mq-cli/#tests",
            "text": "Show tests recorded for a particular app project.  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Usage          $ mq tests  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Options          -a --app=app             app id",
            "title": "tests"
        },
        {
            "location": "/integration-ci-cd/mq-cli/#upload",
            "text": "Uploads a new version to an app project on MoQuality.  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Usage          $ mq upload  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Options          -a --app=app             app id\n        -f, --file=file          location of app",
            "title": "upload"
        },
        {
            "location": "/integration-ci-cd/mq-cli/#user",
            "text": "Displays current user information.  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Usage          $ mq user",
            "title": "user"
        },
        {
            "location": "/integration-ci-cd/fastlane/",
            "text": "Integrate with \nfastlane\n\u2693\n\n\nIntroduction\n\u2693\n\n\nfastlane\n is a Continuous Integration and Continuous Delivery tool for iOS and Android apps. MoQuality integrates with \nfastlane\n through the simple addition of a step to a lane.\n\n\nPrerequisites\n\u2693\n\n\n\n\nfastlane\n: If you have not yet installed \nfastlane\n, follow the instructions \nhere\n.\n\n\nMQ CLI: \nInstall MQ CLI\n.\n\n\nMoQuality app: If you intend to upload a new build of an app, ensure that you have already uploaded the first version through the \nMoQuality website\n.\n\n\n\n\nInstructions\n\u2693\n\n\nTo integrate MoQuality with \nfastlane\n, you will add a step to your lane that runs a shell script containing your MQ CLI commands. For this documentation, we will call that script \nmq.sh\n, but you can call it whatever you wish.\n\n\nThere are \ntwo environment variables that you must set\n. The first variable is \nAPI_KEY\n, which will enable user login. To find your API key, run \nmq login\n in your command line to log in to MoQuality. Then, run \nmq user\n to display user information. Your API key will be in the list of returned information. The second variable is \nAPP_ID\n. This will specify which app is being uploaded. To find your app id, log in with \nmq login\n and run \nmq apps\n to see a list of your apps. Find your app in the list and locate the app id in the same row. See the below example commands for setting these variables.\n\n\n$ \nexport\n \nAPI_KEY\n=[\nOBTAINED_VALUE\n]\n\n$ \nexport\n \nAPP_ID\n=[\nOBTAINED_VALUE\n]\n\n\n\n\n\n\nCreate a shell script\n in the same directory as your \nFastfile\n called \nmq.sh\n. \nOpen that shell script\n in an editor.\n\n\nThis shell script will contain the MQ CLI commands that your new step will run. Before writing that step, we will write the shell script. The next section follows the creation of a shell script to upload an apk file, built using Gradle, to MoQuality.\n\n\n#!/bin/sh\n\n\nmq login -a \n$API_KEY\n\nmq user\nmq upload -a \n$APP_ID\n -f \n$1\n\nmq apps\n\n\n\n\n\n\n\n\n\nmq login -a $API_KEY\n logs you in using your API key.\n\n\n\n\n\n\nmq user\n returns user information, and you can check that your user is correct.\n\n\n\n\n\n\nmq upload -a $APP_ID -f $1\n will upload your app, whose location is provided by \n$1\n, the path to your apk file that will be passed as an argument. The command uses \n$APP_ID\n to determine which app is being uploaded.\n\n\n\n\n\n\nmq apps\n returns a list of your apps, and you can confirm that your app version has incremented by one.\n\n\n\n\n\n\nOpen your \nFastfile\n in an editor\n. Find the lane to which you want to add the MoQuality step. If you build your app in this lane, make sure you add the new step after the app has been built. Below is an example lane before the step has been added.\n\n\nlane :beta do\n\n  \ngradle(task\n:\n \n\"clean\n \nassembleDebug\"\n)\n\n\nend\n\n\n\n\n\n\nAdd a shell method that runs your shell script\n to the lane. If you are following the example upload script, pass as an argument to the script the output variable from the Gradle step that provides the apk path. Below is the updated example lane.\n\n\nlane :beta do\n\n  \ngradle(task\n:\n \n\"clean\n \nassembleDebug\"\n)\n\n  \nsh(\u201csh\u201d,\u201dmqtest.sh\u201d,\"#{lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]}\")\n\n\nend\n\n\n\n\n\n\nNow that you have integrated MoQuality with \nfastlane\n, \ntry running the lane with \nfastlane [LANE_NAME]\n in your command line.",
            "title": "Integrate with fastlane"
        },
        {
            "location": "/integration-ci-cd/fastlane/#integrate-with-fastlane",
            "text": "",
            "title": "Integrate with fastlane"
        },
        {
            "location": "/integration-ci-cd/fastlane/#introduction",
            "text": "fastlane  is a Continuous Integration and Continuous Delivery tool for iOS and Android apps. MoQuality integrates with  fastlane  through the simple addition of a step to a lane.",
            "title": "Introduction"
        },
        {
            "location": "/integration-ci-cd/fastlane/#prerequisites",
            "text": "fastlane : If you have not yet installed  fastlane , follow the instructions  here .  MQ CLI:  Install MQ CLI .  MoQuality app: If you intend to upload a new build of an app, ensure that you have already uploaded the first version through the  MoQuality website .",
            "title": "Prerequisites"
        },
        {
            "location": "/integration-ci-cd/fastlane/#instructions",
            "text": "To integrate MoQuality with  fastlane , you will add a step to your lane that runs a shell script containing your MQ CLI commands. For this documentation, we will call that script  mq.sh , but you can call it whatever you wish.  There are  two environment variables that you must set . The first variable is  API_KEY , which will enable user login. To find your API key, run  mq login  in your command line to log in to MoQuality. Then, run  mq user  to display user information. Your API key will be in the list of returned information. The second variable is  APP_ID . This will specify which app is being uploaded. To find your app id, log in with  mq login  and run  mq apps  to see a list of your apps. Find your app in the list and locate the app id in the same row. See the below example commands for setting these variables.  $  export   API_KEY =[ OBTAINED_VALUE ] \n$  export   APP_ID =[ OBTAINED_VALUE ]   Create a shell script  in the same directory as your  Fastfile  called  mq.sh .  Open that shell script  in an editor.  This shell script will contain the MQ CLI commands that your new step will run. Before writing that step, we will write the shell script. The next section follows the creation of a shell script to upload an apk file, built using Gradle, to MoQuality.  #!/bin/sh \n\nmq login -a  $API_KEY \nmq user\nmq upload -a  $APP_ID  -f  $1 \nmq apps    mq login -a $API_KEY  logs you in using your API key.    mq user  returns user information, and you can check that your user is correct.    mq upload -a $APP_ID -f $1  will upload your app, whose location is provided by  $1 , the path to your apk file that will be passed as an argument. The command uses  $APP_ID  to determine which app is being uploaded.    mq apps  returns a list of your apps, and you can confirm that your app version has incremented by one.    Open your  Fastfile  in an editor . Find the lane to which you want to add the MoQuality step. If you build your app in this lane, make sure you add the new step after the app has been built. Below is an example lane before the step has been added.  lane :beta do \n   gradle(task :   \"clean   assembleDebug\" )  end   Add a shell method that runs your shell script  to the lane. If you are following the example upload script, pass as an argument to the script the output variable from the Gradle step that provides the apk path. Below is the updated example lane.  lane :beta do \n   gradle(task :   \"clean   assembleDebug\" ) \n   sh(\u201csh\u201d,\u201dmqtest.sh\u201d,\"#{lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]}\")  end   Now that you have integrated MoQuality with  fastlane ,  try running the lane with  fastlane [LANE_NAME]  in your command line.",
            "title": "Instructions"
        },
        {
            "location": "/integration-ci-cd/bitrise/",
            "text": "Integrate with Bitrise\n\u2693\n\n\nIntroduction\n\u2693\n\n\nBitrise is a Continuous Integration and Delivery Platform as a Service. MoQuality integrates with the workflows of Bitrise by adding a step to a workflow. The following instructions outline how to integrate MoQuality with your Bitrise workflow.\n\n\nPrerequisites\n\u2693\n\n\n\n\nBitrise: If you have not yet installed Bitrise, follow the instructions \nhere\n.\n\n\nMQ CLI: \nInstall MQ CLI\n.\n\n\nMoQuality app: If you intend to upload a new build of an app, ensure that you have already uploaded the first version through the \nMoQuality website\n.\n\n\n\n\nInstructions\n\u2693\n\n\n\n\n\n\nIn your command line, navigate to your desired directory, and \nclone your git repository\n.\n\n\n$\n \ngit\n \nclone\n \n[\ngit\n \nrepository\n]\n\n\n\n\n\n\n\n\n\n\nIntegrating MoQuality with Bitrise requires \nseveral variables that you must export\n. The first variable is \nAPI_KEY\n, which will enable user login. To find your API key, run \nmq login\n in your command line to log in to MoQuality. Then, run \nmq user\n to display user information. Your API key will be in the list of returned information. The next variable is \nAPP_ID\n. This will specify which app is being uploaded. To find your app id, log in with \nmq login\n and run \nmq apps\n to see a list of your apps. Find your app in the list and locate the app id in the same row. The third variable is \nAPK_PATH\n, the path to your folder for apk's. Navigate through your file explorer to find this path. See the below commands for an example of setting these variables with a Calculator app.\n\n\n$ \nexport\n \nAPI_KEY\n=[\nOBTAINED_VALUE\n]\n\n$ \nexport\n \nAPP_ID\n=[\nOBTAINED_VALUE\n]\n\n$ \nexport\n \nAPK_PATH\n=\n/Users/\n[\nUSERNAME\n]\n/Calculator/app/build/outputs/apk/\n\n\n\n\n\n\n\n\n\nEnsure bitrise.yml is in your current directory\n, and \nopen the file\n in an editor.\n\n\n\n\n\n\nIn bitrise.yml, there should be environment variables \nGRADLE_BUILD_FILE_PATH\n and \nGRADLEW_PATH\n. These are the paths to your build.gradle and gradlew files, respectively. You can find these paths using your file explorer. \nWhen you know the paths, enter them in bitrise.yml for their respective variables.\n The below code is an example of how your variables should look.\n\n\napp\n:\n\n  \nenvs\n:\n\n  \n-\n \nGRADLE_BUILD_FILE_PATH\n:\n \n/Users/[USERNAME]/Calculator/\nbuild\n.\ngradle\n\n  \n-\n \nGRADLEW_PATH\n:\n \n/Users/[USERNAME]/Calculator/g\nradlew\n\n\n\n\n\n\n\n\n\n\nThere are two default workflows in bitrise.yml: deploy and primary. \nTo begin adding a step\n integrating MoQuality with either of these workflows, \nremove the last two steps, \ndeploy-to-bitrise-io@1.3.10\n and \ncache-push@2.0.5\n. In place of those steps, \nadd\n:\n\n\n-\n \nscript\n@1.1.5\n:\n\n    \ninputs\n:\n\n    \n-\n \ncontent\n:\n \n|\n\n\n\n\n\n\n\n\n\n\nThe lines following \ncontent\n are shell commands. \nYou may create a shell script\n to run MoQuality commands and run that script in Bitrise by adding \nsh [script name].sh\n beneath \n- content: |\n, \nor you can add the MoQuality commands\n beneath \n- content: |\n without a shell script. The following \nsub-intructions exlain how to upload a new build of an app\n. Again, these commands can either be run through a shell script or placed directly into bitrise.yml.\n\n\n\n\n\n\nBelow are the commands to upload an app to MoQuality:\n\n\nmq login -a $API_KEY\nmq user\nmq upload -a $APP_ID -f $APK_PATH/app-debug.apk\nmq apps\n\n\n\n\n\n\n\n\n\nmq login -a $API_KEY\n will log you in using your API key.\n\n\n\n\n\n\nmq user\n returns user information, and you can check that your user is correct.\n\n\n\n\n\n\nmq upload -a $APP_ID -f $APK_PATH/app-debug.apk\n will upload your app, whose location is provided by \n$APK_PATH\n, and the command uses \n$APP_ID\n to determine which app is being uploaded.\n\n\n\n\n\n\nmq apps\n returns a list of the users apps, and you can confirm that your app version has incremented by one.\n\n\n\n\n\n\n\n\n\n\nYour \nnew step\n, integrating MoQuality with Bitrise, should be \nformatted like one of the two examples below\n.\n\n\n-\n \nscript\n@1.1.5\n:\n\n    \ninputs\n:\n\n    \n-\n \ncontent\n:\n \n|\n\n        \nmq\n \nlogin\n \n-\na\n \n$\nAPI_KEY\n\n        \nmq\n \nuser\n\n        \nmq\n \nupload\n \n-\na\n \n$\nAPP_ID\n \n-\nf\n \n$\nAPK_PATH\n/\napp\n-\ndebug\n.\napk\n\n        \nmq\n \napps\n\n\n\n-\n \nscript\n@1.1.5\n:\n\n    \ninputs\n:\n\n    \n-\n \ncontent\n:\n \n|\n\n        \nsh\n \n[\nscript\n \nname\n].\nsh\n\n\n\n\n\n\n\n\n\n\nIn your command line, \nrun \nbitrise run [workflow]\n.\n\n\n\n\n\n\nTroubleshooting\n\u2693\n\n\nPermission denied when installing MQ CLI\n\n\nRun \nsudo chown -R [USERNAME] /usr/local/lib/node_modules\n in your terminal. This will give you permission to write to the node_modules directory.\n\n\nGradle-runner step fails for task ':app:mergeDebugResources'\n\n\nDon't worry about this error. Run the workflow again, and it should work.",
            "title": "Integrate with Bitrise"
        },
        {
            "location": "/integration-ci-cd/bitrise/#integrate-with-bitrise",
            "text": "",
            "title": "Integrate with Bitrise"
        },
        {
            "location": "/integration-ci-cd/bitrise/#introduction",
            "text": "Bitrise is a Continuous Integration and Delivery Platform as a Service. MoQuality integrates with the workflows of Bitrise by adding a step to a workflow. The following instructions outline how to integrate MoQuality with your Bitrise workflow.",
            "title": "Introduction"
        },
        {
            "location": "/integration-ci-cd/bitrise/#prerequisites",
            "text": "Bitrise: If you have not yet installed Bitrise, follow the instructions  here .  MQ CLI:  Install MQ CLI .  MoQuality app: If you intend to upload a new build of an app, ensure that you have already uploaded the first version through the  MoQuality website .",
            "title": "Prerequisites"
        },
        {
            "location": "/integration-ci-cd/bitrise/#instructions",
            "text": "In your command line, navigate to your desired directory, and  clone your git repository .  $   git   clone   [ git   repository ]     Integrating MoQuality with Bitrise requires  several variables that you must export . The first variable is  API_KEY , which will enable user login. To find your API key, run  mq login  in your command line to log in to MoQuality. Then, run  mq user  to display user information. Your API key will be in the list of returned information. The next variable is  APP_ID . This will specify which app is being uploaded. To find your app id, log in with  mq login  and run  mq apps  to see a list of your apps. Find your app in the list and locate the app id in the same row. The third variable is  APK_PATH , the path to your folder for apk's. Navigate through your file explorer to find this path. See the below commands for an example of setting these variables with a Calculator app.  $  export   API_KEY =[ OBTAINED_VALUE ] \n$  export   APP_ID =[ OBTAINED_VALUE ] \n$  export   APK_PATH = /Users/ [ USERNAME ] /Calculator/app/build/outputs/apk/    Ensure bitrise.yml is in your current directory , and  open the file  in an editor.    In bitrise.yml, there should be environment variables  GRADLE_BUILD_FILE_PATH  and  GRADLEW_PATH . These are the paths to your build.gradle and gradlew files, respectively. You can find these paths using your file explorer.  When you know the paths, enter them in bitrise.yml for their respective variables.  The below code is an example of how your variables should look.  app : \n   envs : \n   -   GRADLE_BUILD_FILE_PATH :   /Users/[USERNAME]/Calculator/ build . gradle \n   -   GRADLEW_PATH :   /Users/[USERNAME]/Calculator/g radlew     There are two default workflows in bitrise.yml: deploy and primary.  To begin adding a step  integrating MoQuality with either of these workflows,  remove the last two steps,  deploy-to-bitrise-io@1.3.10  and  cache-push@2.0.5 . In place of those steps,  add :  -   script @1.1.5 : \n     inputs : \n     -   content :   |     The lines following  content  are shell commands.  You may create a shell script  to run MoQuality commands and run that script in Bitrise by adding  sh [script name].sh  beneath  - content: | ,  or you can add the MoQuality commands  beneath  - content: |  without a shell script. The following  sub-intructions exlain how to upload a new build of an app . Again, these commands can either be run through a shell script or placed directly into bitrise.yml.    Below are the commands to upload an app to MoQuality:  mq login -a $API_KEY\nmq user\nmq upload -a $APP_ID -f $APK_PATH/app-debug.apk\nmq apps    mq login -a $API_KEY  will log you in using your API key.    mq user  returns user information, and you can check that your user is correct.    mq upload -a $APP_ID -f $APK_PATH/app-debug.apk  will upload your app, whose location is provided by  $APK_PATH , and the command uses  $APP_ID  to determine which app is being uploaded.    mq apps  returns a list of the users apps, and you can confirm that your app version has incremented by one.      Your  new step , integrating MoQuality with Bitrise, should be  formatted like one of the two examples below .  -   script @1.1.5 : \n     inputs : \n     -   content :   | \n         mq   login   - a   $ API_KEY \n         mq   user \n         mq   upload   - a   $ APP_ID   - f   $ APK_PATH / app - debug . apk \n         mq   apps  -   script @1.1.5 : \n     inputs : \n     -   content :   | \n         sh   [ script   name ]. sh     In your command line,  run  bitrise run [workflow] .",
            "title": "Instructions"
        },
        {
            "location": "/integration-ci-cd/bitrise/#troubleshooting",
            "text": "Permission denied when installing MQ CLI  Run  sudo chown -R [USERNAME] /usr/local/lib/node_modules  in your terminal. This will give you permission to write to the node_modules directory.  Gradle-runner step fails for task ':app:mergeDebugResources'  Don't worry about this error. Run the workflow again, and it should work.",
            "title": "Troubleshooting"
        },
        {
            "location": "/integration-ci-cd/circleci/",
            "text": "Integrate with CircleCI\n\u2693\n\n\nIntroduction\n\u2693\n\n\nCircleCI is a Continuous Integration and Continuous Delivery platform that allows developers to automate the build, test, and deployment of software for mobile, enterprise, and web applications. MoQuality integrates with CircleCI by simply adding a step to a job. This step enables devleopers to use MQ CLI within their container. The following instructions walk through how to integrate MoQuality with CircleCI.\n\n\nPrerequisites\n\u2693\n\n\n\n\nCircleCI: If you have not yet installed CircleCI, follow the instructions \nhere\n.\n\n\nMQ CLI: \nInstall MQ CLI\n.\n\n\nMoQuality app: If you intend to upload a new build of an app using MQ CLI, ensure that you have already uploaded the first version through the \nMoQuality website\n.\n\n\n\n\nInstructions\n\u2693\n\n\n\n\n\n\nOpen your \nconfig.yml\n file\n in an editor.\n\n\n\n\n\n\nUnder \nsteps:\n in your job, \nadd a run step called \nInstall mq-cli\n.\n\n\n- run:\n    name: Install MQ CLI\n\n\n\n\n\n\n\n\n\nBeneath \nname:\n, \nadd \ncommand: |\n. This indicates that you are going to issue multiple lines of commands. Your step should look like the below.\n\n\n- run:\n    name: Install MQ CLI\n    command: |\n\n\n\n\n\n\n\n\n\nThere are \nfour commands you must run to install MQ CLI\n within your container. The first two are \ncurl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -\n and \nsudo apt-get install -y nodejs\n. These commands are based off of \nthese instructions\n for installing Nodejs via a package manager. Installing Nodejs enables the use of npm commands, which will be necessary for installing MQ CLI. The third command to run is \nsudo chown -R $(whoami) /usr/lib/node_modules /usr/bin\n. This command will give the user write permissions to two directories whose write permissions are necessary for the installation of MQ CLI. Finally, the command \nnpm install -g mq-cli\n installs MQ CLI. You have now created the step that installs MQ CLI and enables MQ CLI commands within your container. \nYour step should look like the below\n.\n\n\n- run:\n    name: Install MQ CLI\n    command: |\n      curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -\n      sudo apt-get install -y nodejs\n      sudo chown -R $(whoami) /usr/lib/node_modules /usr/bin\n      npm install -g mq-cli\n\n\n\n\n\n\n\n\n\nNow that you have access to MQ CLI commands, you can create a subsequent step of your own to perform a task with these commands. The following sub-instructions breakdown \nhow to write a step that uploads your app to MoQuality\n using MQ CLI commands.\n\n\n- run:\n    name: Login and Upload to MoQuality\n    command: |\n      mq login -a [API_KEY]\n      mq user\n      mq upload -f [APK_PATH] -a [APP_ID]\n      mq apps\n\n\n\n\n\n\n\n\n\nThe first two lines create a step called \nUpload to MoQuality\n.\n\n\n\n\n\n\nAs before, the line \ncommand: |\n indicates that you are going to issue multiple lines of commands.\n\n\n\n\n\n\nmq login -a [API_KEY]\n logs you in using your API key. Your API key uniquely identifies your account. To find your API key, run \nmq login\n in your command line and follow the prompts to log in to your account. Next, run \nmq user\n to display user information. Your API key will be in the list of returned information.\n\n\n\n\n\n\nmq user\n returns user information, and you can check that your user is correct.\n\n\n\n\n\n\nmq upload -f [APK_PATH] -a [APP_ID]\n will upload your app, whose location is provided by \n[APK_PATH]\n, the path to your apk file. The command uses \n[APP_ID]\n to determine which app is being uploaded. Your app id uniquely identifies your app. To find your app id, log in with \nmq login\n and run \nmq apps\n to see a list of your apps. Find your app in the list and locate the app id in the same row.\n\n\n\n\n\n\nmq apps\n returns a list of your apps, and you can confirm that your app version has incremented by one.\n\n\n\n\n\n\n\n\n\n\nNow that you have created new steps, integrating MoQuality with CircleCI, \nrun \ncircleci build\n in your command line to run the build job. If you added the steps within a job other than build, \nadd the \n--job\n option followed by the name of the job\n to the \ncircleci build\n command.\n\n\n\n\n\n\nNotes\n\u2693\n\n\nWe do not recommend running the commands to install MQ CLI within a docker image and saving that image for future use. If you do so, and updates to MQ CLI are released, your docker image will not be using them. It is best to install MQ CLI every time you run the workflow, so you are always using the most up-to-date version of MQ CLI. This is what was done within the instructions.\n\n\nTroubleshooting\n\u2693\n\n\nWrite permissions error when installing MQ CLI\n\n\nRead the error to find the directory to which you cannot write. Add the path of that directory to your \nsudo chown -R $(whoami) /usr/lib/node_modules /usr/bin\n command. The command will then look like \nsudo chown -R $(whoami) /usr/lib/node_modules /usr/bin [DIRECTORY_PATH]\n.",
            "title": "Integrate with CircleCI"
        },
        {
            "location": "/integration-ci-cd/circleci/#integrate-with-circleci",
            "text": "",
            "title": "Integrate with CircleCI"
        },
        {
            "location": "/integration-ci-cd/circleci/#introduction",
            "text": "CircleCI is a Continuous Integration and Continuous Delivery platform that allows developers to automate the build, test, and deployment of software for mobile, enterprise, and web applications. MoQuality integrates with CircleCI by simply adding a step to a job. This step enables devleopers to use MQ CLI within their container. The following instructions walk through how to integrate MoQuality with CircleCI.",
            "title": "Introduction"
        },
        {
            "location": "/integration-ci-cd/circleci/#prerequisites",
            "text": "CircleCI: If you have not yet installed CircleCI, follow the instructions  here .  MQ CLI:  Install MQ CLI .  MoQuality app: If you intend to upload a new build of an app using MQ CLI, ensure that you have already uploaded the first version through the  MoQuality website .",
            "title": "Prerequisites"
        },
        {
            "location": "/integration-ci-cd/circleci/#instructions",
            "text": "Open your  config.yml  file  in an editor.    Under  steps:  in your job,  add a run step called  Install mq-cli .  - run:\n    name: Install MQ CLI    Beneath  name: ,  add  command: | . This indicates that you are going to issue multiple lines of commands. Your step should look like the below.  - run:\n    name: Install MQ CLI\n    command: |    There are  four commands you must run to install MQ CLI  within your container. The first two are  curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -  and  sudo apt-get install -y nodejs . These commands are based off of  these instructions  for installing Nodejs via a package manager. Installing Nodejs enables the use of npm commands, which will be necessary for installing MQ CLI. The third command to run is  sudo chown -R $(whoami) /usr/lib/node_modules /usr/bin . This command will give the user write permissions to two directories whose write permissions are necessary for the installation of MQ CLI. Finally, the command  npm install -g mq-cli  installs MQ CLI. You have now created the step that installs MQ CLI and enables MQ CLI commands within your container.  Your step should look like the below .  - run:\n    name: Install MQ CLI\n    command: |\n      curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -\n      sudo apt-get install -y nodejs\n      sudo chown -R $(whoami) /usr/lib/node_modules /usr/bin\n      npm install -g mq-cli    Now that you have access to MQ CLI commands, you can create a subsequent step of your own to perform a task with these commands. The following sub-instructions breakdown  how to write a step that uploads your app to MoQuality  using MQ CLI commands.  - run:\n    name: Login and Upload to MoQuality\n    command: |\n      mq login -a [API_KEY]\n      mq user\n      mq upload -f [APK_PATH] -a [APP_ID]\n      mq apps    The first two lines create a step called  Upload to MoQuality .    As before, the line  command: |  indicates that you are going to issue multiple lines of commands.    mq login -a [API_KEY]  logs you in using your API key. Your API key uniquely identifies your account. To find your API key, run  mq login  in your command line and follow the prompts to log in to your account. Next, run  mq user  to display user information. Your API key will be in the list of returned information.    mq user  returns user information, and you can check that your user is correct.    mq upload -f [APK_PATH] -a [APP_ID]  will upload your app, whose location is provided by  [APK_PATH] , the path to your apk file. The command uses  [APP_ID]  to determine which app is being uploaded. Your app id uniquely identifies your app. To find your app id, log in with  mq login  and run  mq apps  to see a list of your apps. Find your app in the list and locate the app id in the same row.    mq apps  returns a list of your apps, and you can confirm that your app version has incremented by one.      Now that you have created new steps, integrating MoQuality with CircleCI,  run  circleci build  in your command line to run the build job. If you added the steps within a job other than build,  add the  --job  option followed by the name of the job  to the  circleci build  command.",
            "title": "Instructions"
        },
        {
            "location": "/integration-ci-cd/circleci/#notes",
            "text": "We do not recommend running the commands to install MQ CLI within a docker image and saving that image for future use. If you do so, and updates to MQ CLI are released, your docker image will not be using them. It is best to install MQ CLI every time you run the workflow, so you are always using the most up-to-date version of MQ CLI. This is what was done within the instructions.",
            "title": "Notes"
        },
        {
            "location": "/integration-ci-cd/circleci/#troubleshooting",
            "text": "Write permissions error when installing MQ CLI  Read the error to find the directory to which you cannot write. Add the path of that directory to your  sudo chown -R $(whoami) /usr/lib/node_modules /usr/bin  command. The command will then look like  sudo chown -R $(whoami) /usr/lib/node_modules /usr/bin [DIRECTORY_PATH] .",
            "title": "Troubleshooting"
        },
        {
            "location": "/integration-ci-cd/dockerfile/",
            "text": "Custom Docker Images\n\u2693\n\n\nIntroduction\n\u2693\n\n\nA source of difficulty when developing applications is creating the perfect environment on one's machine to run said application. However, by using Docker, you can set up the perfect environment to run your application. Dockerfiles define the environment within a container, a runtime instance of an image. An image is an executable package that cointains an application's code, runtime, libraries, environment variables, and configuration files. A Dockerfile can use an image, such as Ubuntu, and define the environment on top of the image. Thus, we can run an app in, for example, an Ubuntu container with all the necessary dependencies installed, as defined in our Dockerfile. These instructions follow the creation of a Dockerfile for testing a calculator app, available [here], and are based off of \nthis\n Docker documentation.\n\n\nPrerequisites\n\u2693\n\n\n\n\nDocker: Install your preferred version of Docker \nhere\n and use the \nofficial Docker getting started guide\n to familiarize yourself with Docker.\n\n\nDocker account: Set up a Docker account \nhere\n.\n\n\n\n\nInstructions\n\u2693\n\n\nCreate a Custom Docker Image\n\u2693\n\n\n\n\n\n\nCreate an empty directory\n and navigate into that directory within your command line.\n\n\n$ \ncd\n \n[\nEMPTY_DIRECTORY\n]\n\n\n\n\n\n\n\n\n\n\nWithin that directory, \ncreate a file called \nDockerfile\n. This is where you will define the environment of your container.\n\n\n\n\n\n\nOpen \nDockerfile\n in an editor of your choice.\n\n\n\n\n\n\nFill the Dockerfile while following the format below. A very short example Dockerfile is beneath the format. The \nFROM instruction\n initializes a new build stage and sets the base image. The \nRUN instruction\n runs a command within our docker container. For more reference on instructions and information on Docker syntax, click \nhere\n.\n\n\n\n\n\n\nFormat\n\n\n# Comment\n\nINSTRUCTION arguments\n\n\n\n\n\nExample\n\n\n#Use an official Ubuntu runtime as a parent image\n\n\nFROM\n ubuntu\n\n\n\n#Say hello\n\n\nRUN\n \necho\n \n\"Hello world!\"\n\n\n\n\n\n\n\n\n\n\nNow that you have a Dockerfile with instructions, it's time to \nbuild your image\n. Run the below command, inserting your own tag for the image. \nNote the period\n after the image tag.\n\n\n$ docker build -t \n[\nLOCAL_IMAGE_TAG\n]\n .\n\n\n\n\n\n\n\n\n\nOnce your image is done building, you can confirm that it is in your machine\u2019s local Docker image registry with the below command.\n\n\n$ docker image ls\n\n\n\n\n\n\n\n\n\nTo share your image, log in to docker with the below command.\n\n\n$ docker login\n\n\n\n\n\n\n\n\n\nBefore uploading your image, you should give it a tag for Docker Hub using the following command. An example of a repository name and tag could be \ndockertesting:latest\n. If no tag is given, Docker will tag the image with \nlatest\n by default.\n\n\n$ docker tag \n[\nLOCAL_IMAGE_TAG\n]\n \n[\nDOCKER_USERNAME\n]\n/\n[\nREPOSITORY_NAME\n]\n:\n[\nTAG\n]\n\n\n\n\n\n\n\n\n\n\nPublish the image with below command.\n\n\n$ docker push \n[\nDOCKER_USERNAME\n]\n/\n[\nREPOSITORY_NAME\n]\n:\n[\nTAG\n]\n\n\n\n\n\n\n\n\n\n\nNow your image is accessible from online and can be pulled at any time. The next set of instructions explain how you can use your Docker image in CircleCI.\n\n\nCircleCI and Custom Docker Images\n\u2693\n\n\nCircleCI supports the use of custom Docker images, and the CircleCI documentation on customizing Docker images for CircleCI can be found \nhere\n. If you have built and pushed a custom Docker image, you can use it in your CircleCI job by adding the image path to the Docker executor in your job.\n\n\njob\n:\n\n  \nbuild\n:\n\n    \ndocker\n:\n\n      \n-\n \nimage\n:\n \n[\nDOCKER_USERNAME\n]\n/[REPOSITORY_NAME]:[TAG]\n\n\n\n\n\n\nThe information in brackets can be found by visiting your image on \nDocker Hub\n and selecting your repository. The Docker pull command will be on the repository page, and you can find your tag under the Tags tab.\n\n\nYou can also build your custom Docker image on top of a CirlceCI image. Say you want to use the \ncircleci/android:api-25-alpha\n image, but you need to add more dependencies. You can create a Dockerfile and begin it with the following.\n\n\nFROM\n circleci/android:api-25-alpha\n\n\n\n\n\n\nNow you can add your instructions to set up an environment within a CircleCI container. The next section breaks down an exmaple Docker image used with CircleCI to build and upload an app to MoQuality.\n\n\nCircleCI and Custom Docker Image for MoQuality App\n\u2693\n\n\nMoQuality has created a [Github repository] with all the necessary files to build and upload a calculator app to MoQuality by using CircleCI and a custom Dockerfile. Our Dockerfile uses Ubuntu as our parent image and installs dependencies such as Gradle to build the app. The Docker image path is \njragonemq/mqubuntutest:latest\n. Before beginning, create an app on MoQuality that you can use to test the upload properties of this build. It does not matter what apk file you upload upon creation of the app.\n\n\nThe following is the code behind the \njragonemq/mqubuntutest:latest\n Dockerfile. This creates an environment for running the calculator app on top of an Ubuntu parent image. We are essentially filling a fresh Ubuntu container with our dependencies. The comments explain what each set of instructions is doing. However, understanding each instruction is less important than understanding what these instructions accomplish holistically: they build the environment.\n\n\n#Use an official Ubuntu runtime as a parent image\n\n\nFROM\n ubuntu\n\n\n\n#Set user to root\n\nUSER root\n\n\n#Update apt-get and install dependencies\n\n\nRUN\n apt-get -y update \n&&\n apt-get install -y wget bzip2 unzip gcc nodejs npm openjdk-8-jdk git sudo curl\n\n\n#Install Gradle\n\n\nRUN\n wget https://services.gradle.org/distributions/gradle-4.1-bin.zip\n\nRUN\n mkdir /opt/gradle\n\nRUN\n unzip -d /opt/gradle gradle-4.1-bin.zip\n\n#Define environment variable\n\n\nENV\n PATH=$PATH:/opt/gradle/gradle-4.1/bin\n\n\nRUN\n gradle -v\n\n\n#Install Android tools for sdkmanager\n\n\nRUN\n mkdir /android-sdk\n\nRUN\n wget https://dl.google.com/android/repository/sdk-tools-darwin-3859397.zip\n\nRUN\n unzip -d /android-sdk sdk-tools*.zip\n\nENV\n ANDROID_HOME=/android-sdk\n\n\nENV\n PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/tools/platform-tools:$ANDROID_HOME/build-tools/26.0.2\n\n\n\n#Accept all licenses and install dependencies\n\n\nRUN\n yes \n|\n sdkmanager --licenses\n\nRUN\n sdkmanager \n\"platforms;android-22\"\n\n\nRUN\n sdkmanager \n\"build-tools;26.0.2\"\n\n\n\n#Copy Android\n\nCOPY android-8.0.0 android\n\nENV\n PATH=\"/android:$PATH\"\n\n\n\n\n\n\nCreate an empty directory and \ncd\n into it. Then, clone the repository using \ngit clone\n. Within the hidden \n.circleci\n folder is the \nconfig.yml\n file. In this file are steps which build the app using \ngradle build\n, \ninstall the mq-cli\n, and \nlogin and upload the app to MoQuality\n. By the \nmq login\n and \nmq upload\n commands, fill in [API_KEY] and [APP_ID] with the API key of your account and app id of your app. To find your API key, run \nmq login\n in your command line and follow the prompts to log in to your account. Next, run \nmq user\n to display user information. Your API key will be in the list of returned information. To find your app id, log in with \nmq login\n and run \nmq apps\n to see a list of your apps. Find your app in the list and locate the app id in the same row. Using the above instructions and \nCircleCI MQ CLI integration documentation\n, we have created our own custom Dockerfile, integrated it with CircleCI, and integrated the CircleCI with MoQuality.\n\n\nversion\n:\n \n2\n\n\njobs\n:\n\n  \nbuild\n:\n\n    \ndocker\n:\n\n      \n-\n \nimage\n:\n \njragonemq/mqubuntutest:latest\n\n    \nenvironment\n:\n\n      \nJVM_OPTS\n:\n \n-Xmx3200m\n\n    \nsteps\n:\n\n      \n-\n \ncheckout\n\n      \n-\n \nrun\n:\n\n          \nname\n:\n \nBuild app\n\n          \ncommand\n:\n \ngradle build\n\n      \n-\n \nrun\n:\n\n          \nname\n:\n \nInstall mq-cli\n\n          \ncommand\n:\n \n|\n\n            \ncurl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -\n\n            \nsudo apt-get install -y nodejs\n\n            \nsudo chown -R $(whoami) /usr/lib/node_modules /usr/bin\n\n            \nnpm -g config set user root\n\n            \nnpm install -g mq-cli\n\n      \n-\n \nrun\n:\n\n          \nname\n:\n \nLogin and Upload to MoQuality\n\n          \ncommand\n:\n \n|\n\n            \nmq login -a [API_KEY]\n\n            \nmq user\n\n            \nmq upload -f app/build/outputs/apk/debug/app-debug.apk -a [APP_ID]\n\n            \nmq apps",
            "title": "Custom Docker Images"
        },
        {
            "location": "/integration-ci-cd/dockerfile/#custom-docker-images",
            "text": "",
            "title": "Custom Docker Images"
        },
        {
            "location": "/integration-ci-cd/dockerfile/#introduction",
            "text": "A source of difficulty when developing applications is creating the perfect environment on one's machine to run said application. However, by using Docker, you can set up the perfect environment to run your application. Dockerfiles define the environment within a container, a runtime instance of an image. An image is an executable package that cointains an application's code, runtime, libraries, environment variables, and configuration files. A Dockerfile can use an image, such as Ubuntu, and define the environment on top of the image. Thus, we can run an app in, for example, an Ubuntu container with all the necessary dependencies installed, as defined in our Dockerfile. These instructions follow the creation of a Dockerfile for testing a calculator app, available [here], and are based off of  this  Docker documentation.",
            "title": "Introduction"
        },
        {
            "location": "/integration-ci-cd/dockerfile/#prerequisites",
            "text": "Docker: Install your preferred version of Docker  here  and use the  official Docker getting started guide  to familiarize yourself with Docker.  Docker account: Set up a Docker account  here .",
            "title": "Prerequisites"
        },
        {
            "location": "/integration-ci-cd/dockerfile/#instructions",
            "text": "",
            "title": "Instructions"
        },
        {
            "location": "/integration-ci-cd/dockerfile/#create-a-custom-docker-image",
            "text": "Create an empty directory  and navigate into that directory within your command line.  $  cd   [ EMPTY_DIRECTORY ]     Within that directory,  create a file called  Dockerfile . This is where you will define the environment of your container.    Open  Dockerfile  in an editor of your choice.    Fill the Dockerfile while following the format below. A very short example Dockerfile is beneath the format. The  FROM instruction  initializes a new build stage and sets the base image. The  RUN instruction  runs a command within our docker container. For more reference on instructions and information on Docker syntax, click  here .    Format  # Comment \nINSTRUCTION arguments  Example  #Use an official Ubuntu runtime as a parent image  FROM  ubuntu  #Say hello  RUN   echo   \"Hello world!\"     Now that you have a Dockerfile with instructions, it's time to  build your image . Run the below command, inserting your own tag for the image.  Note the period  after the image tag.  $ docker build -t  [ LOCAL_IMAGE_TAG ]  .    Once your image is done building, you can confirm that it is in your machine\u2019s local Docker image registry with the below command.  $ docker image ls    To share your image, log in to docker with the below command.  $ docker login    Before uploading your image, you should give it a tag for Docker Hub using the following command. An example of a repository name and tag could be  dockertesting:latest . If no tag is given, Docker will tag the image with  latest  by default.  $ docker tag  [ LOCAL_IMAGE_TAG ]   [ DOCKER_USERNAME ] / [ REPOSITORY_NAME ] : [ TAG ]     Publish the image with below command.  $ docker push  [ DOCKER_USERNAME ] / [ REPOSITORY_NAME ] : [ TAG ]     Now your image is accessible from online and can be pulled at any time. The next set of instructions explain how you can use your Docker image in CircleCI.",
            "title": "Create a Custom Docker Image"
        },
        {
            "location": "/integration-ci-cd/dockerfile/#circleci-and-custom-docker-images",
            "text": "CircleCI supports the use of custom Docker images, and the CircleCI documentation on customizing Docker images for CircleCI can be found  here . If you have built and pushed a custom Docker image, you can use it in your CircleCI job by adding the image path to the Docker executor in your job.  job : \n   build : \n     docker : \n       -   image :   [ DOCKER_USERNAME ] /[REPOSITORY_NAME]:[TAG]   The information in brackets can be found by visiting your image on  Docker Hub  and selecting your repository. The Docker pull command will be on the repository page, and you can find your tag under the Tags tab.  You can also build your custom Docker image on top of a CirlceCI image. Say you want to use the  circleci/android:api-25-alpha  image, but you need to add more dependencies. You can create a Dockerfile and begin it with the following.  FROM  circleci/android:api-25-alpha   Now you can add your instructions to set up an environment within a CircleCI container. The next section breaks down an exmaple Docker image used with CircleCI to build and upload an app to MoQuality.",
            "title": "CircleCI and Custom Docker Images"
        },
        {
            "location": "/integration-ci-cd/dockerfile/#circleci-and-custom-docker-image-for-moquality-app",
            "text": "MoQuality has created a [Github repository] with all the necessary files to build and upload a calculator app to MoQuality by using CircleCI and a custom Dockerfile. Our Dockerfile uses Ubuntu as our parent image and installs dependencies such as Gradle to build the app. The Docker image path is  jragonemq/mqubuntutest:latest . Before beginning, create an app on MoQuality that you can use to test the upload properties of this build. It does not matter what apk file you upload upon creation of the app.  The following is the code behind the  jragonemq/mqubuntutest:latest  Dockerfile. This creates an environment for running the calculator app on top of an Ubuntu parent image. We are essentially filling a fresh Ubuntu container with our dependencies. The comments explain what each set of instructions is doing. However, understanding each instruction is less important than understanding what these instructions accomplish holistically: they build the environment.  #Use an official Ubuntu runtime as a parent image  FROM  ubuntu  #Set user to root \nUSER root #Update apt-get and install dependencies  RUN  apt-get -y update  &&  apt-get install -y wget bzip2 unzip gcc nodejs npm openjdk-8-jdk git sudo curl #Install Gradle  RUN  wget https://services.gradle.org/distributions/gradle-4.1-bin.zip RUN  mkdir /opt/gradle RUN  unzip -d /opt/gradle gradle-4.1-bin.zip #Define environment variable  ENV  PATH=$PATH:/opt/gradle/gradle-4.1/bin  RUN  gradle -v #Install Android tools for sdkmanager  RUN  mkdir /android-sdk RUN  wget https://dl.google.com/android/repository/sdk-tools-darwin-3859397.zip RUN  unzip -d /android-sdk sdk-tools*.zip ENV  ANDROID_HOME=/android-sdk  ENV  PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/tools/platform-tools:$ANDROID_HOME/build-tools/26.0.2  #Accept all licenses and install dependencies  RUN  yes  |  sdkmanager --licenses RUN  sdkmanager  \"platforms;android-22\"  RUN  sdkmanager  \"build-tools;26.0.2\"  #Copy Android \nCOPY android-8.0.0 android ENV  PATH=\"/android:$PATH\"   Create an empty directory and  cd  into it. Then, clone the repository using  git clone . Within the hidden  .circleci  folder is the  config.yml  file. In this file are steps which build the app using  gradle build ,  install the mq-cli , and  login and upload the app to MoQuality . By the  mq login  and  mq upload  commands, fill in [API_KEY] and [APP_ID] with the API key of your account and app id of your app. To find your API key, run  mq login  in your command line and follow the prompts to log in to your account. Next, run  mq user  to display user information. Your API key will be in the list of returned information. To find your app id, log in with  mq login  and run  mq apps  to see a list of your apps. Find your app in the list and locate the app id in the same row. Using the above instructions and  CircleCI MQ CLI integration documentation , we have created our own custom Dockerfile, integrated it with CircleCI, and integrated the CircleCI with MoQuality.  version :   2  jobs : \n   build : \n     docker : \n       -   image :   jragonemq/mqubuntutest:latest \n     environment : \n       JVM_OPTS :   -Xmx3200m \n     steps : \n       -   checkout \n       -   run : \n           name :   Build app \n           command :   gradle build \n       -   run : \n           name :   Install mq-cli \n           command :   | \n             curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash - \n             sudo apt-get install -y nodejs \n             sudo chown -R $(whoami) /usr/lib/node_modules /usr/bin \n             npm -g config set user root \n             npm install -g mq-cli \n       -   run : \n           name :   Login and Upload to MoQuality \n           command :   | \n             mq login -a [API_KEY] \n             mq user \n             mq upload -f app/build/outputs/apk/debug/app-debug.apk -a [APP_ID] \n             mq apps",
            "title": "CircleCI and Custom Docker Image for MoQuality App"
        },
        {
            "location": "/faq/",
            "text": "Frequently Asked Questions\n\u2693\n\n\nTesting\n\u2693\n\n\nWhat types of apps can be tested with MoQuality?\n\u2693\n\n\nMoQuality can be used to test native Android and iOS apps.\n\n\nWhat it the maximum number of apps we can test?\n\u2693\n\n\nYou can upload a total of 100 apps for each account. Note that two versions of the same app counts as two apps towards this total.\n\n\nDo I need to instrument my app or supply source code?\n\u2693\n\n\nNo instrumentation or source code is required to use the built-in tests. Android apps can be submitted as is. iOS apps should be built with \u201ciOS Device\u201d as the target. If they are built with a simulator as the target, select the simulator checkbox while uploading the app.\n\n\nHow do you clean up devices after my testing is completed?\n\u2693\n\n\nAfter test execution completes, we uninstall the app and any data related to the app (cache is deleted).\n\n\nWhile we continue to add additional cleanup steps and improve the cleanup process, it is possible for data to persist between sessions. In case you want to test on a private device, contact us. In some cases you might have to provide sensitive information like login or other security-sensitive details during your automated test sessions. We advise you to create sandbox accounts to perform these tests on your staging environments.\n\n\nDo you modify my app?\n\u2693\n\n\nNo, we don't modify your app. Some iOS apps may require re-signing, but this feature is not currently supported. We recommend uploading a version of your app with debugging symbols enabled.\n\n\nTest Recording and Editing\n\u2693\n\n\nDoes the recorder support both Android and iOS?\n\u2693\n\n\nYes, both Android and iOS, including iOS simulators, are supported.\n\n\nDo I need to additional software on my machine?\n\u2693\n\n\nAndroid does not require any additional software. iOS requires Xcode to be installed and the command-line tools enabled. For details on how to setup a system for use with iOS, see \nRecorder Setup for iOS Devices\n.\n\n\nCan I connect to multiple Android devices from my local machine?\n\u2693\n\n\nYes. The recorder allows you to choose which you would like to use after you have logged in.\n\n\nWhat is the maximum test time allowed?\n\u2693\n\n\nThe maximum time for each test is 5 minutes. If you need a longer timeout, please\u00a0contact us.\n\n\nIs there a way to download the results?\n\u2693\n\n\nWe offer this feature as an extra package. After you enable it, a link appears in our dashboard that enables you to download tests and test reports in JSON format.\n\n\nDevices\n\u2693\n\n\nAre devices able to communicate with other services or systems that are available on the Internet?\n\u2693\n\n\nYes. All devices have internet access through a Wifi connection.\n\n\nCan I make phone calls or send SMS from the devices?\n\u2693\n\n\nNo, devices do not have carrier SIM setup and cannot make phone calls or send SMS messages. Please contact us via our support challels (see end) with your specific usecase.\n\n\nCan I use the device camera?\n\u2693\n\n\nYes, you can use the device cameras, both front and rear facing. Images might be dark or blurry.\n\n\nAndroid: Are there any default accounts (e.g., Google) available on cloud devices?\n\u2693\n\n\nNo, cloud devices should be clean and you cannot rely on any active accounts being present on them. \n\n\nWe do however allow you to add webhooks in the tests recorded through the recorder, which can be used in conjuction with a server side script to partly facilitate co-ordination with account creation and use within tests. Please contact us via our support challels (see end) with your specific usecase.\n\n\nAndroid: Is Google Play Services available on cloud devices? Which version is installed?\n\u2693\n\n\nYes, Google Play Services is installed on devices that support it. The services are updated as new versions become available.\n\n\nI didn't find an answer for my question?\n\u2693\n\n\nPlease contact us at any of our following support channels:\n- Intercom chat on our website \n- Slack chat at http://slack.moquality.com\n- Email at support@moquality.com",
            "title": "FAQ"
        },
        {
            "location": "/faq/#frequently-asked-questions",
            "text": "",
            "title": "Frequently Asked Questions"
        },
        {
            "location": "/faq/#testing",
            "text": "",
            "title": "Testing"
        },
        {
            "location": "/faq/#what-types-of-apps-can-be-tested-with-moquality",
            "text": "MoQuality can be used to test native Android and iOS apps.",
            "title": "What types of apps can be tested with MoQuality?"
        },
        {
            "location": "/faq/#what-it-the-maximum-number-of-apps-we-can-test",
            "text": "You can upload a total of 100 apps for each account. Note that two versions of the same app counts as two apps towards this total.",
            "title": "What it the maximum number of apps we can test?"
        },
        {
            "location": "/faq/#do-i-need-to-instrument-my-app-or-supply-source-code",
            "text": "No instrumentation or source code is required to use the built-in tests. Android apps can be submitted as is. iOS apps should be built with \u201ciOS Device\u201d as the target. If they are built with a simulator as the target, select the simulator checkbox while uploading the app.",
            "title": "Do I need to instrument my app or supply source code?"
        },
        {
            "location": "/faq/#how-do-you-clean-up-devices-after-my-testing-is-completed",
            "text": "After test execution completes, we uninstall the app and any data related to the app (cache is deleted).  While we continue to add additional cleanup steps and improve the cleanup process, it is possible for data to persist between sessions. In case you want to test on a private device, contact us. In some cases you might have to provide sensitive information like login or other security-sensitive details during your automated test sessions. We advise you to create sandbox accounts to perform these tests on your staging environments.",
            "title": "How do you clean up devices after my testing is completed?"
        },
        {
            "location": "/faq/#do-you-modify-my-app",
            "text": "No, we don't modify your app. Some iOS apps may require re-signing, but this feature is not currently supported. We recommend uploading a version of your app with debugging symbols enabled.",
            "title": "Do you modify my app?"
        },
        {
            "location": "/faq/#test-recording-and-editing",
            "text": "",
            "title": "Test Recording and Editing"
        },
        {
            "location": "/faq/#does-the-recorder-support-both-android-and-ios",
            "text": "Yes, both Android and iOS, including iOS simulators, are supported.",
            "title": "Does the recorder support both Android and iOS?"
        },
        {
            "location": "/faq/#do-i-need-to-additional-software-on-my-machine",
            "text": "Android does not require any additional software. iOS requires Xcode to be installed and the command-line tools enabled. For details on how to setup a system for use with iOS, see  Recorder Setup for iOS Devices .",
            "title": "Do I need to additional software on my machine?"
        },
        {
            "location": "/faq/#can-i-connect-to-multiple-android-devices-from-my-local-machine",
            "text": "Yes. The recorder allows you to choose which you would like to use after you have logged in.",
            "title": "Can I connect to multiple Android devices from my local machine?"
        },
        {
            "location": "/faq/#what-is-the-maximum-test-time-allowed",
            "text": "The maximum time for each test is 5 minutes. If you need a longer timeout, please\u00a0contact us.",
            "title": "What is the maximum test time allowed?"
        },
        {
            "location": "/faq/#is-there-a-way-to-download-the-results",
            "text": "We offer this feature as an extra package. After you enable it, a link appears in our dashboard that enables you to download tests and test reports in JSON format.",
            "title": "Is there a way to download the results?"
        },
        {
            "location": "/faq/#devices",
            "text": "",
            "title": "Devices"
        },
        {
            "location": "/faq/#are-devices-able-to-communicate-with-other-services-or-systems-that-are-available-on-the-internet",
            "text": "Yes. All devices have internet access through a Wifi connection.",
            "title": "Are devices able to communicate with other services or systems that are available on the Internet?"
        },
        {
            "location": "/faq/#can-i-make-phone-calls-or-send-sms-from-the-devices",
            "text": "No, devices do not have carrier SIM setup and cannot make phone calls or send SMS messages. Please contact us via our support challels (see end) with your specific usecase.",
            "title": "Can I make phone calls or send SMS from the devices?"
        },
        {
            "location": "/faq/#can-i-use-the-device-camera",
            "text": "Yes, you can use the device cameras, both front and rear facing. Images might be dark or blurry.",
            "title": "Can I use the device camera?"
        },
        {
            "location": "/faq/#android-are-there-any-default-accounts-eg-google-available-on-cloud-devices",
            "text": "No, cloud devices should be clean and you cannot rely on any active accounts being present on them.   We do however allow you to add webhooks in the tests recorded through the recorder, which can be used in conjuction with a server side script to partly facilitate co-ordination with account creation and use within tests. Please contact us via our support challels (see end) with your specific usecase.",
            "title": "Android: Are there any default accounts (e.g., Google) available on cloud devices?"
        },
        {
            "location": "/faq/#android-is-google-play-services-available-on-cloud-devices-which-version-is-installed",
            "text": "Yes, Google Play Services is installed on devices that support it. The services are updated as new versions become available.",
            "title": "Android: Is Google Play Services available on cloud devices? Which version is installed?"
        },
        {
            "location": "/faq/#i-didnt-find-an-answer-for-my-question",
            "text": "Please contact us at any of our following support channels:\n- Intercom chat on our website \n- Slack chat at http://slack.moquality.com\n- Email at support@moquality.com",
            "title": "I didn't find an answer for my question?"
        }
    ]
}